{"version":3,"sources":["webpack:///js/bundle.js","webpack:///webpack/bootstrap 1919e463f377333c7b80","webpack:///./src/app.js","webpack:///./~/.3.0.5@mokit/lib/index.js","webpack:///./~/.3.0.5@mokit/lib/info.json","webpack:///./~/.2.0.14@ntils/index.js","webpack:///./~/.2.1.10@cify/index.js","webpack:///./~/.3.0.5@mokit/lib/watcher/index.js","webpack:///./~/.3.0.5@mokit/lib/observer/index.js","webpack:///./~/.3.0.5@mokit/lib/events/index.js","webpack:///./~/.3.0.5@mokit/lib/template/index.js","webpack:///./~/.3.0.5@mokit/lib/template/compiler.js","webpack:///./~/.3.0.5@mokit/lib/template/directive.js","webpack:///./~/.3.0.5@mokit/lib/template/expression.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/index.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/text.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/each.js","webpack:///./~/.3.0.5@mokit/lib/template/scope.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/if.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/prop.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/attr.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/on.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/inner-html.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/inner-text.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/prevent.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/id.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/cloak.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/show.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/model/index.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/model/select.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/model/editable.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/model/input.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/model/radio.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/model/checkbox.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/model/prop.js","webpack:///./~/.3.0.5@mokit/lib/template/directives/attribute.js","webpack:///./~/.3.0.5@mokit/lib/template/template.js","webpack:///./~/.3.0.5@mokit/lib/component/index.js","webpack:///./~/.3.0.5@mokit/lib/component/component.js","webpack:///./~/.3.0.5@mokit/lib/component/component-directive.js","webpack:///./~/.3.0.5@mokit/lib/component/components/index.js","webpack:///./~/.3.0.5@mokit/lib/component/components/view.js","webpack:///./~/.1.0.6@mokit-router/lib/index.js","webpack:///./~/.1.0.5@mokit-plugin/index.js","webpack:///./~/.1.0.6@mokit-router/lib/router.js","webpack:///./~/.1.0.6@mokit-router/lib/router-base.js","webpack:///./~/.1.0.6@mokit-router/lib/drivers/hash.js","webpack:///./~/.1.0.6@mokit-router/lib/components/router-view.js","webpack:///./~/.1.0.6@mokit-router/lib/directives/link.js","webpack:///./~/.1.0.1@mokit-touch/lib/index.js","webpack:///./~/.1.0.1@mokit-touch/lib/touch.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","mokit","Router","Touch","use","info","utils","Class","Watcher","Observer","Template","Component","EventEmitter","copy","version","plugin","install","isFunction","Error","this","name","_typeof","Symbol","iterator","obj","constructor","prototype","ntils","noop","isNull","trim","str","replace","str1","str2","RegExp","startWith","indexOf","contains","endWith","length","has","hasProperty","hasOwnProperty","isString","String","isNumber","Number","isBoolean","Boolean","isElement","window","Element","tagName","nodeType","nodeName","attributes","ownerDocument","isText","Text","isObject","isArray","v1","Object","toString","v2","Array","v3","splice","v4","isDate","val","Date","isRegexp","toArray","array","slice","toDate","self","each","list","handler","scope","listLength","i","rs","key","formatDate","date","format","dict","placeholder","M+","getMonth","d+","getDate","h+","getHours","m+","getMinutes","s+","getSeconds","w+","getDay","q+","Math","floor","S","getMilliseconds","test","$1","getFullYear","substr","value","src","dst","igonres","getOwnPropertyDescriptor","defineProperty","ex","clone","objClone","forEach","defineFreezeProp","mix","mode","keys","enumerable","configurable","writable","err","push","create","proto","props","Cotr","setPrototypeOf","__proto__","getPrototypeOf","deepEqual","a","b","aKeys","bKeys","allKeys","concat","checkedMap","result","fromTo","fromNum","toNum","step","abs","newGuid","S4","random","substring","map","fn","buffer","setByPath","path","split","index","getByPath","unique","newArray","getFunctionArgumentNames","parts","filter","short","maxLength","strLength","trimLength","firstUpper","toLowerCase","parseDom","_PDD_","document","createElement","innerHTML","firstNode","childNodes","cloneNode","ClassFactory","options","$name","$extends","$static","superPrototype","$super","_super_called_","_super_ret_","apply","arguments","bind","$extend","calcor","first","calc","force","newValue","OBSERVER_PROP_NAME","CHANGE_EVENT_NAME","EVENT_MAX_DISPATCH_LAYER","IGNORE_REGEXPS","target","observer","root","parents","set","isIgnore","get","shadow","oldValue","childObserver","addChild","removeChild","emitChange","_wrapArray","names","_getPropertyNames","desc","clearReference","child","dispatch","eventName","event","_src_","_layer_","emit","item","parent","parentEvent","foundIndex","items","pop","shift","startIndex","endIndex","observe","word","some","re","Function","emitter","_emitter_","_isElement_","_target_","_listeners_","on","$on","$addListener","addListener","off","$off","$removeListener","removeListener","$emit","listener","capture","_addElementEventListener","_maxListeners","_removeElementEventListener","_listener","data","canBubble","cancelAble","_emitElementEvent","stopPropagation","addEventListener","descriptor","_events","removeEventListener","createEvent","initEvent","dispatchEvent","register","Compiler","Directive","Expression","directives","commonDirectives","DEFAULT_PREFIX","prefix","elementDirectives","attributeDirectives","registerDirectives","directive","fullName","type","TE","toUpperCase","_parseAttrInfo","attrName","decorates","_createDirectiveInstance","compiler","_bindHandler","sort","level","boundDirectives","remove","attribute","node","removeAttribute","final","_compileElement","ElementDirective","_compileAttributes","attrInfo","AttrDirective","directiveOptions","expression","literal","mixed","_compileChildren","childNode","_compiled_","childHandler","compile","children","execute","dispose","unbind","element","classOptions","TA","LG","DirectiveClass","instanceOptions","update","_value_","LP","LS","LE","LA","LC","code","func","_compileMixedCode","_compileCode","_escapeEOL","_wrapCode","_createFunction","statements","_parseMixedCode","join","token","isExpr","tokens","char","nextChar","_escapeCode","#text","if","prop","attr","html","text","prevent","cloak","show","model","*","expr","nodeValue","Scope","mountNode","createTextNode","parentNode","insertBefore","parseExpr","eachItems","eachType","fnText","keyName","valueName","_this","currentEachKeys","itemsFragment","createDocumentFragment","eachTarget","newScope","oldItem","newItem","appendChild","k","_handler","$substitute","$target","setAttribute","attrValue","eventTarget","emiter","$event","innerText","style","display","SelectDirective","EditableDirective","InputDirective","RadioDirective","CheckboxDirective","PropDirective","getAttribute","isContentEditable","backExpr","selectedOptions","multiple","option","selected","checked","bindProp","watcher","$watch","$unWatch","computedName","computedValue","nameExpr","valueExpr","newComputedName","newComputeValue","render","_update","_updateTimer","clearTimeout","setTimeout","_onBind","_bound","disableFirst","$self","components","component","classOpts","mixes","extendComponent","extend","mixedClassOpts","mixItem","$options","ComponentClass","instanceOpts","$class","_onTemplateUpdate_","_createdData_","_createProperties_","properties","_createWatches_","watches","watch","$directives","_importDirectives_","$components","_importComponents_","$setParent","$callHook","$mount","$compile","$parent","$removeChild","$addChild","$children","$root","ComponentDirective","args","$data","$properties","hasGetterOrSetter","_observer_","_watchers_","calcer","findIndex","w","_createElement_","_created_","$template","$element","_template_","deferReady","append","_mounted_","_mountNode","_removed_","$appendTo","$remove","$dispatch","$broadcast","$dispose","template","methods","start","handleAttrs","handleContents","attrs","directiveRegexp","placeHandlers","places","querySelectorAll","place","contents","selector","content","_ready_","View","_transitioning","newComponentInstance","oldComponentInstance","componentInstance","transition","prep","go","_Component","_transition","clean","init","switchTo","newComponent","oldComponent","done","Plugin","factory","thunk","opts","entity","RouterBase","HashDirver","RouterView","LinkDirective","ROOT_PATH","view","dirvier","_onChanged","_view","_router","fromPath","toPath","resolveUri","routes","route","query","parseQuery","pattern","addOne","toUri","fromUri","baseDir","lastIndexOf","uriParts","uriHash","newUriParts","part","queryString","location","href","pairs","pair","strs","app","owner","$router","router","table","add","PLACE_HOLDER_EXPR","COLLECT_EXPR_STR","GREEDY_COLLECT_EXPR_STR","routeInstanceProto","actionUrl","action","withoutActionUrl","_parseKeyDef","_keyDefStr","keyDefStr","keyDefParts","keyDef","greedy","lastIndex","keyDefs","match","exprStr","collectExprStr","defaultMethods","method","_name","_route","nameParts","targetParts","controller","_parseDynamicAction","params","_createRouteInstance","srcRoute","url","routeInstance","urlParts","handleActionFromUrl","routeArray","values","exec","failed","parseActionFromUrl","_routeArray","_getForActionFromUrl","ctrlRouteUrl","ctrlRouteArray","actionFromUrl","matchByMethod","SEPARATOR","HashDriver","_onChange","hash","onCreated","SUPPORT_TOUCH","START_EVENT_NAME","MOVE_EVENT_NAME","END_EVENT_NAME","CUSTOM_EVENT_NAMES","swipeDurationThreshold","swipeHorizontalDistanceThreshold","swipeVerticalDistanceThreshold","holdDurationThreshold","dblDurationThreshold","scrollSupressionThreshold","touchstart","point","changedTouches","startPoint","endPoint","x","pageX","y","pageY","timeStamp","createHoldHandler","isPointDown","holdTimer","holdHandler","taphold","clearHoldHandler","getTouchInfo","existStartAndStop","horizontalDistance","verticalDistance","horizontalDistanceValue","verticalDistanceVlaue","isHorizontal","isVertical","sHorizontal","isSwipeMove","isSwipeTime","isHoldTime","direction","touchmove","stopBubble","swipe","dbltap","PreTapTime"],"mappings":"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","file":"js/bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar mokit = __webpack_require__(1);\n\tvar Router = __webpack_require__(40);\n\tvar Touch = __webpack_require__(47);\n\t\n\t__webpack_require__(49);\n\t\n\tmokit.use(Router);\n\tmokit.use(Touch);\n\t\n\tvar router = new Router();\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar info = __webpack_require__(2);\n\tvar utils = __webpack_require__(3);\n\tvar Class = __webpack_require__(4);\n\tvar Watcher = __webpack_require__(5);\n\tvar Observer = __webpack_require__(6);\n\tvar Template = __webpack_require__(8);\n\tvar Component = __webpack_require__(35);\n\tvar EventEmitter = __webpack_require__(7);\n\t\n\t//持载模板相关对象\n\tutils.copy(Template, Component);\n\t\n\tComponent.version = info.version;\n\tComponent.Template = Template;\n\tComponent.Watcher = Watcher;\n\tComponent.Observer = Observer;\n\tComponent.EventEmitter = EventEmitter;\n\tComponent.utils = utils;\n\tComponent.Class = Class;\n\t\n\t//定义安装插件的方法\n\tComponent.use = function (plugin) {\n\t  var install = plugin.install || plugin;\n\t  if (!utils.isFunction(install)) {\n\t    throw new Error('Invalid Plugin');\n\t  }\n\t  return install.call(plugin, this);\n\t};\n\t\n\t//安装内置的路由插件\n\t//Component.use(Router);\n\t\n\tmodule.exports = Component;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"name\": \"mokit\",\n\t\t\"version\": \"3.0.5\"\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/\"use strict\";\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\t(function (ntils) {\n\t\n\t  /**\n\t   * 空函数\n\t   */\n\t  ntils.noop = function () {};\n\t\n\t  /**\n\t   * 验证一个对象是否为NULL\n\t   * @method isNull\n\t   * @param  {Object}  obj 要验证的对象\n\t   * @return {Boolean}     结果\n\t   * @static\n\t   */\n\t  ntils.isNull = function (obj) {\n\t    return obj === null || typeof obj === \"undefined\";\n\t  };\n\t\n\t  /**\n\t   * 除去字符串两端的空格\n\t   * @method trim\n\t   * @param  {String} str 源字符串\n\t   * @return {String}     结果字符串\n\t   * @static\n\t   */\n\t  ntils.trim = function (str) {\n\t    if (this.isNull(str)) return str;\n\t    if (str.trim) {\n\t      return str.trim();\n\t    } else {\n\t      return str.replace(/(^[\\\\s]*)|([\\\\s]*$)/g, \"\");\n\t    }\n\t  };\n\t\n\t  /**\n\t   * 替换所有\n\t   * @method replace\n\t   * @param {String} str 源字符串\n\t   * @param {String} str1 要替换的字符串\n\t   * @param {String} str2 替换为的字符串\n\t   * @static\n\t   */\n\t  ntils.replace = function (str, str1, str2) {\n\t    if (this.isNull(str)) return str;\n\t    return str.replace(new RegExp(str1, 'g'), str2);\n\t  };\n\t\n\t  /**\n\t   * 从字符串开头匹配\n\t   * @method startWith\n\t   * @param {String} str1 源字符串\n\t   * @param {String} str2 要匹配的字符串\n\t   * @return {Boolean} 匹配结果\n\t   * @static\n\t   */\n\t  ntils.startWith = function (str1, str2) {\n\t    if (this.isNull(str1) || this.isNull(str2)) return false;\n\t    return str1.indexOf(str2) === 0;\n\t  };\n\t\n\t  /**\n\t   * 是否包含\n\t   * @method contains\n\t   * @param {String} str1 源字符串\n\t   * @param {String} str2 检查包括字符串\n\t   * @return {Boolean} 结果\n\t   * @static\n\t   */\n\t  ntils.contains = function (str1, str2) {\n\t    var self = this;\n\t    if (this.isNull(str1) || this.isNull(str2)) return false;\n\t    return str1.indexOf(str2) > -1;\n\t  };\n\t\n\t  /**\n\t   * 从字符串结束匹配\n\t   * @method endWidth\n\t   * @param {String} str1 源字符串\n\t   * @param {String} str2 匹配字符串\n\t   * @return {Boolean} 匹配结果\n\t   * @static\n\t   */\n\t  ntils.endWith = function (str1, str2) {\n\t    if (this.isNull(str1) || this.isNull(str2)) return false;\n\t    return str1.indexOf(str2) === str1.length - str2.length;\n\t  };\n\t\n\t  /**\n\t   * 是否包含属性\n\t   * @method hasProperty\n\t   * @param  {Object}  obj  对象\n\t   * @param  {String}  name 属性名\n\t   * @return {Boolean}      结果\n\t   * @static\n\t   */\n\t  ntils.has = ntils.hasProperty = function (obj, name) {\n\t    if (this.isNull(obj) || this.isNull(name)) return false;\n\t    return name in obj || obj.hasOwnProperty(name);\n\t  };\n\t\n\t  /**\n\t   * 验证一个对象是否为Function\n\t   * @method isFunction\n\t   * @param  {Object}  obj 要验证的对象\n\t   * @return {Boolean}     结果\n\t   * @static\n\t   */\n\t  ntils.isFunction = function (obj) {\n\t    if (this.isNull(obj)) return false;\n\t    return typeof obj === \"function\";\n\t  };\n\t\n\t  /**\n\t   * 验证一个对象是否为String\n\t   * @method isString\n\t   * @param  {Object}  obj 要验证的对象\n\t   * @return {Boolean}     结果\n\t   * @static\n\t   */\n\t  ntils.isString = function (obj) {\n\t    if (this.isNull(obj)) return false;\n\t    return typeof obj === 'string' || obj instanceof String;\n\t  };\n\t\n\t  /**\n\t   * 验证一个对象是否为Number\n\t   * @method isNumber\n\t   * @param  {Object}  obj 要验证的对象\n\t   * @return {Boolean}     结果\n\t   * @static\n\t   */\n\t  ntils.isNumber = function (obj) {\n\t    if (this.isNull(obj)) return false;\n\t    return typeof obj === 'number' || obj instanceof Number;\n\t  };\n\t\n\t  /**\n\t   * 验证一个对象是否为Boolean\n\t   * @method isBoolean\n\t   * @param  {Object}  obj 要验证的对象\n\t   * @return {Boolean}     结果\n\t   * @static\n\t   */\n\t  ntils.isBoolean = function (obj) {\n\t    if (this.isNull(obj)) return false;\n\t    return typeof obj === 'boolean' || obj instanceof Boolean;\n\t  };\n\t\n\t  /**\n\t   * 验证一个对象是否为HTML Element\n\t   * @method isElement\n\t   * @param  {Object}  obj 要验证的对象\n\t   * @return {Boolean}     结果\n\t   * @static\n\t   */\n\t  ntils.isElement = function (obj) {\n\t    if (this.isNull(obj)) return false;\n\t    if (window.Element) {\n\t      return obj instanceof Element;\n\t    } else {\n\t      return obj.tagName && obj.nodeType && obj.nodeName && obj.attributes && obj.ownerDocument;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * 验证一个对象是否为HTML Text Element\n\t   * @method isText\n\t   * @param  {Object}  obj 要验证的对象\n\t   * @return {Boolean}     结果\n\t   * @static\n\t   */\n\t  ntils.isText = function (obj) {\n\t    if (this.isNull(obj)) return false;\n\t    return obj instanceof Text;\n\t  };\n\t\n\t  /**\n\t   * 验证一个对象是否为Object\n\t   * @method isObject\n\t   * @param  {Object}  obj 要验证的对象\n\t   * @return {Boolean}     结果\n\t   * @static\n\t   */\n\t  ntils.isObject = function (obj) {\n\t    if (this.isNull(obj)) return false;\n\t    return (/*istanbul ignore next*/(typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === \"object\"\n\t    );\n\t  };\n\t\n\t  /**\n\t   * 验证一个对象是否为Array或伪Array\n\t   * @method isArray\n\t   * @param  {Object}  obj 要验证的对象\n\t   * @return {Boolean}     结果\n\t   * @static\n\t   */\n\t  ntils.isArray = function (obj) {\n\t    if (this.isNull(obj)) return false;\n\t    var v1 = Object.prototype.toString.call(obj) === '[object Array]';\n\t    var v2 = obj instanceof Array;\n\t    var v3 = !this.isString(obj) && this.isNumber(obj.length) && this.isFunction(obj.splice);\n\t    var v4 = !this.isString(obj) && this.isNumber(obj.length) && obj[0];\n\t    return v1 || v2 || v3 || v4;\n\t  };\n\t\n\t  /**\n\t   * 验证是不是一个日期对象\n\t   * @method isDate\n\t   * @param {Object} val   要检查的对象\n\t   * @return {Boolean}           结果\n\t   * @static\n\t   */\n\t  ntils.isDate = function (val) {\n\t    if (this.isNull(val)) return false;\n\t    return val instanceof Date;\n\t  };\n\t\n\t  /**\n\t   * 验证是不是一个正则对象\n\t   * @method isDate\n\t   * @param {Object} val   要检查的对象\n\t   * @return {Boolean}           结果\n\t   * @static\n\t   */\n\t  ntils.isRegexp = function (val) {\n\t    return val instanceof RegExp;\n\t  };\n\t\n\t  /**\n\t   * 转换为数组\n\t   * @method toArray\n\t   * @param {Array|Object} array 伪数组\n\t   * @return {Array} 转换结果数组\n\t   * @static\n\t   */\n\t  ntils.toArray = function (array) {\n\t    if (this.isNull(array)) return [];\n\t    return Array.prototype.slice.call(array);\n\t  };\n\t\n\t  /**\n\t   * 转为日期格式\n\t   * @method toDate\n\t   * @param {Number|String} val 日期字符串或整型数值\n\t   * @return {Date} 日期对象\n\t   * @static\n\t   */\n\t  ntils.toDate = function (val) {\n\t    var self = this;\n\t    if (self.isNumber(val)) return new Date(val);else if (self.isString(val)) return new Date(self.replace(self.replace(val, '-', '/'), 'T', ' '));else if (self.isDate(val)) return val;else return null;\n\t  };\n\t\n\t  /**\n\t   * 遍历一个对像或数组\n\t   * @method each\n\t   * @param  {Object or Array}   obj  要遍历的数组或对象\n\t   * @param  {Function} fn            处理函数\n\t   * @return {void}                   无返回值\n\t   * @static\n\t   */\n\t  ntils.each = function (list, handler, scope) {\n\t    if (this.isNull(list) || this.isNull(handler)) return;\n\t    if (this.isArray(list)) {\n\t      var listLength = list.length;\n\t      for (var i = 0; i < listLength; i++) {\n\t        var rs = handler.call(scope || list[i], i, list[i]);\n\t        if (!this.isNull(rs)) return rs;\n\t      }\n\t    } else {\n\t      for (var key in list) {\n\t        var rs = handler.call(scope || list[key], key, list[key]);\n\t        if (!this.isNull(rs)) return rs;\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * 格式化日期\n\t   * @method formatDate\n\t   * @param {Date|String|Number} date 日期\n\t   * @param {String} format 格式化字符串\n\t   * @param {object} dict 反译字典\n\t   * @return {String} 格式化结果\n\t   * @static\n\t   */\n\t  ntils.formatDate = function (date, format, dict) {\n\t    if (this.isNull(format) || this.isNull(date)) return date;\n\t    date = this.toDate(date);\n\t    dict = dict || {};\n\t    var placeholder = {\n\t      \"M+\": date.getMonth() + 1, //month\n\t      \"d+\": date.getDate(), //day\n\t      \"h+\": date.getHours(), //hour\n\t      \"m+\": date.getMinutes(), //minute\n\t      \"s+\": date.getSeconds(), //second\n\t      \"w+\": date.getDay(), //week\n\t      \"q+\": Math.floor((date.getMonth() + 3) / 3), //quarter\n\t      \"S\": date.getMilliseconds() //millisecond\n\t    };\n\t    if (/(y+)/.test(format)) {\n\t      format = format.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n\t    }\n\t    for (var key in placeholder) {\n\t      if (new RegExp(\"(\" + key + \")\").test(format)) {\n\t        var value = placeholder[key];\n\t        value = dict[value] || value;\n\t        format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? value : (\"00\" + value).substr((\"\" + value).length));\n\t      }\n\t    }\n\t    return format;\n\t  };\n\t\n\t  /**\n\t   * 拷贝对象\n\t   * @method copy\n\t   * @param {Object} src 源对象\n\t   * @param {Object} dst 目标对象\n\t   * @static\n\t   */\n\t  ntils.copy = function (src, dst, igonres) {\n\t    dst = dst || (this.isArray(src) ? [] : {});\n\t    this.each(src, function (key) {\n\t      if (igonres && igonres.indexOf(key) > -1) return;\n\t      delete dst[key];\n\t      if (Object.getOwnPropertyDescriptor) {\n\t        try {\n\t          Object.defineProperty(dst, key, Object.getOwnPropertyDescriptor(src, key));\n\t        } catch (ex) {\n\t          dst[key] = src[key];\n\t        }\n\t      } else {\n\t        dst[key] = src[key];\n\t      }\n\t    });\n\t    return dst;\n\t  };\n\t\n\t  /**\n\t   * 深度克隆对象\n\t   * @method clone\n\t   * @param {Object} src 源对象\n\t   * @return {Object} 新对象\n\t   * @static\n\t   */\n\t  ntils.clone = function (src, igonres) {\n\t    if (this.isNull(src) || this.isString(src) || this.isNumber(src) || this.isBoolean(src) || this.isDate(src)) {\n\t      return src;\n\t    }\n\t    var objClone = src;\n\t    try {\n\t      objClone = new src.constructor();\n\t    } catch (ex) {}\n\t    this.each(src, function (key, value) {\n\t      if (objClone[key] != value && !this.contains(igonres, key)) {\n\t        if (this.isObject(value)) {\n\t          objClone[key] = this.clone(value, igonres);\n\t        } else {\n\t          objClone[key] = value;\n\t        }\n\t      }\n\t    }, this);\n\t    ['toString', 'valueOf'].forEach(function (key) {\n\t      if (this.contains(igonres, key)) return;\n\t      this.defineFreezeProp(objClone, key, src[key]);\n\t    }, this);\n\t    return objClone;\n\t  };\n\t\n\t  /**\n\t   * 合并对象\n\t   * @method mix\n\t   * @return 合并后的对象\n\t   * @param {Object} dst 目标对象\n\t   * @param {Object} src 源对象\n\t   * @param {Array} igonres 忽略的属性名,\n\t   * @param {Number} mode 模式\n\t   */\n\t  ntils.mix = function (dst, src, igonres, mode) {\n\t    //根据模式来判断，默认是Obj to Obj的  \n\t    if (mode) {\n\t      switch (mode) {\n\t        case 1:\n\t          // proto to proto  \n\t          return ntils.mix(dst.prototype, src.prototype, igonres, 0);\n\t        case 2:\n\t          // object to object and proto to proto  \n\t          ntils.mix(dst.prototype, src.prototype, igonres, 0);\n\t          break; // pass through  \n\t        case 3:\n\t          // proto to static  \n\t          return ntils.mix(dst, src.prototype, igonres, 0);\n\t        case 4:\n\t          // static to proto  \n\t          return ntils.mix(dst.prototype, src, igonres, 0);\n\t        default: // object to object is what happens below  \n\t      }\n\t    }\n\t    //---\n\t    src = src || {};\n\t    dst = dst || (this.isArray(src) ? [] : {});\n\t    this.keys(src).forEach(function (key) {\n\t      if (this.contains(igonres, key)) return;\n\t      if (this.isObject(src[key]) && (src[key].constructor == Object || src[key].constructor == Array || src[key].constructor == null)) {\n\t        dst[key] = ntils.mix(dst[key], src[key], igonres, 0);\n\t      } else {\n\t        dst[key] = src[key];\n\t      }\n\t    }, this);\n\t    return dst;\n\t  };\n\t\n\t  /**\n\t   * 定义不可遍历的属性\n\t   **/\n\t  ntils.defineFreezeProp = function (obj, name, value) {\n\t    try {\n\t      Object.defineProperty(obj, name, {\n\t        value: value,\n\t        enumerable: false,\n\t        configurable: true, //能不能重写定义\n\t        writable: false //能不能用「赋值」运算更改\n\t      });\n\t    } catch (err) {\n\t      obj[name] = value;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * 获取所有 key \n\t   */\n\t  ntils.keys = function (obj) {\n\t    if (Object.keys) return Object.keys(obj);\n\t    var keys = [];\n\t    this.each(obj, function (key) {\n\t      keys.push(key);\n\t    });\n\t    return keys;\n\t  };\n\t\n\t  /**\n\t   * 创建一个对象\n\t   */\n\t  ntils.create = function (proto, props) {\n\t    if (Object.create) return Object.create(proto, props);\n\t    var Cotr = function Cotr() {};\n\t    Cotr.prototype = proto;\n\t    var obj = new Cotr();\n\t    if (props) this.copy(props, obj);\n\t    return obj;\n\t  };\n\t\n\t  /**\n\t   * 设置 proto\n\t   * 在不支持 setPrototypeOf 也不支持 __proto__ 的浏览器\n\t   * 中，会采用 copy 方式\n\t   */\n\t  ntils.setPrototypeOf = function (obj, proto) {\n\t    if (Object.setPrototypeOf) {\n\t      return Object.setPrototypeOf(obj, proto || this.create(null));\n\t    } else {\n\t      if (!('__proto__' in Object)) this.copy(proto, obj);\n\t      obj.__proto__ = proto;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * 获取 proto\n\t   */\n\t  ntils.getPrototypeOf = function (obj) {\n\t    if (obj.__proto__) return obj.__proto__;\n\t    if (Object.getPrototypeOf) return Object.getPrototypeOf(obj);\n\t    if (obj.constructor) return obj.constructor.prototype;\n\t  };\n\t\n\t  /**\n\t   * 是否深度相等\n\t   */\n\t  ntils.deepEqual = function (a, b) {\n\t    if (a === b) return true;\n\t    if (!this.isObject(a) || !this.isObject(b)) return false;\n\t    var aKeys = this.keys(a);\n\t    var bKeys = this.keys(b);\n\t    if (aKeys.length !== bKeys.length) return false;\n\t    var allKeys = aKeys.concat(bKeys);\n\t    var checkedMap = this.create(null);\n\t    var result = true;\n\t    this.each(allKeys, function (i, key) {\n\t      if (checkedMap[key]) return;\n\t      if (!this.deepEqual(a[key], b[key])) result = false;\n\t      checkedMap[key] = true;\n\t    }, this);\n\t    return result;\n\t  };\n\t\n\t  /**\n\t   * 从一个数值循环到别一个数\n\t   * @param {number} fromNum 开始数值\n\t   * @param {Number} toNum 结束数值\n\t   * @param {Number} step 步长值\n\t   * @param {function} handler 执行函数\n\t   * @returns {void} 无返回\n\t   */\n\t  ntils.fromTo = function (fromNum, toNum, step, handler) {\n\t    if (!handler) handler = [step, step = handler][0];\n\t    step = Math.abs(step || 1);\n\t    if (fromNum < toNum) {\n\t      for (var i = fromNum; i <= toNum; i += step) /*istanbul ignore next*/{\n\t        handler(i);\n\t      }\n\t    } else {\n\t      for (var i = fromNum; i >= toNum; i -= step) /*istanbul ignore next*/{\n\t        handler(i);\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * 生成一个Guid\n\t   * @method newGuid\n\t   * @return {String} GUID字符串\n\t   * @static\n\t   */\n\t  ntils.newGuid = function () {\n\t    var S4 = function S4() {\n\t      return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n\t    };\n\t    return S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4();\n\t  };\n\t\n\t  /**\n\t   * 对象变换\n\t   **/\n\t  ntils.map = function (list, fn) {\n\t    var buffer = this.isArray(list) ? [] : {};\n\t    this.each(list, function (name, value) {\n\t      buffer[name] = fn(name, value);\n\t    });\n\t    return buffer;\n\t  };\n\t\n\t  /**\n\t   * 通过路径设置属性值\n\t   */\n\t  ntils.setByPath = function (obj, path, value) {\n\t    if (this.isNull(obj) || this.isNull(path) || path === '') {\n\t      return;\n\t    }\n\t    if (!this.isArray(path)) {\n\t      path = path.replace(/\\[/, '.').replace(/\\]/, '.').split('.');\n\t    }\n\t    this.each(path, function (index, name) {\n\t      if (this.isNull(name) || name.length < 1) return;\n\t      if (index === path.length - 1) {\n\t        obj[name] = value;\n\t      } else {\n\t        obj[name] = obj[name] || {};\n\t        obj = obj[name];\n\t      }\n\t    }, this);\n\t  };\n\t\n\t  /**\n\t   * 通过路径获取属性值\n\t   */\n\t  ntils.getByPath = function (obj, path) {\n\t    if (this.isNull(obj) || this.isNull(path) || path === '') {\n\t      return obj;\n\t    }\n\t    if (!this.isArray(path)) {\n\t      path = path.replace(/\\[/, '.').replace(/\\]/, '.').split('.');\n\t    }\n\t    this.each(path, function (index, name) {\n\t      if (this.isNull(name) || name.length < 1) return;\n\t      if (!this.isNull(obj)) obj = obj[name];\n\t    }, this);\n\t    return obj;\n\t  };\n\t\n\t  /**\n\t   * 数组去重\n\t   **/\n\t  ntils.unique = function (array) {\n\t    if (this.isNull(array)) return array;\n\t    var newArray = [];\n\t    this.each(array, function (i, value) {\n\t      if (newArray.indexOf(value) > -1) return;\n\t      newArray.push(value);\n\t    });\n\t    return newArray;\n\t  };\n\t\n\t  /**\n\t   * 解析 function 的参数列表\n\t   **/\n\t  ntils.getFunctionArgumentNames = function (fn) {\n\t    if (!fn) return [];\n\t    var src = fn.toString();\n\t    var parts = src.split(')')[0].split('=>')[0].split('(');\n\t    return (parts[1] || parts[0]).split(',').map(function (name) {\n\t      return name.trim();\n\t    }).filter(function (name) {\n\t      return name != 'function';\n\t    });\n\t  };\n\t\n\t  /**\n\t   * 缩短字符串\n\t   */\n\t  ntils.short = function (str, maxLength) {\n\t    if (!str) return str;\n\t    maxLength = maxLength || 40;\n\t    var strLength = str.length;\n\t    var trimLength = maxLength / 2;\n\t    return strLength > maxLength ? str.substr(0, trimLength) + '...' + str.substr(strLength - trimLength) : str;\n\t  };\n\t\n\t  /**\n\t   * 首字母大写\n\t   */\n\t  ntils.firstUpper = function (str) {\n\t    if (this.isNull(str)) return;\n\t    str[0] = str[0].toLowerCase();\n\t    return str;\n\t  };\n\t\n\t  /**\n\t   * 解析字符串为 dom \n\t   * @param {string} str 字符串\n\t   * @returns {HTMLNode} 解析后的 DOM \n\t   */\n\t  ntils.parseDom = function (str) {\n\t    this._PDD_ = this._PDD_ || document.createElement('div');\n\t    this._PDD_.innerHTML = ntils.trim(str);\n\t    var firstNode = this._PDD_.childNodes[0];\n\t    //先 clone 一份再通过 innerHTML 清空\n\t    //否则 IE9 下，清空时会导出返回的 DOM 没有子结点\n\t    if (firstNode) firstNode = firstNode.cloneNode(true);\n\t    this._PDD_.innerHTML = '';\n\t    return firstNode;\n\t  };\n\t})( false ? window.ntils = {} : exports);\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar utils = __webpack_require__(3);\n\t\n\tfunction ClassFactory(options) {\n\t  //处理 options\n\t  options = options || utils.create(null);\n\t  options.$name = options.$name || 'Class';\n\t  options.$extends = options.$extends || ClassFactory;\n\t  options.$static = options.$static || utils.create(null);\n\t  //处理父类 prototype\n\t  var superPrototype = utils.isFunction(options.$extends) ? options.$extends.prototype : options.$extends;\n\t  //定义新类\n\t  var Class = function Class() {\n\t    //处理 super\n\t    if (!this.$super) {\n\t      utils.defineFreezeProp(this, '$super', function () {\n\t        if (this._super_called_) return this._super_ret_;\n\t        this._super_called_ = true;\n\t        if (utils.isFunction(options.$extends)) {\n\t          var proto = utils.getPrototypeOf(this);\n\t          this._super_ret_ = options.$extends.apply(this, arguments);\n\t          utils.setPrototypeOf(proto, this._super_ret_);\n\t        } else {\n\t          this._super_ret_ = options.$extends;\n\t        }\n\t        return this._super_ret_;\n\t      });\n\t      for (var name in superPrototype) {\n\t        var value = superPrototype[name];\n\t        if (utils.isFunction(value)) {\n\t          this.$super[name] = value.bind(this);\n\t        } else {\n\t          this.$super[name] = value;\n\t        }\n\t      }\n\t    }\n\t    //调用构造\n\t    if (utils.isFunction(options.constructor) && options.constructor !== Object) {\n\t      return options.constructor.apply(this, arguments);\n\t    } else {\n\t      //如果没有实现 constructor 则调用父类构造\n\t      this.$super.apply(this, arguments);\n\t    }\n\t  };\n\t  //处理 prototype\n\t  Class.prototype = utils.create(superPrototype);\n\t  utils.copy(options, Class.prototype);\n\t  utils.defineFreezeProp(Class.prototype, '$class', Class);\n\t  //处理静态成员\n\t  utils.copy(options.$static, Class);\n\t  if (utils.isFunction(options.$extends)) {\n\t    utils.setPrototypeOf(Class, options.$extends);\n\t  }\n\t  if (!options.$extends.$extend) {\n\t    utils.copy(ClassFactory, Class);\n\t  }\n\t  utils.defineFreezeProp(Class, '$super', options.$extends);\n\t  //--\n\t  return Class;\n\t}\n\t\n\t//定义扩展方法\n\tClassFactory.$extend = function (options) {\n\t  options.$extends = this;\n\t  return new ClassFactory(options);\n\t};\n\t\n\tClassFactory.Class = ClassFactory;\n\tmodule.exports = ClassFactory;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Class = __webpack_require__(4);\n\tvar utils = __webpack_require__(3);\n\t\n\t/**\n\t * Watcher 类\n\t * 通过「计算函数」、「执行函数」可以创建一个 Watcher 实例\n\t */\n\tvar Watcher = new Class({\n\t\n\t  /**\n\t   * 通过「计算函数」、「执行函数」构建一个 Watcher 实例\n\t   * @param {function} calcor 计算函数\n\t   * @param {function} handler 处理函数\n\t   * @param {boolean} first 是否自动执行第一次\n\t   * @returns {void} 无返回\n\t   */\n\t  constructor: function /*istanbul ignore next*/constructor(calcor, handler, first) {\n\t    if (!utils.isFunction(calcor) || !utils.isFunction(handler)) {\n\t      throw new Error('Invalid parameters');\n\t    }\n\t    this.calcor = calcor;\n\t    this.handler = handler;\n\t    if (first) this.calc(true);\n\t  },\n\t\n\t  /**\n\t   * 执行计算\n\t   * @param {boolean} force 是否强制触发「计算函数」\n\t   * @returns {Object} 计算后的值\n\t   */\n\t  calc: function /*istanbul ignore next*/calc(force) {\n\t    var newValue = this.calcor();\n\t    if (force || !utils.deepEqual(newValue, this.value)) {\n\t      this.handler(newValue, this.value);\n\t    }\n\t    this.value = utils.clone(newValue);\n\t  }\n\t\n\t});\n\t\n\tmodule.exports = Watcher;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Class = __webpack_require__(4);\n\tvar utils = __webpack_require__(3);\n\tvar EventEmitter = __webpack_require__(7);\n\t\n\tvar OBSERVER_PROP_NAME = '_observer_';\n\tvar CHANGE_EVENT_NAME = 'change';\n\tvar EVENT_MAX_DISPATCH_LAYER = 20;\n\tvar IGNORE_REGEXPS = [/^\\_(.*)\\_$/i, /^\\_\\_/i];\n\t\n\t/**\n\t * 对象观察类，可以监控对象变化\n\t * 目前方案问题:\n\t *   对于父子关系和事件冒泡，目前方案如果用 delete 删除一个属性，无关真实删除关系，\n\t *   即便调用 clearReference 也无法再清除关系，子对象的 parents 中会一直有一个引用，当前方案最高效\n\t * 其它方法一:\n\t *   将「关系」放入全局数组中，然后将 ob.parents 变成一个「属性」从全局数组件中 filter 出来，\n\t *   基本和目前方法类似，但是关系在外部存领教，所以 clearReference 可清除。\n\t * 其它方案二: \n\t *   构造时添加到全局数组，每一个 observer change 时都让放到全局的 observer 遍历自身的，\n\t *   检果事件源是不是自已的子对象，如果是则触发自身 change 事件，这样 ob 对象本身没有相关引用\n\t *   clearReference 时只从全局清除掉就行了，并且 delete 操作也不会影响，但效率稍差。\n\t * 其它方案三: \n\t *   给构造函数添加一个 deep 属性，只有 deep 的 ob 对象，才放入到全局数组中，检查时逻辑同方案二\n\t *   但是因为要检查的对象会少很多，效率会更高一点。\n\t */\n\tvar Observer = new Class({\n\t  $extends: EventEmitter,\n\t\n\t  /**\n\t   * 通过目标对象构造一个观察对象\n\t   * @param {Object} target 目标对象\n\t   * @param {Object} options 选项\n\t   * @returns {void} 无返回\n\t   */\n\t  constructor: function /*istanbul ignore next*/constructor(target, options) {\n\t    if (utils.isNull(target)) {\n\t      throw new Error('Invalid target');\n\t    }\n\t    options = options || {};\n\t    var observer = target[OBSERVER_PROP_NAME];\n\t    if (observer) {\n\t      utils.copy(options, observer.options);\n\t      if (observer.options.root) {\n\t        observer.parents.length = 0;\n\t      }\n\t      observer.apply();\n\t      return observer;\n\t    }\n\t    EventEmitter.call(this);\n\t    utils.defineFreezeProp(this, 'options', options);\n\t    utils.defineFreezeProp(this, 'shadow', {});\n\t    utils.defineFreezeProp(this, 'target', target);\n\t    utils.defineFreezeProp(this, 'parents', []);\n\t    utils.defineFreezeProp(target, OBSERVER_PROP_NAME, this);\n\t    this.apply();\n\t  },\n\t\n\t  /**\n\t   * 添加一个属性，动态添中的属性，无法被观察，\n\t   * 但是通过 set 方法添加的属性可能被观察。\n\t   * @param {string} name 名称\n\t   * @param {Object} value 值\n\t   * @returns {void} 无返回\n\t   */\n\t  set: function /*istanbul ignore next*/set(name, value) {\n\t    if (utils.isFunction(value) || Observer.isIgnore(name)) {\n\t      return;\n\t    }\n\t    Object.defineProperty(this.target, name, {\n\t      get: function /*istanbul ignore next*/get() {\n\t        return this[OBSERVER_PROP_NAME].shadow[name];\n\t      },\n\t      set: function /*istanbul ignore next*/set(value) {\n\t        var observer = this[OBSERVER_PROP_NAME];\n\t        var oldValue = observer.shadow[name];\n\t        if (oldValue === value) return;\n\t        if (utils.isObject(value)) {\n\t          var childObserver = new Observer(value);\n\t          observer.addChild(childObserver, name);\n\t        }\n\t        //移除旧值的父引用\n\t        //如果用 delete 删除属性将无法移除父子引用\n\t        if (oldValue && oldValue[OBSERVER_PROP_NAME]) {\n\t          observer.removeChild(oldValue[OBSERVER_PROP_NAME], name);\n\t        }\n\t        observer.shadow[name] = value;\n\t        observer.emitChange({ path: name, value: value });\n\t      },\n\t      configurable: true,\n\t      enumerable: true\n\t    });\n\t    this.target[name] = value;\n\t  },\n\t\n\t  /**\n\t   * 自动应用所有动态添加的属性\n\t   * @returns {void} 无返回\n\t   */\n\t  apply: function /*istanbul ignore next*/apply() {\n\t    if (utils.isArray(this.target)) {\n\t      this._wrapArray(this.target);\n\t    }\n\t    var names = this._getPropertyNames(this.target);\n\t    names.forEach(function (name) {\n\t      var desc = Object.getOwnPropertyDescriptor(this.target, name);\n\t      if (!('value' in desc)) return;\n\t      this.set(name, this.target[name]);\n\t    }, this);\n\t  },\n\t\n\t  /**\n\t   * 清除所有父子引用\n\t   * @returns {void} 无返回\n\t   */\n\t  clearReference: function /*istanbul ignore next*/clearReference() {\n\t    utils.each(this.target, function (name, value) {\n\t      if (utils.isNull(value)) return;\n\t      var child = value[OBSERVER_PROP_NAME];\n\t      if (child) this.removeChild(child);\n\t    }, this);\n\t  },\n\t\n\t  /**\n\t   * 派发一个事件，事件会向父级对象冒泡\n\t   * @param {string} eventName 事件名称\n\t   * @param {Object} event 事件对象\n\t   * @returns {void} 无返回\n\t   */\n\t  dispatch: function /*istanbul ignore next*/dispatch(eventName, event) {\n\t    if (event._src_ === this) return;\n\t    event._src_ = event._src_ || this;\n\t    event._layer_ = event._layer_ || 0;\n\t    event._layer_++;\n\t    if (event._layer_ >= EVENT_MAX_DISPATCH_LAYER) return;\n\t    this.emit(eventName, event);\n\t    if (!this.parents || this.parents.length < 1) return;\n\t    this.parents.forEach(function (item) {\n\t      if (!(item.name in item.parent.target)) {\n\t        return item.parent.removeChild(this);\n\t      }\n\t      var parentEvent = utils.copy(event);\n\t      parentEvent.path = item.name + '.' + event.path;\n\t      item.parent.dispatch(eventName, parentEvent);\n\t    }, this);\n\t  },\n\t\n\t  /**\n\t   * 添子观察者对象\n\t   * @param {Object} child 父对象\n\t   * @param {String} name 属性名\n\t   * @returns {void} 无返回\n\t   */\n\t  addChild: function /*istanbul ignore next*/addChild(child, name) {\n\t    if (utils.isNull(child) || utils.isNull(name)) {\n\t      throw new Error('Invalid paramaters');\n\t    }\n\t    if (child.options.root) return;\n\t    child.parents.push({ parent: this, name: name });\n\t  },\n\t\n\t  /**\n\t   * 移除子对象\n\t   * @param {Object} child 父对象\n\t   * @param {String} name 属性名\n\t   * @returns {void} 无返回\n\t   */\n\t  removeChild: function /*istanbul ignore next*/removeChild(child, name) {\n\t    if (utils.isNull(child)) {\n\t      throw new Error('Invalid paramaters');\n\t    }\n\t    var foundIndex = -1;\n\t    child.parents.forEach(function (item, index) {\n\t      if (item.parent === this && item.name === name) {\n\t        foundIndex = index;\n\t      }\n\t    }, this);\n\t    if (foundIndex > -1) {\n\t      child.parents.splice(foundIndex, 1);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * 触发 change 事件\n\t   * @param {Object} event 事件对象\n\t   * @returns {void} 无返回\n\t   */\n\t  emitChange: function /*istanbul ignore next*/emitChange(event) {\n\t    this.dispatch(CHANGE_EVENT_NAME, event);\n\t  },\n\t\n\t  /**\n\t   * 获取所有成员名称列表\n\t   * @returns {Array} 所有成员名称列表\n\t   */\n\t  _getPropertyNames: function /*istanbul ignore next*/_getPropertyNames() {\n\t    var names = utils.isArray(this.target) ? this.target.map(function (item, index) {\n\t      return index;\n\t    }) : Object.keys(this.target);\n\t    return names.filter(function (name) {\n\t      return name !== OBSERVER_PROP_NAME;\n\t    });\n\t  },\n\t\n\t  /**\n\t   * 包裹数组\n\t   * @param {array} array 源数组\n\t   * @returns {array} 处理后的数组\n\t   */\n\t  _wrapArray: function /*istanbul ignore next*/_wrapArray(array) {\n\t    utils.defineFreezeProp(array, 'push', function () {\n\t      var items = [].slice.call(arguments);\n\t      items.forEach(function (item) {\n\t        //这里也会触发对应 index 的 change 事件\n\t        this[OBSERVER_PROP_NAME].set(array.length, item);\n\t      }, this);\n\t      this[OBSERVER_PROP_NAME].emitChange({ path: 'length', value: this.length });\n\t    });\n\t    utils.defineFreezeProp(array, 'pop', function () {\n\t      var item = [].pop.apply(this, arguments);\n\t      this[OBSERVER_PROP_NAME].emitChange({ path: this.length, value: item });\n\t      this[OBSERVER_PROP_NAME].emitChange({ path: 'length', value: this.length });\n\t      return item;\n\t    });\n\t    utils.defineFreezeProp(array, 'unshift', function () {\n\t      var items = [].slice.call(arguments);\n\t      items.forEach(function (item) {\n\t        //这里也会触发对应 index 的 change 事件\n\t        this[OBSERVER_PROP_NAME].set(0, item);\n\t      }, this);\n\t      this[OBSERVER_PROP_NAME].emitChange({ path: 'length', value: this.length });\n\t    });\n\t    utils.defineFreezeProp(array, 'shift', function () {\n\t      var item = [].shift.apply(this, arguments);\n\t      this[OBSERVER_PROP_NAME].emitChange({ path: 0, value: item });\n\t      this[OBSERVER_PROP_NAME].emitChange({ path: 'length', value: this.length });\n\t      return item;\n\t    });\n\t    utils.defineFreezeProp(array, 'splice', function () {\n\t      var startIndex = arguments[0];\n\t      var endIndex = utils.isNull(arguments[1]) ? startIndex + arguments[1] : this.length - 1;\n\t      var items = [].splice.apply(this, arguments);\n\t      for (var i = startIndex; i <= endIndex; i++) {\n\t        this[OBSERVER_PROP_NAME].emitChange({ path: i, value: items[i - startIndex] });\n\t      }\n\t      this[OBSERVER_PROP_NAME].emitChange({ path: 'length', value: this.length });\n\t      return items;\n\t    });\n\t    utils.defineFreezeProp(array, 'set', function (index, value) {\n\t      if (index >= this.length) {\n\t        this[OBSERVER_PROP_NAME].emitChange({ path: 'length', value: this.length });\n\t      }\n\t      this[OBSERVER_PROP_NAME].set(index, value);\n\t    });\n\t  }\n\t\n\t});\n\t\n\t/**\n\t * 观察一个对象\n\t * @param {Object} target 目标对象\n\t * @return {Observer} 观察者对象\n\t */\n\tObserver.observe = function (target) {\n\t  return new Observer(target);\n\t};\n\t\n\t/**\n\t * 检查是不是忽略的属性名\n\t * @param {string} word 待检查的字符串\n\t * @returns {void} 无返回\n\t */\n\tObserver.isIgnore = function (word) {\n\t  return IGNORE_REGEXPS.some(function (re) /*istanbul ignore next*/{\n\t    return re.test(word);\n\t  });\n\t};\n\t\n\tmodule.exports = Observer;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar utils = __webpack_require__(3);\n\tvar Class = __webpack_require__(4);\n\t\n\t/**\n\t * 事件触发器基类\n\t */\n\tvar EventEmitter = new Class({\n\t  $extends: Function,\n\t\n\t  /**\n\t   * 构建一个一个事修的触发器对象\n\t   * @param {object} target 将代理的目标对象可以省略\n\t   * @returns {void} 无返回\n\t   */\n\t  constructor: function /*istanbul ignore next*/constructor(target) {\n\t    target = target || this;\n\t    var emitter = target._emitter_;\n\t    if (emitter) return emitter;\n\t    utils.defineFreezeProp(this, '_target_', target);\n\t    utils.defineFreezeProp(target, '_emitter_', this);\n\t    this._isElement_ = utils.isElement(this._target_);\n\t    this._listeners_ = this._listeners_ || {};\n\t    this.on = this.$on = this.$addListener = this.addListener;\n\t    this.off = this.$off = this.$removeListener = this.removeListener;\n\t    this.$emit = this.emit;\n\t  },\n\t\n\t  /**\n\t   * 添加一个事件监听函数\n\t   * @param {string} name 事件名称\n\t   * @param {function} listener 事件处理函数\n\t   * @param {capture} capture 是否是捕获阶段事件(只在代理 dom 对象时有效)\n\t   * @returns {void} 无返回\n\t   */\n\t  addListener: function /*istanbul ignore next*/addListener(name, listener, capture) {\n\t    if (this._isElement_) {\n\t      this._addElementEventListener(name, listener, capture);\n\t    }\n\t    this._listeners_[name] = this._listeners_[name] || [];\n\t    this._listeners_[name].push(listener);\n\t    if (this._listeners_[name].length > EventEmitter._maxListeners) {\n\t      throw new Error('The `' + name + '` event listener is not more than 10');\n\t    }\n\t  },\n\t\n\t  /**\n\t   * 移除「一个/一组/所有」事件监听函数\n\t   * @param {string} name 事件名称\n\t   * @param {function} listener 事件处理函数\n\t   * @param {capture} capture 是否是捕获阶段事件(只在代理 dom 对象时有效)\n\t   * @returns {void} 无返回\n\t   */\n\t  removeListener: function /*istanbul ignore next*/removeListener(name, listener, capture) {\n\t    if (name && listener) {\n\t      if (this._isElement_) {\n\t        this._removeElementEventListener(name, listener, capture);\n\t      }\n\t      if (!this._listeners_[name]) return;\n\t      var index = this._listeners_[name].indexOf(listener);\n\t      this._listeners_[name].splice(index, 1);\n\t    } else if (name) {\n\t      if (this._isElement_ && this._listeners_[name]) {\n\t        this._listeners_[name].forEach(function (_listener) {\n\t          this.removeListener(name, _listener, capture);\n\t        }, this);\n\t      }\n\t      delete this._listeners_[name];\n\t    } else {\n\t      utils.each(this._listeners_, function (name) {\n\t        this.removeListener(name, null, capture);\n\t      }, this);\n\t      this._listeners_ = {};\n\t    }\n\t  },\n\t\n\t  /**\n\t   * 触发自身的一个事件\n\t   * @param {string} name 事件名称\n\t   * @param {object} data 传递的对象\n\t   * @param {string} canBubble 能否冒泡(只在代理 dom 对象时有效)\n\t   * @param {object} cancelAble 能否取消(只在代理 dom 对象时有效)\n\t   * @returns {void} 无返回\n\t   */\n\t  emit: function /*istanbul ignore next*/emit(name, data, canBubble, cancelAble) {\n\t    if (this._isElement_) {\n\t      return this._emitElementEvent(name, data, canBubble, cancelAble);\n\t    }\n\t    if (!this._listeners_[name]) return;\n\t    var stopPropagation = false;\n\t    this._listeners_[name].forEach(function (handler) {\n\t      var rs = handler.call(this._target_, data);\n\t      if (rs === false) stopPropagation = true;\n\t    }, this);\n\t    return stopPropagation;\n\t  },\n\t\n\t  /**\n\t   * 添加 DOM 元素事件\n\t   * @param {string} name 事件名称\n\t   * @param {function} listener 事件处理函数\n\t   * @param {capture} capture 是否是捕获阶段事件\n\t   * @returns {void} 无返回\n\t   */\n\t  _addElementEventListener: function /*istanbul ignore next*/_addElementEventListener(name, listener, capture) {\n\t    this._target_.addEventListener(name, listener, capture);\n\t    //如果存在已注册的自定义 “组合事件”\n\t    var descriptor = EventEmitter._events[name];\n\t    if (descriptor) {\n\t      descriptor.addListener = descriptor.addListener || descriptor.on;\n\t      descriptor.addListener(this, name, listener, capture);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * 移除 DOM 元素事件\n\t   * @param {string} name 事件名称\n\t   * @param {function} listener 事件处理函数\n\t   * @param {capture} capture 是否是捕获阶段事件\n\t   * @returns {void} 无返回\n\t   */\n\t  _removeElementEventListener: function /*istanbul ignore next*/_removeElementEventListener(name, listener, capture) {\n\t    this._target_.removeEventListener(name, listener, capture);\n\t    //如果存在已注册的自定义 “组合事件”\n\t    var descriptor = EventEmitter._events[name];\n\t    if (descriptor) {\n\t      descriptor.removeListener = descriptor.removeListener || descriptor.off;\n\t      descriptor.removeListener(this, name, listener, capture);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * 触发 DOM 元素事件\n\t   * @param {string} name 事件名称\n\t   * @param {object} data 传递的对象\n\t   * @param {string} canBubble 能否冒泡\n\t   * @param {object} cancelAble 能否取消\n\t   * @returns {void} 无返回\n\t   */\n\t  _emitElementEvent: function /*istanbul ignore next*/_emitElementEvent(name, data, canBubble, cancelAble) {\n\t    var event = document.createEvent('HTMLEvents');\n\t    event.initEvent(name, canBubble, cancelAble);\n\t    utils.copy(data, event, ['data']);\n\t    event.data = data;\n\t    return this._target_.dispatchEvent(event);\n\t  }\n\t\n\t});\n\t\n\t//最多添加多少个 listener\n\tEventEmitter._maxListeners = 10;\n\t\n\t//所有自定义事件\n\tEventEmitter._events = [];\n\t\n\t/**\n\t * 注册自定义事件(只在代理 dom 对象时有效)\n\t * @param {object} descriptor 事件定义\n\t * @returns {void} 无返回\n\t */\n\tEventEmitter.register = function (descriptor) {\n\t  var names = descriptor.name;\n\t  if (!names) return;\n\t  if (!utils.isArray(names)) names = names.split(',');\n\t  names.forEach(function (name) {\n\t    this._events[name] = descriptor;\n\t  }, this);\n\t};\n\t\n\tmodule.exports = EventEmitter;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Compiler = __webpack_require__(9);\n\tvar Directive = __webpack_require__(10);\n\tvar Expression = __webpack_require__(11);\n\tvar Template = __webpack_require__(34);\n\tvar directives = __webpack_require__(12);\n\t\n\tTemplate.Template = Template;\n\tTemplate.Compiler = Compiler;\n\tTemplate.Directive = Directive;\n\tTemplate.directives = directives;\n\tTemplate.Expression = Expression;\n\t\n\tmodule.exports = Template;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Class = __webpack_require__(4);\n\tvar Directive = __webpack_require__(10);\n\tvar utils = __webpack_require__(3);\n\tvar Expression = __webpack_require__(11);\n\tvar commonDirectives = __webpack_require__(12);\n\t\n\tvar DEFAULT_PREFIX = 'm';\n\t\n\t/**\n\t * 模板编译器\n\t * 可以通过指定「前缀」或「指令集」构建实例\n\t */\n\tvar Compiler = new Class({\n\t\n\t  /**\n\t   * 构造一个编译器\n\t   * @param {Object} options 选项\n\t   * @returns {void} 无返回\n\t   */\n\t  constructor: function /*istanbul ignore next*/constructor(options) {\n\t    options = options || {};\n\t    this.prefix = options.prefix || DEFAULT_PREFIX;\n\t    this.elementDirectives = {};\n\t    this.attributeDirectives = {};\n\t    this.registerDirectives(commonDirectives);\n\t    this.registerDirectives(options.directives);\n\t  },\n\t\n\t  /**\n\t   * 添加指令\n\t   * @param {Object} directives 指令集 \n\t   * @returns {void} 无返回\n\t   */\n\t  registerDirectives: function /*istanbul ignore next*/registerDirectives(directives) {\n\t    utils.each(directives, function (name, directive) {\n\t      name = name.replace(/([A-Z])/g, '-$1');\n\t      if (name[0] == '-') name = name.slice(1);\n\t      var fullName = directive.options.prefix === false ? name : /*istanbul ignore next*/this.prefix + ':' + name;\n\t      if (directive.options.type == Directive.TE) {\n\t        this.elementDirectives[fullName.toUpperCase()] = directive;\n\t      } else {\n\t        this.attributeDirectives[fullName] = directive;\n\t      }\n\t    }, this);\n\t  },\n\t\n\t  /**\n\t   * 解析要 attr 指令信息\n\t   * @param {string} attrName 要解析的名称字符串\n\t   * @returns {Object} 解析后的对象\n\t   */\n\t  _parseAttrInfo: function /*istanbul ignore next*/_parseAttrInfo(attrName) {\n\t    var parts = attrName.toLowerCase().split(':');\n\t    var info = {};\n\t    if (parts.length > 1) {\n\t      info.name = /*istanbul ignore next*/parts[0] + ':' + parts[1];\n\t      info.decorates = parts.slice(2);\n\t    } else {\n\t      info.name = parts[0];\n\t      info.decorates = [];\n\t    }\n\t    return info;\n\t  },\n\t\n\t  /**\n\t   * 创建一个指令实例\n\t   * @param {Directive} Directive 指令类\n\t   * @param {Object} options 指令构建选项\n\t   * @returns {Directive} 指令实例\n\t   */\n\t  _createDirectiveInstance: function /*istanbul ignore next*/_createDirectiveInstance(Directive, options) {\n\t    options.compiler = this;\n\t    options.prefix = this.prefix;\n\t    return new Directive(options);\n\t  },\n\t\n\t  /**\n\t   * 初始化一个编译完成的 handler\n\t   * @param {function} handler 编译后的的模板函数\n\t   * @returns {void} 无返回\n\t   */\n\t  _bindHandler: function /*istanbul ignore next*/_bindHandler(handler) {\n\t    //排序 directives\n\t    handler.directives = handler.directives.sort(function (a, b) {\n\t      return b.level - a.level;\n\t    });\n\t    //初始化 directives\n\t    var boundDirectives = [];\n\t    utils.each(handler.directives, function (index, directive) {\n\t      directive.index = index;\n\t      directive.bind();\n\t      boundDirectives.push(directive);\n\t      //移除完成绑定的指令对应的 attribute\n\t      if (directive.remove !== false && directive.attribute) {\n\t        directive.node.removeAttribute(directive.attribute.name);\n\t      }\n\t      //如果遇到一个「终态」指令，停止向下初始化\n\t      if (directive.final) {\n\t        return handler.final = true;\n\t      }\n\t    }, this);\n\t    handler.directives = boundDirectives;\n\t  },\n\t\n\t  /**\n\t   * 编译一个元素本身\n\t   * @param {function} handler 当前模板函数\n\t   * @param {HTMLNode} node 当前 HTML 结点\n\t   * @returns {void} 无返回\n\t   */\n\t  _compileElement: function /*istanbul ignore next*/_compileElement(handler, node) {\n\t    var ElementDirective = this.elementDirectives[node.nodeName.toUpperCase()];\n\t    if (!ElementDirective) return;\n\t    handler.directives.push(this._createDirectiveInstance(ElementDirective, {\n\t      handler: handler,\n\t      node: node\n\t    }));\n\t  },\n\t\n\t  /**\n\t   * 编译一个元素所有 attributes \n\t   * @param {function} handler 当前模板函数\n\t   * @param {HTMLNode} node 当前 HTML 结点\n\t   * @returns {void} 无返回\n\t   */\n\t  _compileAttributes: function /*istanbul ignore next*/_compileAttributes(handler, node) {\n\t    utils.toArray(node.attributes).forEach(function (attribute) {\n\t      var attrInfo = this._parseAttrInfo(attribute.name);\n\t      var AttrDirective = this.attributeDirectives[attrInfo.name] || this.attributeDirectives['*'];\n\t      if (!AttrDirective) return;\n\t      var directiveOptions = AttrDirective.options;\n\t      handler.directives.push(this._createDirectiveInstance(AttrDirective, {\n\t        handler: handler,\n\t        node: node,\n\t        attribute: attribute,\n\t        expression: directiveOptions.literal ? attribute.value : new Expression(attribute.value, directiveOptions.mixed),\n\t        decorates: attrInfo.decorates\n\t      }));\n\t    }, this);\n\t  },\n\t\n\t  /**\n\t   * 编译所有子结点\n\t   * @param {function} handler 当前模板函数\n\t   * @param {HTMLNode} node 当前 HTML 结点\n\t   * @returns {void} 无返回\n\t   */\n\t  _compileChildren: function /*istanbul ignore next*/_compileChildren(handler, node) {\n\t    if (handler.final) return;\n\t    utils.toArray(node.childNodes).forEach(function (childNode) {\n\t      if (childNode._compiled_) return;\n\t      var childHandler = this.compile(childNode);\n\t      childHandler.parent = this;\n\t      handler.children.push(childHandler);\n\t    }, this);\n\t  },\n\t\n\t  /**\n\t   * 编译一个模板\n\t   * @param {HTMLNode} node 模板根元素\n\t   * @param {Object} options 选项\n\t   * @returns {function} 模板函数\n\t   */\n\t  compile: function /*istanbul ignore next*/compile(node, options) {\n\t    if (!node) {\n\t      throw new Error('Invalid node for compile');\n\t    }\n\t    node._compiled_ = true;\n\t    options = options || {};\n\t    //定义编译结果函数\n\t    var handler = function handler(scope) {\n\t      if (utils.isNull(scope)) scope = {};\n\t      handler.directives.forEach(function (directive) {\n\t        directive.scope = scope;\n\t        directive.execute(scope);\n\t      }, this);\n\t      handler.children.forEach(function (childHandler) {\n\t        childHandler(scope);\n\t      }, this);\n\t    };\n\t    //--\n\t    handler.dispose = function () {\n\t      handler.directives.forEach(function (directive) {\n\t        directive.unbind();\n\t      }, this);\n\t      handler.children.forEach(function (childHandler) {\n\t        childHandler.dispose();\n\t      }, this);\n\t    };\n\t    handler.node = node;\n\t    //定义 children & directives \n\t    handler.directives = [];\n\t    handler.children = [];\n\t    //编译相关指令\n\t    if (options.element !== false) this._compileElement(handler, node);\n\t    if (options.attribute !== false) this._compileAttributes(handler, node);\n\t    this._bindHandler(handler);\n\t    if (options.children !== false) this._compileChildren(handler, node);\n\t    //返回编译后函数\n\t    return handler;\n\t  }\n\t\n\t});\n\t\n\tmodule.exports = Compiler;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Class = __webpack_require__(4);\n\tvar utils = __webpack_require__(3);\n\tvar Expression = __webpack_require__(11);\n\t\n\t/**\n\t * 指令定义工场函数\n\t * @param {Object} classOptions 选项\n\t * @returns {Directive} 指令类\n\t */\n\tfunction Directive(classOptions) {\n\t  //处理指令选项\n\t  classOptions = classOptions || {};\n\t  classOptions.type = classOptions.type || Directive.TA;\n\t  classOptions.level = classOptions.level || Directive.LG;\n\t\n\t  //生成指令类\n\t  var DirectiveClass = new Class({\n\t\n\t    $extends: classOptions,\n\t    //指令构建函数\n\t    constructor: function /*istanbul ignore next*/constructor(instanceOptions) {\n\t      utils.copy(instanceOptions, this);\n\t    },\n\t    //挂载实例上的 options\n\t    options: classOptions,\n\t    //挂载实例核心方法\n\t    bind: classOptions.bind || utils.noop,\n\t    execute: classOptions.execute || function (scope) {\n\t      this.scope = scope;\n\t      if (this.options.type === Directive.TE) {\n\t        return this.update();\n\t      }\n\t      var newValue = this.options.literal ? this.attribute.value : this.expression.execute(scope);\n\t      if (!utils.deepEqual(this._value_, newValue)) {\n\t        this.update(newValue, this._value_);\n\t        this._value_ = newValue;\n\t      }\n\t    },\n\t    update: classOptions.update || utils.noop,\n\t    unbind: classOptions.unbind || utils.noop,\n\t    //挂载指令常用的类型\n\t    utils: utils,\n\t    Expression: Expression\n\t  });\n\t  //向指令类添加「指令定义信息」\n\t  DirectiveClass.options = classOptions;\n\t  utils.setPrototypeOf(DirectiveClass, classOptions);\n\t  return DirectiveClass;\n\t}\n\t\n\t//指令类型\n\tDirective.TA = 'A';\n\tDirective.TE = 'E';\n\t\n\t//指令级别\n\tDirective.LP = 3000; //prevent\n\tDirective.LS = 2000; //statement\n\tDirective.LE = 1000; //eleemtn\n\tDirective.LG = 0; //general\n\tDirective.LA = -1000; //any attribute\n\tDirective.LC = -2000; //cloak\n\t\n\tmodule.exports = Directive;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Class = __webpack_require__(4);\n\tvar utils = __webpack_require__(3);\n\t\n\t/**\n\t * 表达式类型，将字符串构析为可执行表达式实例\n\t */\n\tvar Expression = new Class({\n\t\n\t  /**\n\t   * 通过字符串构造一个表达式实例\n\t   * @param {string} code 代码字符串\n\t   * @param {boolean} mix 是否是混合代码\n\t   * @returns {void} 无返回\n\t   */\n\t  constructor: function /*istanbul ignore next*/constructor(code, mix) {\n\t    this.func = mix ? this._compileMixedCode(code) : this._compileCode(code);\n\t  },\n\t\n\t  /**\n\t   * 编译普通表达式代码\n\t   * @param {string} code 代码字符串\n\t   * @returns {function} 编辑后的函数\n\t   */\n\t  _compileCode: function /*istanbul ignore next*/_compileCode(code) {\n\t    code = this._escapeEOL(this._wrapCode(code));\n\t    return this._createFunction(code);\n\t  },\n\t\n\t  /**\n\t   * 编辑混合的表达式代码\n\t   * @param {string} code 代码字符串\n\t   * @returns {function} 编辑后的函数\n\t   */\n\t  _compileMixedCode: function /*istanbul ignore next*/_compileMixedCode(code) {\n\t    var statements = this._parseMixedCode(code);\n\t    code = this._escapeEOL(statements.join('+'));\n\t    return this._createFunction(code);\n\t  },\n\t\n\t  /**\n\t   * 通过符串代码创建一个可执行函数\n\t   * @param {string} code 代码字符串\n\t   * @returns {function} 创建的函数\n\t   */\n\t  _createFunction: function /*istanbul ignore next*/_createFunction(code) {\n\t    var func = new Function('utils', 'scope', 'with(scope){return ' + code + '}');\n\t    return func.bind(null, utils);\n\t  },\n\t\n\t  /**\n\t   * 解析混合代码字符串\n\t   * @param {string} code 混合代码字符串\n\t   * @returns {Array} 解析后的「token」列表\n\t   */\n\t  _parseMixedCode: function /*istanbul ignore next*/_parseMixedCode(code) {\n\t    var index = 0,\n\t        length = code.length;\n\t    var token = '',\n\t        isExpr = false,\n\t        tokens = [];\n\t    while (index <= length) {\n\t      var char = code[index++];\n\t      var nextChar = code[index];\n\t      if (utils.isNull(char)) {\n\t        if (token.length > 0) {\n\t          tokens.push('\"' + this._escapeCode(token) + '\"');\n\t        }\n\t        token = '';\n\t        isExpr = false;\n\t      } else if (!isExpr && char + nextChar == '{{') {\n\t        if (token.length > 0) {\n\t          tokens.push('\"' + this._escapeCode(token) + '\"');\n\t        }\n\t        token = '';\n\t        isExpr = true;\n\t        index++;\n\t      } else if (isExpr && char + nextChar == '}}') {\n\t        if (token.length > 0) {\n\t          tokens.push(this._wrapCode(token));\n\t        }\n\t        token = '';\n\t        isExpr = false;\n\t        index++;\n\t      } else {\n\t        token += char;\n\t      }\n\t    }\n\t    return tokens;\n\t  },\n\t\n\t  /**\n\t   * 转义处理代码字符串\n\t   * @param {string} code 源字符串\n\t   * @returns {string} 处理后的字符串\n\t   */\n\t  _escapeCode: function /*istanbul ignore next*/_escapeCode(code) {\n\t    return code.replace(/\"/, '\\\\\"').replace('\\r\\n', '\\\\r\\\\n').replace('\\n', '\\\\n');\n\t  },\n\t\n\t  /**\n\t   * 转义换行符\n\t   * @param {string} code 源字符串\n\t   * @returns {string} 处理后的字符串\n\t   */\n\t  _escapeEOL: function /*istanbul ignore next*/_escapeEOL(code) {\n\t    return code.replace(/\\n/gm, '\\\\\\n');\n\t  },\n\t\n\t  /**\n\t   * 通过闭包和 try/cache 包裹代码\n\t   * 将模板中错误的代码直接显示在「模板中用到的位置」，更易于定位错误。\n\t   * @param {string} code 源字符串\n\t   * @returns {string} 处理后的字符串\n\t   */\n\t  _wrapCode: function /*istanbul ignore next*/_wrapCode(code) {\n\t    return '((function(){try{return (' + code + ')}catch(err){console.error(err);return err;}})())';\n\t  },\n\t\n\t  /**\n\t   * 通过 scope 对象执行表达式\n\t   * @param {Object} scope 上下文对象\n\t   * @returns {Object} 执行结果\n\t   */\n\t  execute: function /*istanbul ignore next*/execute(scope) {\n\t    if (utils.isNull(scope)) {\n\t      scope = {};\n\t    }\n\t    return this.func.call(scope, scope);\n\t  }\n\t\n\t});\n\t\n\tmodule.exports = Expression;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tmodule.exports = {\n\t  '#text': __webpack_require__(13),\n\t  'each': __webpack_require__(14),\n\t  'if': __webpack_require__(16),\n\t  'prop': __webpack_require__(17),\n\t  'attr': __webpack_require__(18),\n\t  'on': __webpack_require__(19),\n\t  'html': __webpack_require__(20),\n\t  'text': __webpack_require__(21),\n\t  'prevent': __webpack_require__(22),\n\t  'id': __webpack_require__(23),\n\t  'cloak': __webpack_require__(24),\n\t  'show': __webpack_require__(25),\n\t  'model': __webpack_require__(26),\n\t  '*': __webpack_require__(33) //处理所有未知 attr\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\tvar Expression = __webpack_require__(11);\n\t\n\tmodule.exports = new Directive({\n\t  type: Directive.TE,\n\t  prefix: false,\n\t\n\t  /**\n\t   * 初始化指令\n\t   * @returns {void} 无返回\n\t   */\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    this.expr = new Expression(this.node.nodeValue, true);\n\t    this.node.nodeValue = '';\n\t  },\n\t\n\t  execute: function /*istanbul ignore next*/execute(scope) {\n\t    this.scope = scope;\n\t    var newValue = this.expr.execute(scope);\n\t    if (this.node.nodeValue !== newValue) {\n\t      this.node.nodeValue = newValue;\n\t    }\n\t  }\n\t\n\t});\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\tvar utils = __webpack_require__(3);\n\tvar Scope = __webpack_require__(15);\n\t\n\tmodule.exports = new Directive({\n\t  level: Directive.LS + 1, //比 if 要高一个权重\n\t  final: true,\n\t  literal: true,\n\t\n\t  /**\n\t   * 初始化指令\n\t   * @returns {void} 无返回\n\t   */\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    this.mountNode = document.createTextNode('');\n\t    this.node.parentNode.insertBefore(this.mountNode, this.node);\n\t    //虽然，bind 完成后，也会进行 attribute 的移除，\n\t    //但 each 指令必须先移除，否再进行 item 编译时 each 还会生效\n\t    this.node.removeAttribute(this.attribute.name);\n\t    this.node.parentNode.removeChild(this.node);\n\t    this.parseExpr();\n\t    this.eachItems = {};\n\t  },\n\t\n\t  parseExpr: function /*istanbul ignore next*/parseExpr() {\n\t    this.eachType = this.attribute.value.indexOf(' in ') > -1 ? 'in' : 'of';\n\t    var tokens = this.attribute.value.split(' ' + this.eachType + ' ');\n\t    var fnText = /*istanbul ignore next*/'with(scope){utils.each(' + tokens[1] + ',fn.bind(this,' + tokens[1] + '))}';\n\t    this.each = new Function('utils', 'scope', 'fn', fnText).bind(null, this.utils);\n\t    var names = tokens[0].split(',').map(function (name) {\n\t      return name.trim();\n\t    });\n\t    if (this.eachType == 'in') {\n\t      this.keyName = names[0];\n\t      this.valueName = names[1];\n\t    } else {\n\t      this.keyName = names[1];\n\t      this.valueName = names[0];\n\t    }\n\t  },\n\t\n\t  execute: function /*istanbul ignore next*/execute(scope) {\n\t    /*istanbul ignore next*/var _this = this;\n\t\n\t    var currentEachKeys = [];\n\t    var itemsFragment = document.createDocumentFragment();\n\t    var self = this;\n\t    this.each(scope, function (eachTarget, key) {\n\t      //创建新 scope，必须选创建再设置 prototype 或采用定义「属性」的方式\n\t      //因为指令参数指定的名称有可能和 scope 原有变量冲突\n\t      //将导致针对 watch 变量的赋值，从引用发循环\n\t      var newScope = new Scope(this.scope);\n\t      if (self.keyName) {\n\t        Object.defineProperty(newScope, self.keyName, {\n\t          /*istanbul ignore next*/get: function get() {\n\t            return key;\n\t          }\n\t        });\n\t      }\n\t      //value 采用「属性」进行代理，否则将会使「双向」绑定无把回设值\n\t      if (self.valueName) {\n\t        Object.defineProperty(newScope, self.valueName, {\n\t          /*istanbul ignore next*/get: function get() {\n\t            return eachTarget[key];\n\t          },\n\t          /*istanbul ignore next*/set: function set(value) {\n\t            eachTarget[key] = value;\n\t          }\n\t        });\n\t      }\n\t      var oldItem = this.eachItems[key];\n\t      if (oldItem) {\n\t        oldItem.handler(newScope);\n\t      } else {\n\t        var newItem = {};\n\t        //创建新元素\n\t        newItem.node = this.node.cloneNode(true);\n\t        itemsFragment.appendChild(newItem.node);\n\t        newItem.handler = this.compiler.compile(newItem.node);\n\t        newItem.handler(newScope);\n\t        this.eachItems[key] = newItem;\n\t      }\n\t      currentEachKeys.push(key);\n\t    }.bind(this));\n\t    utils.each(this.eachItems, function (key, item) {\n\t      if (currentEachKeys.some(function (k) /*istanbul ignore next*/{\n\t        return k == key;\n\t      })) return;\n\t      if (item.node.parentNode) {\n\t        item.node.parentNode.removeChild(item.node);\n\t      }\n\t      delete /*istanbul ignore next*/_this.eachItems[key];\n\t    }, this);\n\t    if (itemsFragment.childNodes.length > 0) {\n\t      this.mountNode.parentNode.insertBefore(itemsFragment, this.mountNode);\n\t    }\n\t  }\n\t\n\t});\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar utils = __webpack_require__(3);\n\t\n\tvar Scope = function Scope(parent, props) {\n\t  //新的 scope 因为「继承」了 _observer_ \n\t  //所以在新 scope 上进行双向绑定时，将将值成功回写\n\t  //如果有天不须用 utils.cteate 继承法，需要注意 _observer_ \n\t  //或在新 scope 上 defineProperty 代理 parentScope\n\t  var scope = utils.create(parent);\n\t  utils.copy(props, scope);\n\t  return scope;\n\t};\n\t\n\tmodule.exports = Scope;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\t\n\tmodule.exports = new Directive({\n\t  level: Directive.LS,\n\t  final: true,\n\t\n\t  /**\n\t   * 初始化指令\n\t   * @returns {void} 无返回\n\t   */\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    this.mountNode = document.createTextNode('');\n\t    this.node.parentNode.insertBefore(this.mountNode, this.node);\n\t    //虽然，bind 完成后，也会进行 attribute 的移除，\n\t    //但 if 指令必须先移除，否再进行 item 编译时 if 还会生效\n\t    this.node.removeAttribute(this.attribute.name);\n\t    this.node.parentNode.removeChild(this.node);\n\t  },\n\t\n\t  execute: function /*istanbul ignore next*/execute(scope) {\n\t    var newValue = this.expression.execute(scope);\n\t    if (newValue) {\n\t      //如果新计算的结果为 true 才执行 \n\t      this._handler = this._handler || this.compiler.compile(this.node);\n\t      this._handler(scope);\n\t      var node = this.node.$substitute || this.node;\n\t      if (!node.parentNode) {\n\t        this.mountNode.parentNode.insertBefore(node, this.mountNode);\n\t      }\n\t    } else {\n\t      var _node = this.node.$substitute || this.node;\n\t      if (_node.parentNode) _node.parentNode.removeChild(_node);\n\t    }\n\t  }\n\t\n\t});\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\t\n\tmodule.exports = new Directive({\n\t  update: function /*istanbul ignore next*/update(value) {\n\t    var target = this.node.$target || this.node;\n\t    target[this.decorates[0]] = value;\n\t  }\n\t});\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\t\n\tmodule.exports = new Directive({\n\t  update: function /*istanbul ignore next*/update(value) {\n\t    var target = this.node.$target || this.node;\n\t    if (target.setAttribute) {\n\t      target.setAttribute(this.decorates[0], value);\n\t    } else {\n\t      target[this.decorates[0]] = value;\n\t    }\n\t  }\n\t});\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\tvar EventEmitter = __webpack_require__(7);\n\tvar Scope = __webpack_require__(15);\n\t\n\tmodule.exports = new Directive({\n\t  literal: true,\n\t\n\t  /**\n\t   * 初始化指令\n\t   * @returns {void} 无返回\n\t   */\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    var attrValue = this.attribute.value || '';\n\t    if (attrValue.indexOf('(') < 0 && attrValue.indexOf(')') < 0) {\n\t      attrValue += '($event)';\n\t    }\n\t    this.expr = new this.Expression(attrValue);\n\t    var eventTarget = this.node.$target || this.node;\n\t    this.emiter = new EventEmitter(eventTarget);\n\t    this.emiter.addListener(this.decorates[0], function (event) {\n\t      if (this.utils.isNull(this.scope)) return;\n\t      this.expr.execute(new Scope(this.scope, {\n\t        $event: event\n\t      }));\n\t    }.bind(this), false);\n\t  },\n\t\n\t  unbind: function /*istanbul ignore next*/unbind() {\n\t    this.emiter.removeListener();\n\t  },\n\t\n\t  execute: function /*istanbul ignore next*/execute(scope) {\n\t    this.scope = scope;\n\t  }\n\t\n\t});\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\t\n\tmodule.exports = new Directive({\n\t  update: function /*istanbul ignore next*/update(newValue) {\n\t    this.node.innerHTML = newValue;\n\t  }\n\t});\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\t\n\tmodule.exports = new Directive({\n\t  update: function /*istanbul ignore next*/update(newValue) {\n\t    this.node.innerText = newValue;\n\t  }\n\t});\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\t\n\tmodule.exports = new Directive({\n\t  level: Directive.LP,\n\t  final: true\n\t});\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\t\n\tmodule.exports = new Directive({\n\t  literal: true,\n\t\n\t  update: function /*istanbul ignore next*/update(id) {\n\t    if (id in this.scope) {\n\t      throw new Error('Conflicting component id `' + id + '`');\n\t    }\n\t    this.scope[id] = this.node.$target || this.node;\n\t  }\n\t\n\t});\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\t\n\tmodule.exports = new Directive({\n\t  level: Directive.LC,\n\t  literal: true,\n\t  prefix: false,\n\t\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    this.node.removeAttribute(this.attribute.name);\n\t  }\n\t\n\t});\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\t\n\tmodule.exports = new Directive({\n\t  update: function /*istanbul ignore next*/update(value) {\n\t    this.node.style.display = value ? '' : 'none';\n\t  }\n\t});\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar SelectDirective = __webpack_require__(27);\n\tvar EditableDirective = __webpack_require__(28);\n\tvar InputDirective = __webpack_require__(29);\n\tvar RadioDirective = __webpack_require__(30);\n\tvar CheckboxDirective = __webpack_require__(31);\n\tvar PropDirective = __webpack_require__(32);\n\t\n\tvar Directive = function Directive(options) {\n\t  var node = options.node;\n\t  var tagName = node.tagName;\n\t  if (options.decorates[0]) {\n\t    return new PropDirective(options);\n\t  } else if (tagName == 'INPUT') {\n\t    var type = node.getAttribute('type');\n\t    if (type == 'radio') {\n\t      return new RadioDirective(options);\n\t    } else if (type == 'checkbox') {\n\t      return new CheckboxDirective(options);\n\t    } else {\n\t      return new InputDirective(options);\n\t    }\n\t  } else if (tagName == 'TEXTAREA') {\n\t    return new InputDirective(options);\n\t  } else if (tagName == 'SELECT') {\n\t    return new SelectDirective(options);\n\t  } else if (node.isContentEditable) {\n\t    return new EditableDirective(options);\n\t  } else {\n\t    throw new Error( /*istanbul ignore next*/'Directive `model` cannot be used on `' + tagName + '`');\n\t  }\n\t};\n\t\n\t//手动添加 classOptions\n\tDirective.options = {\n\t  level: Directive.LA\n\t};\n\t\n\tmodule.exports = Directive;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\tvar EventEmitter = __webpack_require__(7);\n\tvar Scope = __webpack_require__(15);\n\t\n\tmodule.exports = new Directive({\n\t  final: true,\n\t\n\t  /**\n\t   * 初始化指令\n\t   * @returns {void} 无返回\n\t   */\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    this.backExpr = new this.Expression( /*istanbul ignore next*/this.attribute.value + '=_value_');\n\t    this.node.removeAttribute(this.attribute.name);\n\t    this._handler = this.compiler.compile(this.node);\n\t    this.emiter = new EventEmitter(this.node);\n\t    this.emiter.addListener('change', function () {\n\t      if (this.utils.isNull(this.scope)) return;\n\t      var selectedOptions = this.node.selectedOptions;\n\t      var value = this.node.multiple ? [].slice.call(selectedOptions).map(function (option) {\n\t        return option.value;\n\t      }, this) : selectedOptions[0].value;\n\t      this.backExpr.execute(new Scope(this.scope, {\n\t        _value_: value\n\t      }));\n\t    }.bind(this), false);\n\t  },\n\t\n\t  unbind: function /*istanbul ignore next*/unbind() {\n\t    this.emiter.removeListener();\n\t  },\n\t\n\t  execute: function /*istanbul ignore next*/execute(scope) {\n\t    this.scope = scope;\n\t    this._handler(scope);\n\t    var value = this.expression.execute(scope);\n\t    if (!this.utils.isArray(value)) value = [value];\n\t    [].slice.call(this.node.options).forEach(function (option) {\n\t      option.selected = value.indexOf(option.value) > -1;\n\t    }, this);\n\t  }\n\t\n\t});\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\tvar EventEmitter = __webpack_require__(7);\n\tvar Scope = __webpack_require__(15);\n\t\n\tmodule.exports = new Directive({\n\t\n\t  /**\n\t   * 初始化指令\n\t   * @returns {void} 无返回\n\t   */\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    this.backExpr = new this.Expression( /*istanbul ignore next*/this.attribute.value + '=_value_');\n\t    this.emiter = new EventEmitter(this.node);\n\t    this.emiter.addListener('input', function () {\n\t      if (this.utils.isNull(this.scope)) return;\n\t      this.backExpr.execute(new Scope(this.scope, {\n\t        _value_: this.node.innerHTML\n\t      }));\n\t    }.bind(this), false);\n\t  },\n\t\n\t  unbind: function /*istanbul ignore next*/unbind() {\n\t    this.emiter.removeListener();\n\t  },\n\t\n\t  execute: function /*istanbul ignore next*/execute(scope) {\n\t    var value = this.expression.execute(scope);\n\t    if (this.node.innerHTML !== value) {\n\t      this.node.innerHTML = value;\n\t    }\n\t  }\n\t\n\t});\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\tvar EventEmitter = __webpack_require__(7);\n\tvar Scope = __webpack_require__(15);\n\t\n\tmodule.exports = new Directive({\n\t\n\t  /**\n\t   * 初始化指令\n\t   * @returns {void} 无返回\n\t   */\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    this.backExpr = new this.Expression( /*istanbul ignore next*/this.attribute.value + '=_value_');\n\t    this.emiter = new EventEmitter(this.node);\n\t    this.emiter.addListener('input', function () {\n\t      if (this.utils.isNull(this.scope)) return;\n\t      this.backExpr.execute(new Scope(this.scope, {\n\t        _value_: this.node.value\n\t      }));\n\t    }.bind(this), false);\n\t  },\n\t\n\t  unbind: function /*istanbul ignore next*/unbind() {\n\t    this.emiter.removeListener();\n\t  },\n\t\n\t  execute: function /*istanbul ignore next*/execute(scope) {\n\t    var value = this.expression.execute(scope);\n\t    if (this.node.value !== value) {\n\t      this.node.value = value;\n\t    }\n\t  }\n\t\n\t});\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\tvar EventEmitter = __webpack_require__(7);\n\tvar Scope = __webpack_require__(15);\n\t\n\tmodule.exports = new Directive({\n\t  /**\n\t   * 初始化指令\n\t   * @returns {void} 无返回\n\t   */\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    this.backExpr = new this.Expression( /*istanbul ignore next*/this.attribute.value + '=_value_');\n\t    this.emiter = new EventEmitter(this.node);\n\t    this.emiter.addListener('change', function () {\n\t      if (this.utils.isNull(this.scope)) return;\n\t      this.backExpr.execute(new Scope(this.scope, {\n\t        _value_: this.node.value\n\t      }));\n\t    }.bind(this), false);\n\t  },\n\t\n\t  unbind: function /*istanbul ignore next*/unbind() {\n\t    this.emiter.removeListener();\n\t  },\n\t\n\t  execute: function /*istanbul ignore next*/execute(scope) {\n\t    this.scope = scope;\n\t    var value = this.expression.execute(scope);\n\t    this.node.checked = value == this.node.value;\n\t  }\n\t\n\t});\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\tvar EventEmitter = __webpack_require__(7);\n\tvar Scope = __webpack_require__(15);\n\t\n\tmodule.exports = new Directive({\n\t\n\t  /**\n\t   * 初始化指令\n\t   * @returns {void} 无返回\n\t   */\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    this.backExpr = new this.Expression( /*istanbul ignore next*/this.attribute.value + '=_value_');\n\t    this.emiter = new EventEmitter(this.node);\n\t    this.emiter.addListener('change', function () {\n\t      if (this.utils.isNull(this.scope)) return;\n\t      var value = this.expression.execute(this.scope);\n\t      if (this.utils.isArray(value) && this.node.checked) {\n\t        value.push(this.node.value);\n\t      } else if (this.utils.isArray(value) && !this.node.checked) {\n\t        var index = value.indexOf(this.node.value);\n\t        value.splice(index, 1);\n\t      } else {\n\t        this.backExpr.execute(new Scope(this.scope, {\n\t          _value_: this.node.checked\n\t        }));\n\t      }\n\t    }.bind(this), false);\n\t  },\n\t\n\t  unbind: function /*istanbul ignore next*/unbind() {\n\t    this.emiter.removeListener();\n\t  },\n\t\n\t  execute: function /*istanbul ignore next*/execute(scope) {\n\t    this.scope = scope;\n\t    var value = this.expression.execute(scope);\n\t    if (this.utils.isArray(value)) {\n\t      this.node.checked = value.indexOf(this.node.value) > -1;\n\t    } else {\n\t      this.node.checked = value;\n\t    }\n\t  }\n\t\n\t});\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\tvar Scope = __webpack_require__(15);\n\t\n\tmodule.exports = new Directive({\n\t\n\t  /**\n\t   * 初始化指令\n\t   * @returns {void} 无返回\n\t   */\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    /*istanbul ignore next*/var _this = this;\n\t\n\t    this.target = this.node.$target;\n\t    this.backExpr = new this.Expression( /*istanbul ignore next*/this.attribute.value + '=_value_');\n\t    this.bindProp = this.decorates[0];\n\t    if (!this.target) {\n\t      throw new Error( /*istanbul ignore next*/'Directive `model:' + this.bindProp + '` cannot be used on `' + this.node.tagName + '`');\n\t    }\n\t    this.watcher = this.target.$watch(this.bindProp, function (value) {\n\t      if ( /*istanbul ignore next*/_this.utils.isNull( /*istanbul ignore next*/_this.scope)) return;\n\t      /*istanbul ignore next*/_this.backExpr.execute(new Scope( /*istanbul ignore next*/_this.scope, {\n\t        _value_: value\n\t      }));\n\t    });\n\t  },\n\t\n\t  unbind: function /*istanbul ignore next*/unbind() {\n\t    this.target.$unWatch(this.watcher);\n\t  },\n\t\n\t  update: function /*istanbul ignore next*/update(value) {\n\t    this.target[this.bindProp] = value;\n\t  }\n\t\n\t});\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Directive = __webpack_require__(10);\n\t\n\t/**\n\t * 通用的 attribute 指令\n\t * 用于所有 attribute 的处理\n\t * 例如:\n\t *  <div attr1=\"{{expr1}}\" {{expr2}} {{attr3}}=\"{{expr3}}\">\n\t *  </div>\n\t */\n\tmodule.exports = new Directive({\n\t  level: Directive.LA,\n\t  prefix: false,\n\t  literal: true,\n\t  remove: false,\n\t\n\t  /**\n\t   * 初始化指令\n\t   * @returns {void} 无返回\n\t   */\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    this.computedName = this.attribute.name;\n\t    this.computedValue = this.attribute.value;\n\t    this.nameExpr = new this.Expression(this.attribute.name, true);\n\t    this.valueExpr = new this.Expression(this.attribute.value, true);\n\t  },\n\t\n\t  execute: function /*istanbul ignore next*/execute(scope) {\n\t    var target = this.node.$target || this.node;\n\t    var newComputedName = this.nameExpr.execute(scope);\n\t    if (this.computedName !== newComputedName) {\n\t      //移除旧名称\n\t      if (target.removeAttribute) {\n\t        target.removeAttribute(this.computedName);\n\t      }\n\t      //设置新名称\n\t      this.computedName = newComputedName;\n\t      if (!this.utils.isNull(this.computedName) && this.computedName.length > 0) {\n\t        if (target.setAttribute) {\n\t          target.setAttribute(this.computedName, this.computedValue || '');\n\t        }\n\t      }\n\t    }\n\t    var newComputeValue = this.valueExpr.execute(scope);\n\t    if (this.computedValue !== newComputeValue) {\n\t      this.computedValue = newComputeValue;\n\t      if (target.setAttribute) {\n\t        target.setAttribute(this.computedName, this.computedValue || '');\n\t      } else {\n\t        target[this.computedName] = this.computedValue;\n\t      }\n\t    }\n\t  }\n\t\n\t});\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Class = __webpack_require__(4);\n\tvar Observer = __webpack_require__(6);\n\tvar EventEmitter = __webpack_require__(7);\n\tvar Compiler = __webpack_require__(9);\n\t\n\t/**\n\t * 模板类\n\t * 可能通过 element 作为参数，创建一个模板实例\n\t */\n\tvar Template = new Class({\n\t\n\t  $extends: EventEmitter,\n\t\n\t  /**\n\t   * 构建一个模板板实例\n\t   * @param {HTMLNode} element HTML 元素\n\t   * @param {Object} options 选项\n\t   * @returns {void} 无返回\n\t   */\n\t  constructor: function /*istanbul ignore next*/constructor(element, options) {\n\t    options = options || {};\n\t    EventEmitter.call(this);\n\t    this.options = options;\n\t    this.element = element;\n\t    this.compiler = options.compiler || new Compiler(options);\n\t    this.render = this.compiler.compile(this.element);\n\t    this.update = this.update.bind(this);\n\t    this._update = this._update.bind(this);\n\t    this._updateTimer = 0;\n\t  },\n\t\n\t  /**\n\t   * 更新当前模板 (会过滤不必要的更新)\n\t   * @returns {void} 无返回\n\t   */\n\t  update: function /*istanbul ignore next*/update() {\n\t    if (this._updateTimer) {\n\t      clearTimeout(this._updateTimer);\n\t      this._updateTimer = null;\n\t    }\n\t    this._updateTimer = setTimeout(this._update, 0);\n\t  },\n\t\n\t  /**\n\t   * 更新当前模板内部方法 \n\t   * @returns {void} 无返回\n\t   */\n\t  _update: function /*istanbul ignore next*/_update() {\n\t    if (!this._updateTimer || !this.observer) return;\n\t    this.emit('update', this);\n\t    this.render(this.observer.target);\n\t    this._onBind();\n\t  },\n\t\n\t  /**\n\t   * 在绑定成功时\n\t   * @returns {void} 无返回\n\t   */\n\t  _onBind: function /*istanbul ignore next*/_onBind() {\n\t    if (this._bound) return;\n\t    this._bound = true;\n\t    this.emit('bind', this);\n\t  },\n\t\n\t  /**\n\t   * 将模板绑定到一个 scope\n\t   * @param {Object} scope 绑定的上下文对象\n\t   * @param {boolean} disableFirst 是否禁用第一次的自动渲染\n\t   * @returns {void} 无返回\n\t   */\n\t  bind: function /*istanbul ignore next*/bind(scope, disableFirst) {\n\t    if (!scope) return;\n\t    this.unbind();\n\t    this.observer = new Observer(scope, {\n\t      root: this.options.root\n\t    });\n\t    scope.$self = scope;\n\t    this.observer.on('change', this.update);\n\t    if (disableFirst) {\n\t      this._onBind();\n\t    } else {\n\t      this.update();\n\t    }\n\t  },\n\t\n\t  /**\n\t   * 解绑定\n\t   * @returns {void} 无返回\n\t   */\n\t  unbind: function /*istanbul ignore next*/unbind() {\n\t    if (!this.observer) return;\n\t    this.observer.removeListener('change', this.update);\n\t    this.observer.clearReference();\n\t    this.observer = null;\n\t  },\n\t\n\t  /**\n\t   * 释放\n\t   * @returns {void} 无返回\n\t   */\n\t  dispose: function /*istanbul ignore next*/dispose() {\n\t    this.unbind();\n\t    this.render.dispose();\n\t  }\n\t\n\t});\n\t\n\tmodule.exports = Template;\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Component = __webpack_require__(36);\n\tvar components = __webpack_require__(38);\n\tvar directives = __webpack_require__(8).directives;\n\t\n\tComponent.components = components;\n\tComponent.Component = Component;\n\t\n\tComponent.component = function (name, component) {\n\t  if (!component) return components[name];\n\t  components[name] = component;\n\t};\n\t\n\tComponent.directive = function (name, directive) {\n\t  if (!directive) return directives[name];\n\t  directives[name] = directive;\n\t};\n\t\n\tmodule.exports = Component;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Class = __webpack_require__(4);\n\tvar Template = __webpack_require__(8);\n\tvar Watcher = __webpack_require__(5);\n\tvar utils = __webpack_require__(3);\n\tvar EventEmitter = __webpack_require__(7);\n\tvar Observer = __webpack_require__(6);\n\tvar ComponentDirective = __webpack_require__(37);\n\t\n\t/**\n\t * 组件类\n\t * 用于定义一个新的组件\n\t * @param {Object} classOpts 类选项\n\t * @returns {Component} 组件类\n\t */\n\tfunction Component(classOpts) {\n\t\n\t  //处理组件选项\n\t  classOpts = classOpts || {};\n\t\n\t  //处理「继承」，目前的机制，只能用「合并类选项」\n\t  var mixes = classOpts.mixes;\n\t  delete classOpts.mixes;\n\t  if (mixes && !utils.isArray(mixes)) {\n\t    mixes = [mixes];\n\t  } else {\n\t    mixes = [];\n\t  }\n\t  var extendComponent = classOpts.extend || Component;\n\t  delete classOpts.extend;\n\t  //extend 会覆盖 mixes 中的同名成员\n\t  mixes.push(extendComponent);\n\t  //classOpts 会覆盖 extend 或 mixes 中的同名成员\n\t  mixes.push(classOpts);\n\t  var mixedClassOpts = {};\n\t  mixes.forEach(function (mixItem) {\n\t    if (mixItem instanceof Component || mixItem == Component) {\n\t      mixItem = mixItem.$options || {};\n\t    }\n\t    utils.mix(mixedClassOpts, mixItem);\n\t  });\n\t  classOpts = mixedClassOpts;\n\t  /**\n\t   * 定义组件类\n\t   * 可以通过 new ComponentClass() 创建组件实例\n\t   */\n\t  var ComponentClass = new Class({\n\t    $extends: extendComponent,\n\t\n\t    /**\n\t     * 组件类构造函数\n\t     * @param {object} instanceOpts 实例选项\n\t     * @returns {void} 无返回\n\t     */\n\t    constructor: function /*istanbul ignore next*/constructor(instanceOpts) {\n\t      if (this == window) return new this.$class(instanceOpts);\n\t      EventEmitter.call(this);\n\t      instanceOpts = instanceOpts || {};\n\t      this._onTemplateUpdate_ = this._onTemplateUpdate_.bind(this);\n\t      this._createdData_(classOpts.data);\n\t      this._createProperties_(classOpts.properties || classOpts.props);\n\t      this._createWatches_(classOpts.watches || classOpts.watch);\n\t      this.$directives = this.$directives || {};\n\t      this._importDirectives_(classOpts.directives);\n\t      this.$components = this.$components || {};\n\t      this._importComponents_(__webpack_require__(38));\n\t      this._importComponents_({ 'self': ComponentClass });\n\t      this._importComponents_(classOpts.components);\n\t      utils.defineFreezeProp(this, '$children', []);\n\t      if (instanceOpts.parent) this.$setParent(instanceOpts.parent);\n\t      this.$callHook('onInit');\n\t      Observer.observe(this);\n\t      if (classOpts.element) {\n\t        this.$mount();\n\t      } else {\n\t        this.$compile();\n\t      }\n\t    },\n\t\n\t    /**\n\t     * 设定父组件\n\t     * @param {Object} parent 父组件\n\t     * @returns {void} 无返回\n\t     */\n\t    $setParent: function /*istanbul ignore next*/$setParent(parent) {\n\t      if (this.$parent === parent) return;\n\t      if (this.$parent) {\n\t        this.$parent.$removeChild(this);\n\t      }\n\t      if (parent) {\n\t        parent.$addChild(this);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * 添加子组件\n\t     * @param {Object} child 子组件\n\t     * @returns {void} 无返回\n\t     */\n\t    $addChild: function /*istanbul ignore next*/$addChild(child) {\n\t      if (!(child instanceof Component)) return;\n\t      this.$children.push(child);\n\t      utils.defineFreezeProp(child, '$parent', this);\n\t      utils.defineFreezeProp(child, '$root', this.$root || this);\n\t    },\n\t\n\t    /**\n\t     * 移除子组件\n\t     * @param {Object} child 子组件\n\t     * @returns {void} 无返回\n\t     */\n\t    $removeChild: function /*istanbul ignore next*/$removeChild(child) {\n\t      var index = this.$children.indexOf(child);\n\t      this.$children.splice(index, 1);\n\t      utils.defineFreezeProp(child, '$parent', null);\n\t      //utils.defineFreezeProp(child, '$root', null);\n\t    },\n\t\n\t    /**\n\t     * 获取根组件, 为了能通过 polyfill 处理 IE8 暂不用这种方式\n\t     */\n\t    get $root() {\n\t      if (this.$parent) {\n\t        return this.$parent.$root;\n\t      } else {\n\t        return this;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * 导入用到的子组件类\n\t     * @param {Object} components 引入的组件\n\t     * @returns {void} 无返回\n\t     */\n\t    _importComponents_: function /*istanbul ignore next*/_importComponents_(components) {\n\t      utils.each(components, function (name, component) {\n\t        this.$components[name] = component;\n\t        this.$directives[name] = new ComponentDirective({\n\t          name: name,\n\t          component: component,\n\t          parent: this\n\t        });\n\t      }, this);\n\t    },\n\t\n\t    /**\n\t     * 导入一个用到的指令\n\t     * @param {Object} directives 引入的指令\n\t     * @returns {void} 无返回\n\t     */\n\t    _importDirectives_: function /*istanbul ignore next*/_importDirectives_(directives) {\n\t      utils.each(directives, function (name, directive) {\n\t        this.$directives[name] = directive;\n\t      }, this);\n\t    },\n\t\n\t    /**\n\t     * 调用生命周期 hook\n\t     * @param {string} name 调用的 hook 名称\n\t     * @param {Array} args 调用 hook 的参数列表\n\t     * @returns {void} 无反回\n\t     */\n\t    $callHook: function /*istanbul ignore next*/$callHook(name, args) {\n\t      if (!utils.isFunction(this[name])) return;\n\t      this[name].apply(this, args || []);\n\t    },\n\t\n\t    /**\n\t     * 创建数据对象\n\t     * @param {Object} data 组件数据对象\n\t     * @returns {void} 无返回\n\t     */\n\t    _createdData_: function /*istanbul ignore next*/_createdData_(data) {\n\t      if (utils.isFunction(data)) {\n\t        this.$data = data.call(this);\n\t      } else {\n\t        this.$data = data || {};\n\t      }\n\t      utils.each(this.$data, function (name) {\n\t        Object.defineProperty(this, name, {\n\t          configurable: true,\n\t          enumerable: true,\n\t          get: function /*istanbul ignore next*/get() {\n\t            if (!this.$data) return;\n\t            return this.$data[name];\n\t          },\n\t          set: function /*istanbul ignore next*/set(value) {\n\t            if (!this.$data) return;\n\t            this.$data[name] = value;\n\t          }\n\t        });\n\t      }, this);\n\t    },\n\t\n\t    /**\n\t     * 创建组件属性\n\t     * @param {Object} properties 属性定义对象\n\t     * @returns {void} 无返回\n\t     */\n\t    _createProperties_: function /*istanbul ignore next*/_createProperties_(properties) {\n\t      this.$properties = {};\n\t      utils.each(properties, function (name, descriptor) {\n\t        if (utils.isFunction(descriptor)) {\n\t          descriptor = { get: descriptor };\n\t        } else if (!utils.isObject(descriptor)) {\n\t          descriptor = { value: descriptor };\n\t        } else {\n\t          //不能直接用 descriptor，\n\t          //因为为会导到多个组件实例间的影响\n\t          descriptor = utils.copy(descriptor);\n\t        }\n\t        var hasGetterOrSetter = !!descriptor.get || !!descriptor.set;\n\t        if (!hasGetterOrSetter) {\n\t          descriptor.value = descriptor.value || null;\n\t          descriptor.get = function () {\n\t            return descriptor.value;\n\t          };\n\t          descriptor.set = function (value) {\n\t            descriptor.value = value;\n\t          };\n\t        }\n\t        Object.defineProperty(this, name, {\n\t          configurable: true,\n\t          enumerable: true,\n\t          get: function /*istanbul ignore next*/get() {\n\t            if (!descriptor.get) {\n\t              throw new Error('Property `' + name + '` cannot be read');\n\t            }\n\t            return descriptor.get.call(this);\n\t          },\n\t          set: function /*istanbul ignore next*/set(value) {\n\t            if (!descriptor.set) {\n\t              throw new Error('Property `' + name + '` cannot be written');\n\t            }\n\t            if (descriptor.test && !descriptor.test(value)) {\n\t              throw new Error('Invalid value `' + value + '` for property `' + name + '`');\n\t            }\n\t            descriptor.set.call(this, value);\n\t            if (this._observer_) {\n\t              this._observer_.emitChange({ path: name, value: value });\n\t            }\n\t          }\n\t        });\n\t        this.$properties[name] = descriptor;\n\t      }, this);\n\t    },\n\t\n\t    /**\n\t     * 创建监控\n\t     * 为什么用 watches 而不是 watchers 或其它？\n\t     * 因为，这里仅是「监控配置」并且是「复数」\n\t     * @param {Object} watches 监控定义对象\n\t     * @returns {void} 无返回\n\t     */\n\t    _createWatches_: function /*istanbul ignore next*/_createWatches_(watches) {\n\t      this._watchers_ = this._watchers_ || [];\n\t      utils.each(watches, function (name, handler) {\n\t        this.$watch(name, handler);\n\t      }, this);\n\t    },\n\t\n\t    /**\n\t     * 在模板发生更新时\n\t     * @returns {void} 无返回\n\t     */\n\t    _onTemplateUpdate_: function /*istanbul ignore next*/_onTemplateUpdate_() {\n\t      this._watchers_.forEach(function (watcher) {\n\t        watcher.calc();\n\t      }, this);\n\t    },\n\t\n\t    /**\n\t     * 添加一个监控\n\t     * @param {string|function} path 计算函数或路径\n\t     * @param {function} handler 处理函数\n\t     * @returns {void} 无返回\n\t     */\n\t    $watch: function /*istanbul ignore next*/$watch(path, handler) {\n\t      if (!utils.isFunction(handler)) return;\n\t      var calcer = path;\n\t      if (!utils.isFunction(path)) {\n\t        calcer = function /*istanbul ignore next*/calcer() {\n\t          return utils.getByPath(this, path);\n\t        };\n\t      }\n\t      var watcher = new Watcher(calcer.bind(this), handler.bind(this));\n\t      this._watchers_.push(watcher);\n\t      return watcher;\n\t    },\n\t\n\t    /**\n\t     * 取消一个 watcher 对象\n\t     * @param {object} watcher 监控对象实例\n\t     * @returns {void} 无返回\n\t     */\n\t    $unWatch: function /*istanbul ignore next*/$unWatch(watcher) {\n\t      var index = this._watchers_.findIndex(function (w) /*istanbul ignore next*/{\n\t        return w === watcher;\n\t      });\n\t      this._watchers_.splice(index, 1);\n\t    },\n\t\n\t    /**\n\t     * 创建元素\n\t     * @returns {void} 无返回\n\t     */\n\t    _createElement_: function /*istanbul ignore next*/_createElement_() {\n\t      if (this._created_) return;\n\t      this._created_ = true;\n\t      this.$callHook('onCreate');\n\t      utils.defineFreezeProp(this, '$element', this.element || ComponentClass.$template.cloneNode(true));\n\t      if (!this.$element || this.$element.nodeName === '#text') {\n\t        throw new Error('Invalid component template');\n\t      }\n\t      this.$callHook('onCreated');\n\t    },\n\t\n\t    /**\n\t     * 编译自身模板并完成绑定\n\t     * @returns {void} 无返回\n\t     */\n\t    $compile: function /*istanbul ignore next*/$compile() {\n\t      if (this._compiled_) return;\n\t      this._compiled_ = true;\n\t      this._createElement_();\n\t      utils.defineFreezeProp(this, '_template_', new Template(this.$element, {\n\t        directives: this.$directives,\n\t        root: true\n\t      }));\n\t      this._template_.bind(this);\n\t      this._template_.on('update', this._onTemplateUpdate_);\n\t      this._template_.on('bind', function () {\n\t        if (!this.deferReady) this.$callHook('onReady');\n\t      }.bind(this));\n\t    },\n\t\n\t    /**\n\t     * 向 DOM tree 中挂截组件\n\t     * @param {HTMLNode} mountNode 挂载点元素\n\t     * @param {append} append 是否 append 到挂载元素内\n\t     * @returns {void} 无返回 \n\t     */\n\t    $mount: function /*istanbul ignore next*/$mount(mountNode, append) {\n\t      if (this._mounted_) return;\n\t      this.$compile();\n\t      this.$callHook('onMount');\n\t      if (mountNode) {\n\t        mountNode.$substitute = this.$element;\n\t        this.$element._mountNode = mountNode;\n\t        if (append) {\n\t          mountNode.appendChild(this.$element);\n\t        } else if (mountNode.parentNode) {\n\t          mountNode.parentNode.insertBefore(this.$element, mountNode);\n\t        }\n\t      }\n\t      this._mounted_ = true;\n\t      this._removed_ = false;\n\t      this.$callHook('onMounted');\n\t    },\n\t\n\t    /**\n\t     * 将组件添加到指定容器元素内\n\t     * @param {HTMLNode} node 容器元素\n\t     * @returns {void} 无返回 \n\t     */\n\t    $appendTo: function /*istanbul ignore next*/$appendTo(node) {\n\t      this.$mount(node, true);\n\t    },\n\t\n\t    /**\n\t     * 移除组件\n\t     * @returns {void} 无返回\n\t     */\n\t    $remove: function /*istanbul ignore next*/$remove() {\n\t      if (this._removed_ || !this._mounted_) return;\n\t      this.$callHook('onRemove');\n\t      if (this.$element.parentNode) {\n\t        this.$element.parentNode.removeChild(this.$element);\n\t      }\n\t      this._removed_ = true;\n\t      this._mounted_ = false;\n\t      this.$callHook('onRemoved');\n\t    },\n\t\n\t    /**\n\t     * 触发自身的一个事件并向上冒泡\n\t     * @param {string} name 事件名称\n\t     * @param {object} data 传递的对象\n\t     * @returns {void} 无返回\n\t     */\n\t    $dispatch: function /*istanbul ignore next*/$dispatch(name, data) {\n\t      var stopPropagation = this.$emit(name, data);\n\t      if (!stopPropagation && this.$parent) {\n\t        this.$parent.$dispatch(name, data);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * 触发自身的一个事件并向下广播\n\t     * @param {string} name 事件名称\n\t     * @param {object} data 传递的对象\n\t     * @returns {void} 无返回\n\t     */\n\t    $broadcast: function /*istanbul ignore next*/$broadcast(name, data) {\n\t      var stopPropagation = this.$emit(name, data);\n\t      if (!stopPropagation && this.$children && this.$children.length > 0) {\n\t        this.$children.forEach(function (child) {\n\t          child.$broadcast(name, data);\n\t        }, this);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * 释放组件\n\t     * @returns {void} 无返回\n\t     */\n\t    $dispose: function /*istanbul ignore next*/$dispose() {\n\t      this.$remove();\n\t      this._emitter_.off();\n\t      this.$children.forEach(function (child) {\n\t        child.$dispose();\n\t      }, this);\n\t      if (this.$parent) {\n\t        var index = this.$parent.$children.indexOf(this);\n\t        this.$parent.$children.splice(index, 1);\n\t      }\n\t      this.$callHook('onDispose');\n\t      if (this._compiled_) {\n\t        this._template_.unbind();\n\t      }\n\t      this.$callHook('onDisposed');\n\t      for (var key in this) {\n\t        delete this[key];\n\t      }\n\t      ['_observer_', '$element', '$children', '$parent', '_template_'].forEach(function (key) {\n\t        delete this[key];\n\t      }, this);\n\t      utils.setPrototypeOf(this, null);\n\t    }\n\t\n\t  });\n\t\n\t  //保存类选项\n\t  ComponentClass.$options = classOpts;\n\t  ComponentClass.$template = utils.parseDom(classOpts.template);\n\t\n\t  //向 ComponentClass.prototype 上拷贝成员\n\t  utils.copy(classOpts, ComponentClass.prototype);\n\t  utils.copy(classOpts.methods, ComponentClass.prototype);\n\t\n\t  //使 ComponentClass instanceof Component === true \n\t  //IE9/10 下为 false，并且动态为 Component.prototype 添加的成员不会在 ComponentClass 上生效\n\t  utils.setPrototypeOf(ComponentClass, Component.prototype);\n\t\n\t  return ComponentClass;\n\t}\n\t\n\t//继承自 EventEmitter\n\tComponent.prototype = utils.create(EventEmitter.prototype);\n\t\n\t//组件扩展方法，简单封装 extends\n\tComponent.extend = function (classOpts) {\n\t  return new Component(classOpts);\n\t};\n\t\n\t//定义扩展方法\n\tComponent.prototype.extend = function (classOpts) {\n\t  classOpts = classOpts || {};\n\t  classOpts.extend = this;\n\t  return new Component(classOpts);\n\t};\n\t\n\t//创建实例的方法\n\tComponent.prototype.create = function (instanceOpts) {\n\t  return new this(instanceOpts);\n\t};\n\t\n\t//针对包括 element 组件类的启动方法\n\tComponent.prototype.start = function (instanceOpts) {\n\t  if (!this.$options || !this.$options.element) {\n\t    throw new Error('Start method cannot be called');\n\t  }\n\t  this.create(instanceOpts);\n\t};\n\t\n\tmodule.exports = Component;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Template = __webpack_require__(8);\n\tvar Directive = Template.Directive;\n\t\n\t/**\n\t * 创建一个组件指令\n\t * @param {object} options 选项\n\t * @returns {object} 组件指令\n\t */\n\tfunction ComponentDirective(options) {\n\t\n\t  return new Directive({\n\t    type: Directive.TE,\n\t    literal: true,\n\t    final: true,\n\t    level: Directive.LE,\n\t\n\t    bind: function /*istanbul ignore next*/bind() {\n\t      this.component = new options.component({\n\t        deferReady: true,\n\t        parent: options.parent || this.scope\n\t      });\n\t      this.handleAttrs();\n\t      this.node.$target = this.component;\n\t      this.handler = this.compiler.compile(this.node, {\n\t        element: false,\n\t        children: false\n\t      });\n\t      this.handleContents();\n\t      this.component.$mount(this.node);\n\t      if (this.node.parentNode) {\n\t        this.node.parentNode.removeChild(this.node);\n\t      }\n\t    },\n\t\n\t    handleAttrs: function /*istanbul ignore next*/handleAttrs() {\n\t      this.attrs = [].slice.call(this.node.attributes);\n\t      var directiveRegexp = new RegExp('^' + this.prefix + ':', 'i');\n\t      this.attrs.forEach(function (attr) {\n\t        if (directiveRegexp.test(attr.name)) return;\n\t        if (attr.name in this.component.$properties) return;\n\t        this.component.$element.setAttribute(attr.name, attr.value);\n\t        this.node.removeAttribute(attr.name);\n\t      }, this);\n\t    },\n\t\n\t    handleContents: function /*istanbul ignore next*/handleContents() {\n\t      this.placeHandlers = [];\n\t      var places = [].slice.call(this.component.$element.querySelectorAll('[' + this.prefix + '\\\\:content]'));\n\t      places.forEach(function (place) {\n\t        //将内容插入到指定的「位置」\n\t        var contents = null;\n\t        var selector = place.getAttribute(this.prefix + ':content');\n\t        if (!selector) {\n\t          contents = [].slice.call(this.node.childNodes);\n\t        } else {\n\t          contents = [].slice.call(this.node.querySelectorAll(selector));\n\t        }\n\t        if (!contents || contents.length < 1) return;\n\t        place.innerHTML = '';\n\t        contents.forEach(function (content) {\n\t          place.appendChild(content.cloneNode(true));\n\t        }, this);\n\t        //编译插入后的子「内容模板」\n\t        var handler = this.compiler.compile(place);\n\t        this.placeHandlers.push(handler);\n\t      }, this);\n\t    },\n\t\n\t    execute: function /*istanbul ignore next*/execute(scope) {\n\t      this.handler(scope);\n\t      if (!this._ready_) {\n\t        this._ready_ = true;\n\t        this.component.$callHook('onReady');\n\t      }\n\t      this.placeHandlers.forEach(function (handler) {\n\t        handler(scope);\n\t      }, this);\n\t    }\n\t\n\t  });\n\t}\n\t\n\tmodule.exports = ComponentDirective;\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tmodule.exports = {\n\t  View: __webpack_require__(39)\n\t};\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Component = __webpack_require__(36);\n\tvar utils = __webpack_require__(3);\n\t\n\t/**\n\t * 内置视图组件\n\t * 可以加载并显示其它组件，并可以指定「转场效果」\n\t */\n\tvar View = new Component({\n\t\n\t  template: '<div></div>',\n\t\n\t  properties: {\n\t\n\t    /**\n\t     * 显示到视图中的组件\n\t     */\n\t    component: {\n\t      test: function /*istanbul ignore next*/test(value) {\n\t        if (!value) return false;\n\t        return value instanceof Component || utils.isString(value);\n\t      },\n\t      set: function /*istanbul ignore next*/set(component) {\n\t        if (this._transitioning) return;\n\t        this._transitioning = true;\n\t        //如果 value 是字符串则尝试从 $parent.components 中获取组件类 \n\t        if (utils.isString(component)) {\n\t          if (this.$parent && this.$parent.$components) {\n\t            this.component = this.$parent.$components[component];\n\t          } else {\n\t            this.component = null;\n\t          }\n\t          return;\n\t        }\n\t        //声明新旧组件变量\n\t        var newComponentInstance = null;\n\t        var oldComponentInstance = this.componentInstance;\n\t        //创建新组件实例\n\t        if (utils.isFunction(component)) {\n\t          newComponentInstance = new component({\n\t            parent: this\n\t          });\n\t        } else {\n\t          component.$setParent(this);\n\t          newComponentInstance = component;\n\t        }\n\t        //通过转场控制器进行转场准备\n\t        this.transition.prep(newComponentInstance, oldComponentInstance);\n\t        //挂载新组件实例\n\t        newComponentInstance.$appendTo(this.$element);\n\t        //通过转场控制器进行转场\n\t        this.transition.go(newComponentInstance, oldComponentInstance, function () {\n\t          //触发相关事件\n\t          this.$emit('enter', newComponentInstance);\n\t          this.$emit('leave', oldComponentInstance);\n\t          //销毁旧组件实例\n\t          if (oldComponentInstance) {\n\t            oldComponentInstance.$dispose();\n\t          }\n\t          this._transitioning = false;\n\t        }.bind(this));\n\t        //暂存当前组件实例\n\t        this.componentInstance = newComponentInstance;\n\t      },\n\t      get: function /*istanbul ignore next*/get() {\n\t        return this._Component;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * 视图的转场控制对象\n\t     */\n\t    transition: {\n\t      get: function /*istanbul ignore next*/get() {\n\t        return this._transition || View.transition;\n\t      },\n\t      set: function /*istanbul ignore next*/set(transition) {\n\t        if (this._transitioning) return;\n\t        if (!transition || utils.isFunction(transition.prep) && utils.isFunction(transition.go)) {\n\t          if (this._transition && utils.isFunction(this._transition.clean)) {\n\t            this._transition.clean(this);\n\t          }\n\t          if (transition && utils.isFunction(transition.init)) {\n\t            transition.init(this);\n\t          }\n\t          this._transition = transition;\n\t        } else {\n\t          throw new Error('Invalid transition');\n\t        }\n\t      }\n\t    }\n\t  },\n\t\n\t  /**\n\t   * 切换到指定的组件\n\t   * @param {Component} component 组件\n\t   * @param {transition} transition 转场控制组件\n\t   * @returns {void} 无返回\n\t   */\n\t  switchTo: function /*istanbul ignore next*/switchTo(component, transition) {\n\t    if (transition) {\n\t      this.transition = transition;\n\t    }\n\t    this.component = component;\n\t  }\n\t\n\t});\n\t\n\t/**\n\t * 默认转场设置\n\t */\n\tView.transition = {\n\t  //init: function () { },\n\t  //clean: function () { },\n\t\n\t  /**\n\t   * 转场开始前的准备\n\t   * @param {Component} newComponent 新组件\n\t   * @param {Component} oldComponent 旧组件\n\t   * @returns {void} 无返回\n\t   */\n\t  prep: function /*istanbul ignore next*/prep(newComponent, oldComponent) {\n\t    if (oldComponent) oldComponent.$element.style.display = 'none';\n\t  },\n\t\n\t  /**\n\t   * 执行转场动画\n\t   * @param {Component} newComponent 新组件\n\t   * @param {Component} oldComponent 旧组件\n\t   * @param {Function} done 完成后的回调\n\t   * @returns {void} 无返回\n\t   */\n\t  go: function /*istanbul ignore next*/go(newComponent, oldComponent, done) {\n\t    done();\n\t  }\n\t};\n\t\n\tmodule.exports = View;\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Plugin = __webpack_require__(41);\n\tmodule.exports = new Plugin(function () {\n\t  return __webpack_require__(42);\n\t});\n\n/***/ },\n/* 41 */\n/***/ function(module, exports) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar factory = function factory(thunk) {\n\t  function Plugin(opts) {\n\t    return typeof Plugin.entity === 'function' ? new Plugin.entity(opts) : Plugin.entity;\n\t  }\n\t  Plugin.install = function (mokit) {\n\t    factory.mokit = mokit;\n\t    this.entity = thunk();\n\t    this.entity.install(mokit);\n\t  };\n\t  if (typeof mokit !== 'undefined') {\n\t    mokit.use(Plugin);\n\t  }\n\t  return Plugin;\n\t};\n\t\n\tmodule.exports = factory;\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar mokit = __webpack_require__(41).mokit;\n\tvar utils = mokit.utils;\n\tvar Class = mokit.Class;\n\tvar EventEmitter = mokit.EventEmitter;\n\tvar Component = mokit.Component;\n\tvar RouterBase = __webpack_require__(43);\n\tvar HashDirver = __webpack_require__(44);\n\tvar RouterView = __webpack_require__(45);\n\tvar LinkDirective = __webpack_require__(46);\n\t\n\tvar ROOT_PATH = '/';\n\t\n\tvar Router = new Class({\n\t  $name: 'Router',\n\t  $extends: RouterBase,\n\t\n\t  /**\n\t   * 路由类构造函数\n\t   * @param {Object} options 选项\n\t   * @returns {void} 无返回\n\t   */\n\t  constructor: function /*istanbul ignore next*/constructor(options) {\n\t    this.$super();\n\t    options = options || utils.create(null);\n\t    if (options.view) this.view = options.view;\n\t    this.emitter = new EventEmitter(this);\n\t    this.dirvier = options.dirvier || new HashDirver(this);\n\t    this.dirvier.on('changed', this._onChanged.bind(this));\n\t  },\n\t\n\t  /**\n\t   *「路由视组」访问器\n\t   * @returns {RouterView} 路由视图组件实例\n\t   */\n\t  get view() {\n\t    return this._view;\n\t  },\n\t\n\t  /**\n\t   *「路由视组」设置器\n\t   * @param {RouterView} view 路由视图组件实例\n\t   * @returns {void} 无返回\n\t   */\n\t  set view(view) {\n\t    if (!(view instanceof RouterView)) {\n\t      throw new Error('Invalid RouterView');\n\t    }\n\t    this._view = view;\n\t    this._view._router = this;\n\t    this._onChanged(this.dirvier.get());\n\t  },\n\t\n\t  /**\n\t   * 路由发生变化时的处理函数\n\t   * @param {string} path 将要转到的路径\n\t   * @returns {void} 无返回\n\t   */\n\t  _onChanged: function /*istanbul ignore next*/_onChanged(path) {\n\t    path = path || '/';\n\t    var fromPath = this.dirvier.get();\n\t    var toPath = this.resolveUri(path, fromPath);\n\t    toPath = path.split('?')[0].split('!')[0];\n\t    var routes = this.get(toPath);\n\t    if (!routes || routes.length < 1) return;\n\t    this.route = routes[0];\n\t    this.route.path = toPath;\n\t    this.route.query = this.parseQuery();\n\t    if (this.view) {\n\t      setTimeout(function () {\n\t        this.view.component = this.route.component;\n\t      }.bind(this), 0);\n\t    }\n\t    this.emitter.$emit('enter', toPath);\n\t    this.emitter.$emit('leave', fromPath);\n\t  },\n\t\n\t  /**\n\t   * 转到一个路径\n\t   * @param {string} path 将要转到的路径\n\t   * @returns {void} 无返回\n\t   */\n\t  go: function /*istanbul ignore next*/go(path) {\n\t    this.dirvier.set(path);\n\t  },\n\t\n\t  /**\n\t   * 映射路由配置\n\t   * @param {Object} map 路由配置\n\t   * @returns {void} 无返回\n\t   */\n\t  map: function /*istanbul ignore next*/map(_map) {\n\t    utils.each(_map, function (pattern, item) {\n\t      if (utils.isString(item)) {\n\t        item = _map[item];\n\t      }\n\t      if (item instanceof Component) {\n\t        item = { component: item };\n\t      }\n\t      if (!item) throw new Error('Invalid route `' + pattern + '`');\n\t      item.pattern = pattern;\n\t      this.addOne(item);\n\t    }, this);\n\t  },\n\t\n\t  /**\n\t   * 解析相对路径\n\t   * @param {string} toUri 原始路径\n\t   * @param {string} fromUri 参数路径\n\t   * @returns {string} 解析后的相关路径\n\t   */\n\t  resolveUri: function /*istanbul ignore next*/resolveUri(toUri, fromUri) {\n\t    toUri = toUri || ROOT_PATH;\n\t    if (toUri[0] == ROOT_PATH) return toUri;\n\t    fromUri = fromUri || ROOT_PATH;\n\t    fromUri = fromUri.split('?')[0].split('#')[0];\n\t    var baseDir = fromUri.substring(0, fromUri.lastIndexOf(ROOT_PATH));\n\t    var uriParts = toUri.split('#')[0].split(ROOT_PATH);\n\t    var uriHash = toUri.split('#')[1];\n\t    var newUriParts = baseDir.length > 0 ? baseDir.split(ROOT_PATH) : [];\n\t    uriParts.forEach(function (part) {\n\t      if (part == '..') {\n\t        newUriParts.pop();\n\t      } else if (part && part != '.') {\n\t        newUriParts.push(part);\n\t      }\n\t    }, this);\n\t    return ROOT_PATH + newUriParts.join(ROOT_PATH) + (uriHash ? '#' + uriHash : '');\n\t  },\n\t\n\t  /**\n\t   * 解析查询字符串并生成查询参数对象\n\t   * @returns {Object} 查询参数对象\n\t   */\n\t  parseQuery: function /*istanbul ignore next*/parseQuery() {\n\t    var queryString = (location.href.split('#')[1] || '').split('?')[1] || '';\n\t    var pairs = queryString.split('&');\n\t    var query = utils.create(null);\n\t    pairs.forEach(function (pair) {\n\t      var strs = pair.split('=');\n\t      query[strs[0]] = strs[1];\n\t    }, this);\n\t    return query;\n\t  },\n\t\n\t  /**\n\t   * 启动应用\n\t   * @param {Component} root 应用根组件类\n\t   * @param {element} element 挂载元素\n\t   * @returns {Component} 应用根件实例\n\t   */\n\t  start: function /*istanbul ignore next*/start(root, element) {\n\t    this.app = new root({\n\t      _router: this\n\t    });\n\t    this.app.$appendTo(element);\n\t    return this.app;\n\t  }\n\t\n\t});\n\t\n\tRouter.HashDirver = HashDirver;\n\t\n\t/**\n\t * 路由插件安装方法\n\t * @param {Component} owner 组件类\n\t * @returns {void} 无返回\n\t */\n\tRouter.install = function (owner) {\n\t\n\t  owner.Router = this;\n\t\n\t  //为组件实例扩展 $router 属性\n\t  Object.defineProperty(owner.prototype, '$router', {\n\t    get: function /*istanbul ignore next*/get() {\n\t      if (this instanceof RouterView) {\n\t        return this._router || this.$parent && this.$parent.$router;\n\t      } else if (this.$parent) {\n\t        return this.$parent.$router;\n\t      } else if (!this.$parent) {\n\t        return this._router || this.router;\n\t      } else {\n\t        return null;\n\t      }\n\t    }\n\t  });\n\t\n\t  //为组件实例扩展 $route 属性\n\t  Object.defineProperty(owner.prototype, '$route', {\n\t    get: function /*istanbul ignore next*/get() {\n\t      return this.$router && this.$router.route;\n\t    }\n\t  });\n\t\n\t  //添加全局组件 RouterView\n\t  owner.component('RouterView', RouterView);\n\t\n\t  //添加 link 指令\n\t  owner.directive('link', LinkDirective);\n\t};\n\t\n\tmodule.exports = Router;\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar utils = __webpack_require__(3);\n\t\n\t/**\n\t * 定义正则表达式常量\n\t */\n\tvar PLACE_HOLDER_EXPR = /\\{.+?\\}/gim;\n\tvar COLLECT_EXPR_STR = '([^\\\\/]+)';\n\tvar GREEDY_COLLECT_EXPR_STR = '(.+)';\n\t\n\t/**\n\t * 定义路由实例扩展 __proto__\n\t **/\n\tvar routeInstanceProto = {};\n\t\n\t/**\n\t * 生成 action URL\n\t * @param {String} action action 名称\n\t * @return {String} 对应的 path\n\t **/\n\trouteInstanceProto.actionUrl = function (action) {\n\t  var self = this;\n\t  var actionUrl = self.withoutActionUrl + '/' + action;\n\t  actionUrl = actionUrl.replace(/\\/\\//igm, '/');\n\t  return actionUrl;\n\t};\n\t\n\t/**\n\t * 定义路由对象\n\t * @param {Object} routes 路由眏射表\n\t * @param {Object} options 选项\n\t * @returns {void} 无返回\n\t */\n\tfunction Router(routes, options) {\n\t  var self = this;\n\t  options = options || {};\n\t  self.options = options;\n\t  self.table = [];\n\t  if (routes) {\n\t    self.add(routes);\n\t  }\n\t}\n\t\n\t/**\n\t * 解析占位符 key 定义\n\t * @param {String} _keyDefStr 占位符定义\n\t * @returns {Object} 占符符信息对象\n\t **/\n\tRouter.prototype._parseKeyDef = function (_keyDefStr) {\n\t  var keyDefStr = _keyDefStr.substring(1, _keyDefStr.length - 1);\n\t  var keyDefParts = keyDefStr.split(':');\n\t  var keyDef = {};\n\t  keyDef.name = keyDefParts[0];\n\t  if (keyDef.name[0] == '*') {\n\t    keyDef.greedy = true;\n\t    keyDef.name = keyDef.name.substring(1);\n\t  }\n\t  if (keyDefParts[1]) {\n\t    keyDef.expr = new RegExp(keyDefParts[1], 'igm');\n\t  }\n\t  return keyDef;\n\t};\n\t\n\t/**\n\t * 添加一个路由配置\n\t * @param {Object} route 路由项\n\t * @returns {void} 无返回\n\t */\n\tRouter.prototype.addOne = function (route) {\n\t  var self = this;\n\t  if (!route || !route.pattern) return;\n\t  //取到所有路由key\n\t  PLACE_HOLDER_EXPR.lastIndex = 0;\n\t  var keyDefs = route.pattern.match(PLACE_HOLDER_EXPR) || [];\n\t  route.keys = {};\n\t  //初始化 url 匹配测试表达式字符串\n\t  var exprStr = '^' + route.pattern + '$';\n\t  utils.each(keyDefs, function (i) {\n\t    //处理 key 定义\n\t    var keyDef = self._parseKeyDef(keyDefs[i]);\n\t    route.keys[keyDef.name] = {\n\t      index: i,\n\t      expr: keyDef.expr\n\t    };\n\t    //将 'key 占位符' 的表达式，替换为 '提交值的正则表达式'\n\t    var collectExprStr = keyDef.greedy ? GREEDY_COLLECT_EXPR_STR : COLLECT_EXPR_STR;\n\t    exprStr = exprStr.replace(keyDefs[i], collectExprStr);\n\t  });\n\t  //生成 url 匹配测试表达式\n\t  route.expr = new RegExp(exprStr, 'igm');\n\t  //处理所有 route 的 method \n\t  route.methods = route.methods || self.options.defaultMethods;\n\t  if (route.methods && route.methods.length > 0) {\n\t    route.methods = route.methods.map(function (method) {\n\t      return method.toUpperCase();\n\t    });\n\t  }\n\t  //继承原型\n\t  route.__proto__ = routeInstanceProto;\n\t  self.table.push(route);\n\t};\n\t\n\t/**\n\t * 添加一组路由配置表\n\t * @param {Route} routes 一个路由实体,格式:{pattern:'',target:object}\n\t * @returns {void} 无返回\n\t */\n\tRouter.prototype.add = function (routes) {\n\t  var self = this;\n\t  utils.each(routes, function (_name, _route) {\n\t    //判断是字符串还是一个对象，并都将 _route 转为对象\n\t    var route = utils.isString(_route) ? { 'target': _route } : _route;\n\t    //尝试从名称中解析出 method 和 pattern\n\t    var name = (_name || '/').toString();\n\t    var nameParts = name.split(' ');\n\t    if (nameParts.length > 1) {\n\t      route.methods = nameParts[0].split(',');\n\t      route.pattern = route.pattern || nameParts[1];\n\t    } else {\n\t      route.pattern = route.pattern || nameParts[0];\n\t    }\n\t    //解析 controller 和 action\n\t    //target 和 controller 不可同时配置，target 可以为 'controller action' 这样的格式\n\t    if (route.target) {\n\t      var targetParts = route.target.split(' ');\n\t      route.controller = route.controller || targetParts[0];\n\t      route.action = route.action || targetParts[1];\n\t    }\n\t    route.target = route.controller;\n\t    //添加 route\n\t    self.addOne(route);\n\t  });\n\t};\n\t\n\t/**\n\t * 解析路由动态 action\n\t * @param {Object} route 路由项\n\t * @returns {Object} 解析后路由项\n\t **/\n\tRouter.prototype._parseDynamicAction = function (route) {\n\t  if (route && route.action && route.action.indexOf('{') > -1) {\n\t    utils.each(route.params, function (key, val) {\n\t      route.action = utils.replace(route.action, '{' + key + '}', val);\n\t    });\n\t  }\n\t  return route;\n\t};\n\t\n\t/**\n\t * 创建一个路由实例\n\t * @param {object} srcRoute 路由项原型 proto\n\t * @param {String} url URL\n\t * @param {Object} params 参数\n\t * @returns {Object} 路由实例\n\t **/\n\tRouter.prototype._createRouteInstance = function (srcRoute, url, params) {\n\t  var self = this;\n\t  var routeInstance = { __proto__: srcRoute };\n\t  routeInstance.params = params;\n\t  if (routeInstance.action) {\n\t    var urlParts = url.split('/');\n\t    routeInstance.withoutActionUrl = urlParts.slice(0, urlParts.length - 1);\n\t  } else {\n\t    routeInstance.withoutActionUrl = url;\n\t  }\n\t  routeInstance = self._parseDynamicAction(routeInstance);\n\t  return routeInstance;\n\t};\n\t\n\t/**\n\t * 通过请求路径获取第一个匹配的路由\n\t * @param {String} url 请求路径\n\t * @param {Boolean} handleActionFromUrl 是否从 URL 中分析 action\n\t * @returns {Route} 路由实体\n\t */\n\tRouter.prototype.get = function (url, handleActionFromUrl) {\n\t  var self = this;\n\t  var routeArray = [];\n\t  if (utils.isNull(url)) {\n\t    return routeArray;\n\t  }\n\t  url = url.replace(/\\/\\//igm, '/');\n\t  utils.each(self.table, function (i, route) {\n\t    route.expr.lastIndex = 0;\n\t    if (!route.expr.test(url)) return;\n\t    //通过子表达式 '正则的()' 取值\n\t    route.expr.lastIndex = 0;\n\t    var values = route.expr.exec(url);\n\t    //生成 params\n\t    var params = {};\n\t    var failed = utils.each(route.keys, function (key, keyDef) {\n\t      params[key] = values[keyDef.index + 1];\n\t      if (!keyDef.expr) return;\n\t      keyDef.expr.lastIndex = 0;\n\t      if (!keyDef.expr.test(params[key])) {\n\t        return true;\n\t      }\n\t    });\n\t    if (failed) return;\n\t    routeArray.push(self._createRouteInstance(route, url, params));\n\t  });\n\t  //确定 parseActionFromUrl 的值\n\t  handleActionFromUrl = utils.isNull(handleActionFromUrl) ? self.options.parseActionFromUrl : handleActionFromUrl;\n\t  //如果需要 parseActionFromUrl\n\t  if (handleActionFromUrl) {\n\t    var _routeArray = self._getForActionFromUrl(url);\n\t    routeArray.push.apply(routeArray, _routeArray);\n\t  }\n\t  return routeArray;\n\t};\n\t\n\t/**\n\t * 从 url 中分解出来 action ，然后获取 route array\n\t * @param {String} url 路径\n\t * @returns {Object} 路由实例\n\t **/\n\tRouter.prototype._getForActionFromUrl = function (url) {\n\t  var self = this;\n\t  /*\n\t  一是在如果直接匹配不成功时，才将 “/” 分隔的最后一个 “字串” 当作 action 进行再一次匹配\n\t  */\n\t  var urlParts = url.split('/');\n\t  var lastIndex = urlParts.length - 1;\n\t  var action = urlParts[lastIndex];\n\t  //检查分解出来的 action 是否合法\n\t  if (action === '' || action.indexOf('.') > -1) {\n\t    return null;\n\t  }\n\t  var ctrlRouteUrl = urlParts.slice(0, lastIndex).join('/');\n\t  if (ctrlRouteUrl === '') ctrlRouteUrl = '/';\n\t  var ctrlRouteArray = self.get(ctrlRouteUrl, false) || [];\n\t  var routeArray = ctrlRouteArray.filter(function (route) {\n\t    /**\n\t     * 从 URL 分解出来的 action 不可能是动态的 action\n\t     * route.action 没有指定时才能作为 parseAction 的合法 route\n\t     **/\n\t    if (route.action) return false;\n\t    //设定 action 作为指向 action 的 route\n\t    route.action = action;\n\t    //标记一下 action 在 url 中\n\t    route.actionFromUrl = true;\n\t    return true;\n\t  });\n\t  return routeArray;\n\t};\n\t\n\t/**\n\t * 过滤出包含指定 method 的 route\n\t * @param {array} routeArray 路由实例数组\n\t * @param {String} method HTTP method\n\t * @returns {Object} 匹配的路由实例\n\t **/\n\tRouter.prototype.matchByMethod = function (routeArray, method) {\n\t  if (!routeArray || routeArray.length < 1) {\n\t    return routeArray;\n\t  }\n\t  return routeArray.filter(function (route) {\n\t    if (!route || !route.methods || route.methods.length < 1) {\n\t      return false;\n\t    }\n\t    return route.methods.indexOf(method) > -1;\n\t  })[0];\n\t};\n\t\n\tmodule.exports = Router;\n\t\n\t/*end*/\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar mokit = __webpack_require__(41).mokit;\n\tvar Class = mokit.Class;\n\tvar EventEmitter = mokit.EventEmitter;\n\t\n\tvar SEPARATOR = '#!';\n\tvar ROOT_PATH = '/';\n\t\n\t/**\n\t * 基于 has 的路由驱动\n\t */\n\tvar HashDriver = new Class({\n\t  $name: 'HashDriver',\n\t  $extends: EventEmitter,\n\t\n\t  /**\n\t   * 路由驱动构造函数\n\t   * @param {Object} router 路径实例\n\t   * @returns {void} 无返回\n\t   */\n\t  constructor: function /*istanbul ignore next*/constructor(router) {\n\t    this.$super();\n\t    this.router = router;\n\t    window.addEventListener('hashchange', function () {\n\t      this._onChange();\n\t    }.bind(this));\n\t  },\n\t\n\t  /**\n\t   * 获取当前路径\n\t   * @returns {string} 当前路径\n\t   */\n\t  get: function /*istanbul ignore next*/get() {\n\t    return location.hash.split(SEPARATOR)[1] || ROOT_PATH;\n\t  },\n\t\n\t  /**\n\t   * 设置当前路径\n\t   * @param {string} path 要转到的路径\n\t   * @returns {void} 无返回\n\t   */\n\t  set: function /*istanbul ignore next*/set(path) {\n\t    path = path || ROOT_PATH;\n\t    location.hash = SEPARATOR + path;\n\t  },\n\t\n\t  /**\n\t   * 路由发生变化时的处理函数\n\t   * @param {string} path 将要转到的路径\n\t   * @returns {void} 无返回\n\t   */\n\t  _onChange: function /*istanbul ignore next*/_onChange(path) {\n\t    path = path || this.get() || '';\n\t    if (path[0] != ROOT_PATH) path = ROOT_PATH + path;\n\t    this.emit('changed', path);\n\t  }\n\t\n\t});\n\t\n\tmodule.exports = HashDriver;\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar mokit = __webpack_require__(41).mokit;\n\tvar View = mokit.components.View;\n\t\n\tvar RouterView = View.extend({\n\t  properties: {\n\t    router: {\n\t      test: function /*istanbul ignore next*/test(router) {\n\t        return !!router;\n\t      },\n\t      get: function /*istanbul ignore next*/get() {\n\t        return this._router;\n\t      },\n\t      set: function /*istanbul ignore next*/set(router) {\n\t        this._router = router;\n\t        this._router.view = this;\n\t      }\n\t    }\n\t  },\n\t  onCreated: function /*istanbul ignore next*/onCreated() {\n\t    if (!this.router && this.$router) {\n\t      this.router = this.$router;\n\t    }\n\t  }\n\t});\n\t\n\tmodule.exports = RouterView;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar mokit = __webpack_require__(41).mokit;\n\tvar Directive = mokit.Directive;\n\tvar EventEmitter = mokit.EventEmitter;\n\t\n\tmodule.exports = new Directive({\n\t  literal: true,\n\t\n\t  bind: function /*istanbul ignore next*/bind() {\n\t    var eventTarget = this.node.$target || this.node;\n\t    this.emiter = new EventEmitter(eventTarget);\n\t    this.emiter.addListener(this.decorates[0] || 'click', function () {\n\t      if (!this.scope || !this.scope.$router) return;\n\t      this.scope.$router.go(this.path);\n\t    }.bind(this), false);\n\t  },\n\t\n\t  unbind: function /*istanbul ignore next*/unbind() {\n\t    this.emiter.removeListener();\n\t  },\n\t\n\t  update: function /*istanbul ignore next*/update(path) {\n\t    this.path = path;\n\t  }\n\t\n\t});\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar Plugin = __webpack_require__(41);\n\tmodule.exports = new Plugin(function () {\n\t  return __webpack_require__(48);\n\t});\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore next*/'use strict';\n\t\n\tvar mokit = __webpack_require__(41).mokit;\n\tvar utils = mokit.utils;\n\t\n\tvar SUPPORT_TOUCH = 'ontouchstart' in document;\n\tvar START_EVENT_NAME = SUPPORT_TOUCH ? 'touchstart' : 'mousedown';\n\tvar MOVE_EVENT_NAME = SUPPORT_TOUCH ? 'touchmove' : 'mousemove';\n\tvar END_EVENT_NAME = SUPPORT_TOUCH ? 'touchend' : 'mouseup';\n\tvar CUSTOM_EVENT_NAMES = /*istanbul ignore next*/'tap,taphold,dbltap,swipe,swipeup,swiperight,\\nswipedown,swipeleft,pointdown,pointmove,pointup';\n\t\n\tmodule.exports = {\n\t  name: CUSTOM_EVENT_NAMES,\n\t\n\t  option: {\n\t    swipeDurationThreshold: 1000,\n\t    swipeHorizontalDistanceThreshold: 25,\n\t    swipeVerticalDistanceThreshold: 45,\n\t    holdDurationThreshold: 1000,\n\t    dblDurationThreshold: 450,\n\t    scrollSupressionThreshold: 25\n\t  },\n\t\n\t  addListener: function /*istanbul ignore next*/addListener(emitter, name, listener, capture) {\n\t    if (!utils.isFunction(listener)) return;\n\t\n\t    var self = this;\n\t\n\t    //处理 touchstart 事件\n\t    listener.touchstart = listener.touchstart || function (event) {\n\t      var point = event.changedTouches ? event.changedTouches[0] : event;\n\t      listener.startPoint = listener.endPoint = {\n\t        'x': point.pageX,\n\t        'y': point.pageY,\n\t        'timeStamp': event.timeStamp,\n\t        'point': point\n\t      };\n\t      if (name == 'taphold') {\n\t        listener.createHoldHandler(event);\n\t      }\n\t      //模拟鼠标事件\n\t      if (name == 'pointdown') {\n\t        utils.copy(listener.startPoint, event);\n\t        emitter.emit('pointdown', event);\n\t        emitter.isPointDown = true;\n\t      }\n\t    };\n\t\n\t    //创建 hold 处理器\n\t    listener.createHoldHandler = listener.createHoldHandler || function (event) {\n\t      // 处理 taphold 事件\n\t      if (!listener.holdTimer && !listener.holdHandler) {\n\t        var option = self.option;\n\t        listener.holdHandler = function () {\n\t          event.taphold = true;\n\t          emitter.emit('taphold', event);\n\t        };\n\t        listener.holdTimer = setTimeout(function () {\n\t          if (listener.holdHandler) listener.holdHandler();\n\t        }, option.holdDurationThreshold);\n\t      }\n\t    };\n\t\n\t    //清除 hold 处理器\n\t    listener.clearHoldHandler = listener.clearHoldHandler || function () {\n\t      if (listener.holdTimer) {\n\t        clearTimeout(listener.holdTimer);\n\t        listener.holdTimer = null;\n\t        listener.holdHandler = null;\n\t      }\n\t    };\n\t\n\t    //获取划动信息\n\t    listener.getTouchInfo = function (event) {\n\t      var point = event.changedTouches ? event.changedTouches[0] : event;\n\t      listener.endPoint = {\n\t        'x': point.pageX,\n\t        'y': point.pageY,\n\t        'timeStamp': event.timeStamp,\n\t        'point': point\n\t      };\n\t      //\n\t      var option = self.option;\n\t      // 一些计算结果\n\t      var info = {};\n\t      info.timeStamp = listener.endPoint ? listener.endPoint.timeStamp : null;\n\t      info.existStartAndStop = listener.endPoint && listener.startPoint;\n\t      info.horizontalDistance = info.existStartAndStop ? listener.endPoint.x - listener.startPoint.x : 0;\n\t      info.verticalDistance = info.existStartAndStop ? listener.endPoint.y - listener.startPoint.y : 0;\n\t      info.horizontalDistanceValue = Math.abs(info.horizontalDistance);\n\t      info.verticalDistanceVlaue = Math.abs(info.verticalDistance);\n\t      info.isHorizontal = info.horizontalDistanceValue >= info.verticalDistanceVlaue;\n\t      info.isVertical = !info.sHorizontal;\n\t      info.isSwipeMove = info.horizontalDistanceValue >= option.swipeHorizontalDistanceThreshold || info.verticalDistanceVlaue >= option.swipeVerticalDistanceThreshold;\n\t      info.isSwipeTime = info.existStartAndStop ? listener.endPoint.timeStamp - listener.startPoint.timeStamp <= option.swipeDurationThreshold : true;\n\t      info.isHoldTime = info.existStartAndStop ? listener.endPoint.timeStamp - listener.startPoint.timeStamp >= option.holdDurationThreshold : false;\n\t      //这里的 direction 仅是指划动方法，不代表 swipe 动作，swipe 动作还有时间或划动距离等因素\n\t      if (info.isHorizontal && info.horizontalDistance > 0) {\n\t        info.direction = 'right';\n\t      } else if (info.isHorizontal && info.horizontalDistance < 0) {\n\t        info.direction = 'left';\n\t      } else if (info.isVertical && info.verticalDistance > 0) {\n\t        info.direction = 'down';\n\t      } else if (info.isVertical && info.verticalDistance < 0) {\n\t        info.direction = 'up';\n\t      }\n\t      return info;\n\t    };\n\t\n\t    //处理 touchmove 事件\n\t    listener.touchmove = listener.touchmove || function (event) {\n\t      var info = listener.getTouchInfo(event);\n\t      if (info.isSwipeMove) {\n\t        listener.clearHoldHandler();\n\t      }\n\t      var stopBubble = false;\n\t      //模拟鼠标事件\n\t      if (emitter.isPointDown && name == 'pointmove') {\n\t        utils.copy(listener.endPoint, event);\n\t        emitter.emit('pointmove', event);\n\t        stopBubble = true;\n\t      }\n\t      //在绑定划动的方向上禁止滚动，因为 Android 4.x 不如此处理，touchend 事件将不触发\n\t      if (name == 'swipe' || name == 'swipe' + info.direction) {\n\t        stopBubble = true;\n\t      }\n\t      //如果需要阻止冒泡\n\t      if (stopBubble) {\n\t        return false;\n\t      }\n\t    };\n\t\n\t    //完成事件\n\t    listener.done = listener.done || function (event) {\n\t      listener.clearHoldHandler();\n\t      var info = listener.getTouchInfo(event);\n\t      //模拟鼠标事件\n\t      if (name == 'pointup') {\n\t        utils.copy(listener.endPoint, event);\n\t        emitter.emit('pointup', event);\n\t        emitter.isPointDown = false;\n\t      }\n\t      // 根据计算结果判断\n\t      if (info.isSwipeTime && info.isSwipeMove) {\n\t        event.swipe = true;\n\t        event.direction = info.direction;\n\t        if (name == 'swipe') {\n\t          emitter.emit('swipe', event);\n\t        }\n\t        if (name == 'swipe' + event.direction) {\n\t          emitter.emit('swipe' + event.direction, event);\n\t        }\n\t      } else if (info.isSwipeTime && !info.isSwipeMove && !info.isHoldTime) {\n\t        if (name == 'tap') {\n\t          emitter.emit('tap', event);\n\t        }\n\t        if (name == 'dbltap') {\n\t          //处理 “双击”\n\t          var option = self.option;\n\t          event.dbltap = listener.PreTapTime && info.timeStamp - listener.PreTapTime <= option.dblDurationThreshold;\n\t          if (event.dbltap) {\n\t            emitter.emit('dbltap', event);\n\t            listener.PreTapTime = null;\n\t          } else {\n\t            listener.PreTapTime = listener.endPoint.timeStamp;\n\t          }\n\t        }\n\t      }\n\t    };\n\t\n\t    //绑定组合事件\n\t    emitter.on(START_EVENT_NAME, listener.touchstart, capture);\n\t    emitter.on(MOVE_EVENT_NAME, listener.touchmove, capture);\n\t    emitter.on(END_EVENT_NAME, listener.done, capture);\n\t  },\n\t\n\t  removeListener: function /*istanbul ignore next*/removeListener(emitter, name, listener, capture) {\n\t    //只有指定了 handler 才能取消构成组合事件的 “原事件”\n\t    //否则会直接移除会将其他 touchstart 等事件也移除\n\t    if (utils.isFunction(listener)) {\n\t      if (utils.isFunction(listener.touchstart)) {\n\t        emitter.off(START_EVENT_NAME, listener.touchstart, capture);\n\t      }\n\t      if (utils.isFunction(listener.touchmove)) {\n\t        emitter.off(MOVE_EVENT_NAME, listener.touchmove, capture);\n\t      }\n\t      if (utils.isFunction(listener.done)) {\n\t        emitter.off(END_EVENT_NAME, listener.done, capture);\n\t      }\n\t    }\n\t  },\n\t\n\t  install: function /*istanbul ignore next*/install(mokit) {\n\t    mokit.EventEmitter.register(this);\n\t    mokit.Touch = this;\n\t  }\n\t\n\t};\n\n/***/ },\n/* 49 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// js/bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1919e463f377333c7b80","const mokit = require('mokit');\nconst Router = require('mokit-router');\nconst Touch = require('mokit-touch');\n\nrequire('./assets/common.less');\n\nmokit.use(Router);\nmokit.use(Touch);\n\nconst router = new Router();\n\n\n// WEBPACK FOOTER //\n// ./src/app.js","const info = require('./info.json');\nconst utils = require('ntils');\nconst Class = require('cify');\nconst Watcher = require('./watcher');\nconst Observer = require('./observer');\nconst Template = require('./template');\nconst Component = require('./component');\nconst EventEmitter = require('./events');\n\n//持载模板相关对象\nutils.copy(Template, Component);\n\nComponent.version = info.version;\nComponent.Template = Template;\nComponent.Watcher = Watcher;\nComponent.Observer = Observer;\nComponent.EventEmitter = EventEmitter;\nComponent.utils = utils;\nComponent.Class = Class;\n\n//定义安装插件的方法\nComponent.use = function (plugin) {\n  let install = plugin.install || plugin;\n  if (!utils.isFunction(install)) {\n    throw new Error('Invalid Plugin');\n  }\n  return install.call(plugin, this);\n};\n\n//安装内置的路由插件\n//Component.use(Router);\n\nmodule.exports = Component;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/index.js","module.exports = {\n\t\"name\": \"mokit\",\n\t\"version\": \"3.0.5\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.3.0.5@mokit/lib/info.json\n// module id = 2\n// module chunks = 0","(function (ntils) {\n\n  /**\n   * 空函数\n   */\n  ntils.noop = function () { };\n\n  /**\n   * 验证一个对象是否为NULL\n   * @method isNull\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  ntils.isNull = function (obj) {\n    return obj === null || typeof obj === \"undefined\";\n  };\n\n  /**\n   * 除去字符串两端的空格\n   * @method trim\n   * @param  {String} str 源字符串\n   * @return {String}     结果字符串\n   * @static\n   */\n  ntils.trim = function (str) {\n    if (this.isNull(str)) return str;\n    if (str.trim) {\n      return str.trim();\n    } else {\n      return str.replace(/(^[\\\\s]*)|([\\\\s]*$)/g, \"\");\n    }\n  };\n\n  /**\n   * 替换所有\n   * @method replace\n   * @param {String} str 源字符串\n   * @param {String} str1 要替换的字符串\n   * @param {String} str2 替换为的字符串\n   * @static\n   */\n  ntils.replace = function (str, str1, str2) {\n    if (this.isNull(str)) return str;\n    return str.replace(new RegExp(str1, 'g'), str2);\n  };\n\n  /**\n   * 从字符串开头匹配\n   * @method startWith\n   * @param {String} str1 源字符串\n   * @param {String} str2 要匹配的字符串\n   * @return {Boolean} 匹配结果\n   * @static\n   */\n  ntils.startWith = function (str1, str2) {\n    if (this.isNull(str1) || this.isNull(str2)) return false;\n    return str1.indexOf(str2) === 0;\n  };\n\n  /**\n   * 是否包含\n   * @method contains\n   * @param {String} str1 源字符串\n   * @param {String} str2 检查包括字符串\n   * @return {Boolean} 结果\n   * @static\n   */\n  ntils.contains = function (str1, str2) {\n    var self = this;\n    if (this.isNull(str1) || this.isNull(str2)) return false;\n    return str1.indexOf(str2) > -1;\n  };\n\n  /**\n   * 从字符串结束匹配\n   * @method endWidth\n   * @param {String} str1 源字符串\n   * @param {String} str2 匹配字符串\n   * @return {Boolean} 匹配结果\n   * @static\n   */\n  ntils.endWith = function (str1, str2) {\n    if (this.isNull(str1) || this.isNull(str2)) return false;\n    return str1.indexOf(str2) === (str1.length - str2.length);\n  };\n\n  /**\n   * 是否包含属性\n   * @method hasProperty\n   * @param  {Object}  obj  对象\n   * @param  {String}  name 属性名\n   * @return {Boolean}      结果\n   * @static\n   */\n  ntils.has = ntils.hasProperty = function (obj, name) {\n    if (this.isNull(obj) || this.isNull(name)) return false;\n    return (name in obj) || (obj.hasOwnProperty(name));\n  };\n\n  /**\n   * 验证一个对象是否为Function\n   * @method isFunction\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  ntils.isFunction = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === \"function\";\n  };\n\n  /**\n   * 验证一个对象是否为String\n   * @method isString\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  ntils.isString = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === 'string' || obj instanceof String;\n  };\n\n  /**\n   * 验证一个对象是否为Number\n   * @method isNumber\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  ntils.isNumber = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === 'number' || obj instanceof Number;\n  };\n\n  /**\n   * 验证一个对象是否为Boolean\n   * @method isBoolean\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  ntils.isBoolean = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === 'boolean' || obj instanceof Boolean;\n  };\n\n  /**\n   * 验证一个对象是否为HTML Element\n   * @method isElement\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  ntils.isElement = function (obj) {\n    if (this.isNull(obj)) return false;\n    if (window.Element) {\n      return obj instanceof Element;\n    } else {\n      return (obj.tagName && obj.nodeType && obj.nodeName && obj.attributes && obj.ownerDocument);\n    }\n  };\n\n  /**\n   * 验证一个对象是否为HTML Text Element\n   * @method isText\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  ntils.isText = function (obj) {\n    if (this.isNull(obj)) return false;\n    return obj instanceof Text;\n  };\n\n  /**\n   * 验证一个对象是否为Object\n   * @method isObject\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  ntils.isObject = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === \"object\";\n  };\n\n  /**\n   * 验证一个对象是否为Array或伪Array\n   * @method isArray\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  ntils.isArray = function (obj) {\n    if (this.isNull(obj)) return false;\n    var v1 = Object.prototype.toString.call(obj) === '[object Array]';\n    var v2 = obj instanceof Array;\n    var v3 = !this.isString(obj) && this.isNumber(obj.length) && this.isFunction(obj.splice);\n    var v4 = !this.isString(obj) && this.isNumber(obj.length) && obj[0];\n    return v1 || v2 || v3 || v4;\n  };\n\n  /**\n   * 验证是不是一个日期对象\n   * @method isDate\n   * @param {Object} val   要检查的对象\n   * @return {Boolean}           结果\n   * @static\n   */\n  ntils.isDate = function (val) {\n    if (this.isNull(val)) return false;\n    return val instanceof Date;\n  };\n\n  /**\n   * 验证是不是一个正则对象\n   * @method isDate\n   * @param {Object} val   要检查的对象\n   * @return {Boolean}           结果\n   * @static\n   */\n  ntils.isRegexp = function (val) {\n    return val instanceof RegExp;\n  };\n\n  /**\n   * 转换为数组\n   * @method toArray\n   * @param {Array|Object} array 伪数组\n   * @return {Array} 转换结果数组\n   * @static\n   */\n  ntils.toArray = function (array) {\n    if (this.isNull(array)) return [];\n    return Array.prototype.slice.call(array);\n  };\n\n  /**\n   * 转为日期格式\n   * @method toDate\n   * @param {Number|String} val 日期字符串或整型数值\n   * @return {Date} 日期对象\n   * @static\n   */\n  ntils.toDate = function (val) {\n    var self = this;\n    if (self.isNumber(val))\n      return new Date(val);\n    else if (self.isString(val))\n      return new Date(self.replace(self.replace(val, '-', '/'), 'T', ' '));\n    else if (self.isDate(val))\n      return val;\n    else\n      return null;\n  };\n\n  /**\n   * 遍历一个对像或数组\n   * @method each\n   * @param  {Object or Array}   obj  要遍历的数组或对象\n   * @param  {Function} fn            处理函数\n   * @return {void}                   无返回值\n   * @static\n   */\n  ntils.each = function (list, handler, scope) {\n    if (this.isNull(list) || this.isNull(handler)) return;\n    if (this.isArray(list)) {\n      var listLength = list.length;\n      for (var i = 0; i < listLength; i++) {\n        var rs = handler.call(scope || list[i], i, list[i]);\n        if (!this.isNull(rs)) return rs;\n      }\n    } else {\n      for (var key in list) {\n        var rs = handler.call(scope || list[key], key, list[key]);\n        if (!this.isNull(rs)) return rs;\n      }\n    }\n  };\n\n  /**\n   * 格式化日期\n   * @method formatDate\n   * @param {Date|String|Number} date 日期\n   * @param {String} format 格式化字符串\n   * @param {object} dict 反译字典\n   * @return {String} 格式化结果\n   * @static\n   */\n  ntils.formatDate = function (date, format, dict) {\n    if (this.isNull(format) || this.isNull(date)) return date;\n    date = this.toDate(date);\n    dict = dict || {};\n    var placeholder = {\n      \"M+\": date.getMonth() + 1, //month\n      \"d+\": date.getDate(), //day\n      \"h+\": date.getHours(), //hour\n      \"m+\": date.getMinutes(), //minute\n      \"s+\": date.getSeconds(), //second\n      \"w+\": date.getDay(), //week\n      \"q+\": Math.floor((date.getMonth() + 3) / 3), //quarter\n      \"S\": date.getMilliseconds() //millisecond\n    }\n    if (/(y+)/.test(format)) {\n      format = format.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n    }\n    for (var key in placeholder) {\n      if (new RegExp(\"(\" + key + \")\").test(format)) {\n        var value = placeholder[key];\n        value = dict[value] || value;\n        format = format.replace(RegExp.$1, RegExp.$1.length == 1\n          ? value : (\"00\" + value).substr((\"\" + value).length));\n      }\n    }\n    return format;\n  };\n\n  /**\n   * 拷贝对象\n   * @method copy\n   * @param {Object} src 源对象\n   * @param {Object} dst 目标对象\n   * @static\n   */\n  ntils.copy = function (src, dst, igonres) {\n    dst = dst || (this.isArray(src) ? [] : {});\n    this.each(src, function (key) {\n      if (igonres && igonres.indexOf(key) > -1) return;\n      delete dst[key];\n      if (Object.getOwnPropertyDescriptor) {\n        try {\n          Object.defineProperty(dst, key, Object.getOwnPropertyDescriptor(src, key));\n        } catch (ex) {\n          dst[key] = src[key];\n        }\n      } else {\n        dst[key] = src[key];\n      }\n    })\n    return dst;\n  };\n\n  /**\n   * 深度克隆对象\n   * @method clone\n   * @param {Object} src 源对象\n   * @return {Object} 新对象\n   * @static\n   */\n  ntils.clone = function (src, igonres) {\n    if (this.isNull(src) ||\n      this.isString(src) ||\n      this.isNumber(src) ||\n      this.isBoolean(src) ||\n      this.isDate(src)) {\n      return src;\n    }\n    var objClone = src;\n    try {\n      objClone = new src.constructor();\n    } catch (ex) { }\n    this.each(src, function (key, value) {\n      if (objClone[key] != value && !this.contains(igonres, key)) {\n        if (this.isObject(value)) {\n          objClone[key] = this.clone(value, igonres);\n        } else {\n          objClone[key] = value;\n        }\n      }\n    }, this);\n    ['toString', 'valueOf'].forEach(function (key) {\n      if (this.contains(igonres, key)) return;\n      this.defineFreezeProp(objClone, key, src[key]);\n    }, this);\n    return objClone;\n  };\n\n  /**\n   * 合并对象\n   * @method mix\n   * @return 合并后的对象\n   * @param {Object} dst 目标对象\n   * @param {Object} src 源对象\n   * @param {Array} igonres 忽略的属性名,\n   * @param {Number} mode 模式\n   */\n  ntils.mix = function (dst, src, igonres, mode) {\n    //根据模式来判断，默认是Obj to Obj的  \n    if (mode) {\n      switch (mode) {\n        case 1: // proto to proto  \n          return ntils.mix(dst.prototype, src.prototype, igonres, 0);\n        case 2: // object to object and proto to proto  \n          ntils.mix(dst.prototype, src.prototype, igonres, 0);\n          break; // pass through  \n        case 3: // proto to static  \n          return ntils.mix(dst, src.prototype, igonres, 0);\n        case 4: // static to proto  \n          return ntils.mix(dst.prototype, src, igonres, 0);\n        default: // object to object is what happens below  \n      }\n    }\n    //---\n    src = src || {};\n    dst = dst || (this.isArray(src) ? [] : {});\n    this.keys(src).forEach(function (key) {\n      if (this.contains(igonres, key)) return;\n      if (this.isObject(src[key]) &&\n        (src[key].constructor == Object ||\n          src[key].constructor == Array ||\n          src[key].constructor == null)) {\n        dst[key] = ntils.mix(dst[key], src[key], igonres, 0);\n      } else {\n        dst[key] = src[key];\n      }\n    }, this);\n    return dst;\n  };\n\n  /**\n   * 定义不可遍历的属性\n   **/\n  ntils.defineFreezeProp = function (obj, name, value) {\n    try {\n      Object.defineProperty(obj, name, {\n        value: value,\n        enumerable: false,\n        configurable: true, //能不能重写定义\n        writable: false //能不能用「赋值」运算更改\n      });\n    } catch (err) {\n      obj[name] = value;\n    }\n  };\n\n  /**\n   * 获取所有 key \n   */\n  ntils.keys = function (obj) {\n    if (Object.keys) return Object.keys(obj);\n    var keys = [];\n    this.each(obj, function (key) {\n      keys.push(key);\n    });\n    return keys;\n  };\n\n  /**\n   * 创建一个对象\n   */\n  ntils.create = function (proto, props) {\n    if (Object.create) return Object.create(proto, props);\n    var Cotr = function () { };\n    Cotr.prototype = proto;\n    var obj = new Cotr();\n    if (props) this.copy(props, obj);\n    return obj;\n  };\n\n  /**\n   * 设置 proto\n   * 在不支持 setPrototypeOf 也不支持 __proto__ 的浏览器\n   * 中，会采用 copy 方式\n   */\n  ntils.setPrototypeOf = function (obj, proto) {\n    if (Object.setPrototypeOf) {\n      return Object.setPrototypeOf(obj, proto || this.create(null));\n    } else {\n      if (!('__proto__' in Object)) this.copy(proto, obj);\n      obj.__proto__ = proto;\n    }\n  };\n\n  /**\n   * 获取 proto\n   */\n  ntils.getPrototypeOf = function (obj) {\n    if (obj.__proto__) return obj.__proto__;\n    if (Object.getPrototypeOf) return Object.getPrototypeOf(obj);\n    if (obj.constructor) return obj.constructor.prototype;\n  };\n\n  /**\n   * 是否深度相等\n   */\n  ntils.deepEqual = function (a, b) {\n    if (a === b) return true;\n    if (!this.isObject(a) || !this.isObject(b)) return false;\n    var aKeys = this.keys(a);\n    var bKeys = this.keys(b);\n    if (aKeys.length !== bKeys.length) return false;\n    var allKeys = aKeys.concat(bKeys);\n    var checkedMap = this.create(null);\n    var result = true;\n    this.each(allKeys, function (i, key) {\n      if (checkedMap[key]) return;\n      if (!this.deepEqual(a[key], b[key])) result = false;\n      checkedMap[key] = true;\n    }, this);\n    return result;\n  };\n\n  /**\n   * 从一个数值循环到别一个数\n   * @param {number} fromNum 开始数值\n   * @param {Number} toNum 结束数值\n   * @param {Number} step 步长值\n   * @param {function} handler 执行函数\n   * @returns {void} 无返回\n   */\n  ntils.fromTo = function (fromNum, toNum, step, handler) {\n    if (!handler) handler = [step, step = handler][0];\n    step = Math.abs(step || 1);\n    if (fromNum < toNum) {\n      for (var i = fromNum; i <= toNum; i += step) handler(i);\n    } else {\n      for (var i = fromNum; i >= toNum; i -= step) handler(i);\n    }\n  };\n\n  /**\n   * 生成一个Guid\n   * @method newGuid\n   * @return {String} GUID字符串\n   * @static\n   */\n  ntils.newGuid = function () {\n    var S4 = function () {\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    };\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n  };\n\n  /**\n   * 对象变换\n   **/\n  ntils.map = function (list, fn) {\n    var buffer = this.isArray(list) ? [] : {};\n    this.each(list, function (name, value) {\n      buffer[name] = fn(name, value);\n    });\n    return buffer;\n  };\n\n  /**\n   * 通过路径设置属性值\n   */\n  ntils.setByPath = function (obj, path, value) {\n    if (this.isNull(obj) || this.isNull(path) || path === '') {\n      return;\n    }\n    if (!this.isArray(path)) {\n      path = path.replace(/\\[/, '.').replace(/\\]/, '.').split('.');\n    }\n    this.each(path, function (index, name) {\n      if (this.isNull(name) || name.length < 1) return;\n      if (index === path.length - 1) {\n        obj[name] = value;\n      } else {\n        obj[name] = obj[name] || {};\n        obj = obj[name];\n      }\n    }, this);\n  };\n\n  /**\n   * 通过路径获取属性值\n   */\n  ntils.getByPath = function (obj, path) {\n    if (this.isNull(obj) || this.isNull(path) || path === '') {\n      return obj;\n    }\n    if (!this.isArray(path)) {\n      path = path.replace(/\\[/, '.').replace(/\\]/, '.').split('.');\n    }\n    this.each(path, function (index, name) {\n      if (this.isNull(name) || name.length < 1) return;\n      if (!this.isNull(obj)) obj = obj[name];\n    }, this);\n    return obj;\n  };\n\n  /**\n   * 数组去重\n   **/\n  ntils.unique = function (array) {\n    if (this.isNull(array)) return array;\n    var newArray = [];\n    this.each(array, function (i, value) {\n      if (newArray.indexOf(value) > -1) return;\n      newArray.push(value);\n    });\n    return newArray;\n  };\n\n  /**\n   * 解析 function 的参数列表\n   **/\n  ntils.getFunctionArgumentNames = function (fn) {\n    if (!fn) return [];\n    var src = fn.toString();\n    var parts = src.split(')')[0].split('=>')[0].split('(');\n    return (parts[1] || parts[0]).split(',').map(function (name) {\n      return name.trim();\n    }).filter(function (name) {\n      return name != 'function';\n    });\n  };\n\n  /**\n   * 缩短字符串\n   */\n  ntils.short = function (str, maxLength) {\n    if (!str) return str;\n    maxLength = maxLength || 40;\n    var strLength = str.length;\n    var trimLength = maxLength / 2;\n    return strLength > maxLength ? str.substr(0, trimLength) + '...' + str.substr(strLength - trimLength) : str;\n  };\n\n  /**\n   * 首字母大写\n   */\n  ntils.firstUpper = function (str) {\n    if (this.isNull(str)) return;\n    str[0] = str[0].toLowerCase();\n    return str;\n  };\n\n  /**\n   * 解析字符串为 dom \n   * @param {string} str 字符串\n   * @returns {HTMLNode} 解析后的 DOM \n   */\n  ntils.parseDom = function (str) {\n    this._PDD_ = this._PDD_ || document.createElement('div');\n    this._PDD_.innerHTML = ntils.trim(str);\n    var firstNode = this._PDD_.childNodes[0];\n    //先 clone 一份再通过 innerHTML 清空\n    //否则 IE9 下，清空时会导出返回的 DOM 没有子结点\n    if (firstNode) firstNode = firstNode.cloneNode(true);\n    this._PDD_.innerHTML = '';\n    return firstNode;\n  };\n\n})((typeof exports === 'undefined') ? (window.ntils = {}) : exports);\n\n\n// WEBPACK FOOTER //\n// ./~/.2.0.14@ntils/index.js","const utils = require('ntils');\n\nfunction ClassFactory(options) {\n  //处理 options\n  options = options || utils.create(null);\n  options.$name = options.$name || 'Class';\n  options.$extends = options.$extends || ClassFactory;\n  options.$static = options.$static || utils.create(null);\n  //处理父类 prototype\n  var superPrototype = utils.isFunction(options.$extends) ?\n    options.$extends.prototype : options.$extends;\n  //定义新类\n  var Class = function () {\n    //处理 super\n    if (!this.$super) {\n      utils.defineFreezeProp(this, '$super', function () {\n        if (this._super_called_) return this._super_ret_;\n        this._super_called_ = true;\n        if (utils.isFunction(options.$extends)) {\n          var proto = utils.getPrototypeOf(this);\n          this._super_ret_ = options.$extends.apply(this, arguments);\n          utils.setPrototypeOf(proto, this._super_ret_);\n        } else {\n          this._super_ret_ = options.$extends;\n        }\n        return this._super_ret_;\n      });\n      for (var name in superPrototype) {\n        var value = superPrototype[name];\n        if (utils.isFunction(value)) {\n          this.$super[name] = value.bind(this);\n        } else {\n          this.$super[name] = value;\n        }\n      }\n    }\n    //调用构造\n    if (utils.isFunction(options.constructor) &&\n      options.constructor !== Object) {\n      return options.constructor.apply(this, arguments);\n    } else {\n      //如果没有实现 constructor 则调用父类构造\n      this.$super.apply(this, arguments);\n    }\n  };\n  //处理 prototype\n  Class.prototype = utils.create(superPrototype);\n  utils.copy(options, Class.prototype);\n  utils.defineFreezeProp(Class.prototype, '$class', Class);\n  //处理静态成员\n  utils.copy(options.$static, Class);\n  if (utils.isFunction(options.$extends)) {\n    utils.setPrototypeOf(Class, options.$extends);\n  }\n  if (!options.$extends.$extend) {\n    utils.copy(ClassFactory, Class);\n  }\n  utils.defineFreezeProp(Class, '$super', options.$extends);\n  //--\n  return Class;\n}\n\n//定义扩展方法\nClassFactory.$extend = function (options) {\n  options.$extends = this;\n  return new ClassFactory(options);\n};\n\nClassFactory.Class = ClassFactory;\nmodule.exports = ClassFactory;\n\n\n// WEBPACK FOOTER //\n// ./~/.2.1.10@cify/index.js","const Class = require('cify');\nconst utils = require('ntils');\n\n/**\n * Watcher 类\n * 通过「计算函数」、「执行函数」可以创建一个 Watcher 实例\n */\nconst Watcher = new Class({\n\n  /**\n   * 通过「计算函数」、「执行函数」构建一个 Watcher 实例\n   * @param {function} calcor 计算函数\n   * @param {function} handler 处理函数\n   * @param {boolean} first 是否自动执行第一次\n   * @returns {void} 无返回\n   */\n  constructor: function (calcor, handler, first) {\n    if (!utils.isFunction(calcor) || !utils.isFunction(handler)) {\n      throw new Error('Invalid parameters');\n    }\n    this.calcor = calcor;\n    this.handler = handler;\n    if (first) this.calc(true);\n  },\n\n  /**\n   * 执行计算\n   * @param {boolean} force 是否强制触发「计算函数」\n   * @returns {Object} 计算后的值\n   */\n  calc: function (force) {\n    let newValue = this.calcor();\n    if (force || !utils.deepEqual(newValue, this.value)) {\n      this.handler(newValue, this.value);\n    }\n    this.value = utils.clone(newValue);\n  }\n\n});\n\nmodule.exports = Watcher;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/watcher/index.js","const Class = require('cify');\nconst utils = require('ntils');\nconst EventEmitter = require('../events');\n\nconst OBSERVER_PROP_NAME = '_observer_';\nconst CHANGE_EVENT_NAME = 'change';\nconst EVENT_MAX_DISPATCH_LAYER = 20;\nconst IGNORE_REGEXPS = [/^\\_(.*)\\_$/i, /^\\_\\_/i];\n\n/**\n * 对象观察类，可以监控对象变化\n * 目前方案问题:\n *   对于父子关系和事件冒泡，目前方案如果用 delete 删除一个属性，无关真实删除关系，\n *   即便调用 clearReference 也无法再清除关系，子对象的 parents 中会一直有一个引用，当前方案最高效\n * 其它方法一:\n *   将「关系」放入全局数组中，然后将 ob.parents 变成一个「属性」从全局数组件中 filter 出来，\n *   基本和目前方法类似，但是关系在外部存领教，所以 clearReference 可清除。\n * 其它方案二: \n *   构造时添加到全局数组，每一个 observer change 时都让放到全局的 observer 遍历自身的，\n *   检果事件源是不是自已的子对象，如果是则触发自身 change 事件，这样 ob 对象本身没有相关引用\n *   clearReference 时只从全局清除掉就行了，并且 delete 操作也不会影响，但效率稍差。\n * 其它方案三: \n *   给构造函数添加一个 deep 属性，只有 deep 的 ob 对象，才放入到全局数组中，检查时逻辑同方案二\n *   但是因为要检查的对象会少很多，效率会更高一点。\n */\nconst Observer = new Class({\n  $extends: EventEmitter,\n\n  /**\n   * 通过目标对象构造一个观察对象\n   * @param {Object} target 目标对象\n   * @param {Object} options 选项\n   * @returns {void} 无返回\n   */\n  constructor: function (target, options) {\n    if (utils.isNull(target)) {\n      throw new Error('Invalid target');\n    }\n    options = options || {};\n    let observer = target[OBSERVER_PROP_NAME];\n    if (observer) {\n      utils.copy(options, observer.options);\n      if (observer.options.root) {\n        observer.parents.length = 0;\n      }\n      observer.apply();\n      return observer;\n    }\n    EventEmitter.call(this);\n    utils.defineFreezeProp(this, 'options', options);\n    utils.defineFreezeProp(this, 'shadow', {});\n    utils.defineFreezeProp(this, 'target', target);\n    utils.defineFreezeProp(this, 'parents', []);\n    utils.defineFreezeProp(target, OBSERVER_PROP_NAME, this);\n    this.apply();\n  },\n\n  /**\n   * 添加一个属性，动态添中的属性，无法被观察，\n   * 但是通过 set 方法添加的属性可能被观察。\n   * @param {string} name 名称\n   * @param {Object} value 值\n   * @returns {void} 无返回\n   */\n  set: function (name, value) {\n    if (utils.isFunction(value) || Observer.isIgnore(name)) {\n      return;\n    }\n    Object.defineProperty(this.target, name, {\n      get: function () {\n        return this[OBSERVER_PROP_NAME].shadow[name];\n      },\n      set: function (value) {\n        let observer = this[OBSERVER_PROP_NAME];\n        let oldValue = observer.shadow[name];\n        if (oldValue === value) return;\n        if (utils.isObject(value)) {\n          let childObserver = new Observer(value);\n          observer.addChild(childObserver, name);\n        }\n        //移除旧值的父引用\n        //如果用 delete 删除属性将无法移除父子引用\n        if (oldValue && oldValue[OBSERVER_PROP_NAME]) {\n          observer.removeChild(oldValue[OBSERVER_PROP_NAME], name);\n        }\n        observer.shadow[name] = value;\n        observer.emitChange({ path: name, value: value });\n      },\n      configurable: true,\n      enumerable: true\n    });\n    this.target[name] = value;\n  },\n\n  /**\n   * 自动应用所有动态添加的属性\n   * @returns {void} 无返回\n   */\n  apply: function () {\n    if (utils.isArray(this.target)) {\n      this._wrapArray(this.target);\n    }\n    let names = this._getPropertyNames(this.target);\n    names.forEach(function (name) {\n      let desc = Object.getOwnPropertyDescriptor(this.target, name);\n      if (!('value' in desc)) return;\n      this.set(name, this.target[name]);\n    }, this);\n  },\n\n  /**\n   * 清除所有父子引用\n   * @returns {void} 无返回\n   */\n  clearReference: function () {\n    utils.each(this.target, function (name, value) {\n      if (utils.isNull(value)) return;\n      let child = value[OBSERVER_PROP_NAME];\n      if (child) this.removeChild(child);\n    }, this);\n  },\n\n  /**\n   * 派发一个事件，事件会向父级对象冒泡\n   * @param {string} eventName 事件名称\n   * @param {Object} event 事件对象\n   * @returns {void} 无返回\n   */\n  dispatch: function (eventName, event) {\n    if (event._src_ === this) return;\n    event._src_ = event._src_ || this;\n    event._layer_ = event._layer_ || 0;\n    event._layer_++;\n    if (event._layer_ >= EVENT_MAX_DISPATCH_LAYER) return;\n    this.emit(eventName, event);\n    if (!this.parents || this.parents.length < 1) return;\n    this.parents.forEach(function (item) {\n      if (!(item.name in item.parent.target)) {\n        return item.parent.removeChild(this);\n      }\n      let parentEvent = utils.copy(event);\n      parentEvent.path = item.name + '.' + event.path;\n      item.parent.dispatch(eventName, parentEvent);\n    }, this);\n  },\n\n  /**\n   * 添子观察者对象\n   * @param {Object} child 父对象\n   * @param {String} name 属性名\n   * @returns {void} 无返回\n   */\n  addChild: function (child, name) {\n    if (utils.isNull(child) || utils.isNull(name)) {\n      throw new Error('Invalid paramaters');\n    }\n    if (child.options.root) return;\n    child.parents.push({ parent: this, name: name });\n  },\n\n  /**\n   * 移除子对象\n   * @param {Object} child 父对象\n   * @param {String} name 属性名\n   * @returns {void} 无返回\n   */\n  removeChild: function (child, name) {\n    if (utils.isNull(child)) {\n      throw new Error('Invalid paramaters');\n    }\n    let foundIndex = -1;\n    child.parents.forEach(function (item, index) {\n      if (item.parent === this && item.name === name) {\n        foundIndex = index;\n      }\n    }, this);\n    if (foundIndex > -1) {\n      child.parents.splice(foundIndex, 1);\n    }\n  },\n\n  /**\n   * 触发 change 事件\n   * @param {Object} event 事件对象\n   * @returns {void} 无返回\n   */\n  emitChange: function (event) {\n    this.dispatch(CHANGE_EVENT_NAME, event);\n  },\n\n  /**\n   * 获取所有成员名称列表\n   * @returns {Array} 所有成员名称列表\n   */\n  _getPropertyNames: function () {\n    let names = utils.isArray(this.target) ?\n      this.target.map(function (item, index) {\n        return index;\n      }) : Object.keys(this.target);\n    return names.filter(function (name) {\n      return name !== OBSERVER_PROP_NAME;\n    });\n  },\n\n  /**\n   * 包裹数组\n   * @param {array} array 源数组\n   * @returns {array} 处理后的数组\n   */\n  _wrapArray: function (array) {\n    utils.defineFreezeProp(array, 'push', function () {\n      let items = [].slice.call(arguments);\n      items.forEach(function (item) {\n        //这里也会触发对应 index 的 change 事件\n        this[OBSERVER_PROP_NAME].set(array.length, item);\n      }, this);\n      this[OBSERVER_PROP_NAME].emitChange({ path: 'length', value: this.length });\n    });\n    utils.defineFreezeProp(array, 'pop', function () {\n      let item = [].pop.apply(this, arguments);\n      this[OBSERVER_PROP_NAME].emitChange({ path: this.length, value: item });\n      this[OBSERVER_PROP_NAME].emitChange({ path: 'length', value: this.length });\n      return item;\n    });\n    utils.defineFreezeProp(array, 'unshift', function () {\n      let items = [].slice.call(arguments);\n      items.forEach(function (item) {\n        //这里也会触发对应 index 的 change 事件\n        this[OBSERVER_PROP_NAME].set(0, item);\n      }, this);\n      this[OBSERVER_PROP_NAME].emitChange({ path: 'length', value: this.length });\n    });\n    utils.defineFreezeProp(array, 'shift', function () {\n      let item = [].shift.apply(this, arguments);\n      this[OBSERVER_PROP_NAME].emitChange({ path: 0, value: item });\n      this[OBSERVER_PROP_NAME].emitChange({ path: 'length', value: this.length });\n      return item;\n    });\n    utils.defineFreezeProp(array, 'splice', function () {\n      let startIndex = arguments[0];\n      let endIndex = utils.isNull(arguments[1])\n        ? startIndex + arguments[1]\n        : this.length - 1;\n      let items = [].splice.apply(this, arguments);\n      for (let i = startIndex; i <= endIndex; i++) {\n        this[OBSERVER_PROP_NAME].emitChange({ path: i, value: items[i - startIndex] });\n      }\n      this[OBSERVER_PROP_NAME].emitChange({ path: 'length', value: this.length });\n      return items;\n    });\n    utils.defineFreezeProp(array, 'set', function (index, value) {\n      if (index >= this.length) {\n        this[OBSERVER_PROP_NAME].emitChange({ path: 'length', value: this.length });\n      }\n      this[OBSERVER_PROP_NAME].set(index, value);\n    });\n  }\n\n});\n\n/**\n * 观察一个对象\n * @param {Object} target 目标对象\n * @return {Observer} 观察者对象\n */\nObserver.observe = function (target) {\n  return new Observer(target);\n};\n\n/**\n * 检查是不是忽略的属性名\n * @param {string} word 待检查的字符串\n * @returns {void} 无返回\n */\nObserver.isIgnore = function (word) {\n  return IGNORE_REGEXPS.some(re => re.test(word));\n};\n\nmodule.exports = Observer;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/observer/index.js","const utils = require('ntils');\nconst Class = require('cify');\n\n/**\n * 事件触发器基类\n */\nconst EventEmitter = new Class({\n  $extends: Function,\n\n  /**\n   * 构建一个一个事修的触发器对象\n   * @param {object} target 将代理的目标对象可以省略\n   * @returns {void} 无返回\n   */\n  constructor: function (target) {\n    target = target || this;\n    let emitter = target._emitter_;\n    if (emitter) return emitter;\n    utils.defineFreezeProp(this, '_target_', target);\n    utils.defineFreezeProp(target, '_emitter_', this);\n    this._isElement_ = utils.isElement(this._target_);\n    this._listeners_= this._listeners_|| {};\n    this.on = this.$on = this.$addListener = this.addListener;\n    this.off = this.$off = this.$removeListener = this.removeListener;\n    this.$emit = this.emit;\n  },\n\n  /**\n   * 添加一个事件监听函数\n   * @param {string} name 事件名称\n   * @param {function} listener 事件处理函数\n   * @param {capture} capture 是否是捕获阶段事件(只在代理 dom 对象时有效)\n   * @returns {void} 无返回\n   */\n  addListener: function (name, listener, capture) {\n    if (this._isElement_) {\n      this._addElementEventListener(name, listener, capture);\n    }\n    this._listeners_[name] = this._listeners_[name] || [];\n    this._listeners_[name].push(listener);\n    if (this._listeners_[name].length > EventEmitter._maxListeners) {\n      throw new Error('The `' + name + '` event listener is not more than 10');\n    }\n  },\n\n  /**\n   * 移除「一个/一组/所有」事件监听函数\n   * @param {string} name 事件名称\n   * @param {function} listener 事件处理函数\n   * @param {capture} capture 是否是捕获阶段事件(只在代理 dom 对象时有效)\n   * @returns {void} 无返回\n   */\n  removeListener: function (name, listener, capture) {\n    if (name && listener) {\n      if (this._isElement_) {\n        this._removeElementEventListener(name, listener, capture);\n      }\n      if (!this._listeners_[name]) return;\n      let index = this._listeners_[name].indexOf(listener);\n      this._listeners_[name].splice(index, 1);\n    } else if (name) {\n      if (this._isElement_ && this._listeners_[name]) {\n        this._listeners_[name].forEach(function (_listener) {\n          this.removeListener(name, _listener, capture);\n        }, this);\n      }\n      delete this._listeners_[name];\n    } else {\n      utils.each(this._listeners_, function (name) {\n        this.removeListener(name, null, capture);\n      }, this);\n      this._listeners_= {};\n    }\n  },\n\n  /**\n   * 触发自身的一个事件\n   * @param {string} name 事件名称\n   * @param {object} data 传递的对象\n   * @param {string} canBubble 能否冒泡(只在代理 dom 对象时有效)\n   * @param {object} cancelAble 能否取消(只在代理 dom 对象时有效)\n   * @returns {void} 无返回\n   */\n  emit: function (name, data, canBubble, cancelAble) {\n    if (this._isElement_) {\n      return this._emitElementEvent(name, data, canBubble, cancelAble);\n    }\n    if (!this._listeners_[name]) return;\n    let stopPropagation = false;\n    this._listeners_[name].forEach(function (handler) {\n      let rs = handler.call(this._target_, data);\n      if (rs === false) stopPropagation = true;\n    }, this);\n    return stopPropagation;\n  },\n\n  /**\n   * 添加 DOM 元素事件\n   * @param {string} name 事件名称\n   * @param {function} listener 事件处理函数\n   * @param {capture} capture 是否是捕获阶段事件\n   * @returns {void} 无返回\n   */\n  _addElementEventListener: function (name, listener, capture) {\n    this._target_.addEventListener(name, listener, capture);\n    //如果存在已注册的自定义 “组合事件”\n    let descriptor = EventEmitter._events[name];\n    if (descriptor) {\n      descriptor.addListener = descriptor.addListener || descriptor.on;\n      descriptor.addListener(this, name, listener, capture);\n    }\n  },\n\n  /**\n   * 移除 DOM 元素事件\n   * @param {string} name 事件名称\n   * @param {function} listener 事件处理函数\n   * @param {capture} capture 是否是捕获阶段事件\n   * @returns {void} 无返回\n   */\n  _removeElementEventListener: function (name, listener, capture) {\n    this._target_.removeEventListener(name, listener, capture);\n    //如果存在已注册的自定义 “组合事件”\n    let descriptor = EventEmitter._events[name];\n    if (descriptor) {\n      descriptor.removeListener = descriptor.removeListener || descriptor.off;\n      descriptor.removeListener(this, name, listener, capture);\n    }\n  },\n\n  /**\n   * 触发 DOM 元素事件\n   * @param {string} name 事件名称\n   * @param {object} data 传递的对象\n   * @param {string} canBubble 能否冒泡\n   * @param {object} cancelAble 能否取消\n   * @returns {void} 无返回\n   */\n  _emitElementEvent: function (name, data, canBubble, cancelAble) {\n    let event = document.createEvent('HTMLEvents');\n    event.initEvent(name, canBubble, cancelAble);\n    utils.copy(data, event, ['data']);\n    event.data = data;\n    return this._target_.dispatchEvent(event);\n  }\n\n});\n\n//最多添加多少个 listener\nEventEmitter._maxListeners = 10;\n\n//所有自定义事件\nEventEmitter._events = [];\n\n/**\n * 注册自定义事件(只在代理 dom 对象时有效)\n * @param {object} descriptor 事件定义\n * @returns {void} 无返回\n */\nEventEmitter.register = function (descriptor) {\n  let names = descriptor.name;\n  if (!names) return;\n  if (!utils.isArray(names)) names = names.split(',');\n  names.forEach(function (name) {\n    this._events[name] = descriptor;\n  }, this);\n};\n\nmodule.exports = EventEmitter;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/events/index.js","const Compiler = require('./compiler');\nconst Directive = require('./directive');\nconst Expression = require('./expression');\nconst Template = require('./template');\nconst directives = require('./directives/');\n\nTemplate.Template = Template;\nTemplate.Compiler = Compiler;\nTemplate.Directive = Directive;\nTemplate.directives = directives;\nTemplate.Expression = Expression;\n\nmodule.exports = Template;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/index.js","const Class = require('cify');\nconst Directive = require('./directive');\nconst utils = require('ntils');\nconst Expression = require('./expression');\nconst commonDirectives = require('./directives');\n\nconst DEFAULT_PREFIX = 'm';\n\n/**\n * 模板编译器\n * 可以通过指定「前缀」或「指令集」构建实例\n */\nconst Compiler = new Class({\n\n  /**\n   * 构造一个编译器\n   * @param {Object} options 选项\n   * @returns {void} 无返回\n   */\n  constructor: function (options) {\n    options = options || {};\n    this.prefix = options.prefix || DEFAULT_PREFIX;\n    this.elementDirectives = {};\n    this.attributeDirectives = {};\n    this.registerDirectives(commonDirectives);\n    this.registerDirectives(options.directives);\n  },\n\n  /**\n   * 添加指令\n   * @param {Object} directives 指令集 \n   * @returns {void} 无返回\n   */\n  registerDirectives: function (directives) {\n    utils.each(directives, function (name, directive) {\n      name = name.replace(/([A-Z])/g, '-$1');\n      if (name[0] == '-') name = name.slice(1);\n      let fullName = directive.options.prefix === false ?\n        name : `${this.prefix}:${name}`;\n      if (directive.options.type == Directive.TE) {\n        this.elementDirectives[fullName.toUpperCase()] = directive;\n      } else {\n        this.attributeDirectives[fullName] = directive;\n      }\n    }, this);\n  },\n\n  /**\n   * 解析要 attr 指令信息\n   * @param {string} attrName 要解析的名称字符串\n   * @returns {Object} 解析后的对象\n   */\n  _parseAttrInfo: function (attrName) {\n    let parts = attrName.toLowerCase().split(':');\n    let info = {};\n    if (parts.length > 1) {\n      info.name = `${parts[0]}:${parts[1]}`;\n      info.decorates = parts.slice(2);\n    } else {\n      info.name = parts[0];\n      info.decorates = [];\n    }\n    return info;\n  },\n\n  /**\n   * 创建一个指令实例\n   * @param {Directive} Directive 指令类\n   * @param {Object} options 指令构建选项\n   * @returns {Directive} 指令实例\n   */\n  _createDirectiveInstance: function (Directive, options) {\n    options.compiler = this;\n    options.prefix = this.prefix;\n    return new Directive(options);\n  },\n\n  /**\n   * 初始化一个编译完成的 handler\n   * @param {function} handler 编译后的的模板函数\n   * @returns {void} 无返回\n   */\n  _bindHandler: function (handler) {\n    //排序 directives\n    handler.directives = handler.directives.sort(function (a, b) {\n      return b.level - a.level;\n    });\n    //初始化 directives\n    let boundDirectives = [];\n    utils.each(handler.directives, function (index, directive) {\n      directive.index = index;\n      directive.bind();\n      boundDirectives.push(directive);\n      //移除完成绑定的指令对应的 attribute\n      if (directive.remove !== false && directive.attribute) {\n        directive.node.removeAttribute(directive.attribute.name);\n      }\n      //如果遇到一个「终态」指令，停止向下初始化\n      if (directive.final) {\n        return handler.final = true;\n      }\n    }, this);\n    handler.directives = boundDirectives;\n  },\n\n  /**\n   * 编译一个元素本身\n   * @param {function} handler 当前模板函数\n   * @param {HTMLNode} node 当前 HTML 结点\n   * @returns {void} 无返回\n   */\n  _compileElement: function (handler, node) {\n    let ElementDirective = this.elementDirectives[node.nodeName.toUpperCase()];\n    if (!ElementDirective) return;\n    handler.directives.push(this._createDirectiveInstance(ElementDirective, {\n      handler: handler,\n      node: node\n    }));\n  },\n\n  /**\n   * 编译一个元素所有 attributes \n   * @param {function} handler 当前模板函数\n   * @param {HTMLNode} node 当前 HTML 结点\n   * @returns {void} 无返回\n   */\n  _compileAttributes: function (handler, node) {\n    utils.toArray(node.attributes).forEach(function (attribute) {\n      let attrInfo = this._parseAttrInfo(attribute.name);\n      let AttrDirective = this.attributeDirectives[attrInfo.name] ||\n        this.attributeDirectives['*'];\n      if (!AttrDirective) return;\n      let directiveOptions = AttrDirective.options;\n      handler.directives.push(this._createDirectiveInstance(AttrDirective, {\n        handler: handler,\n        node: node,\n        attribute: attribute,\n        expression: directiveOptions.literal ?\n          attribute.value : new Expression(attribute.value, directiveOptions.mixed),\n        decorates: attrInfo.decorates\n      }));\n    }, this);\n  },\n\n  /**\n   * 编译所有子结点\n   * @param {function} handler 当前模板函数\n   * @param {HTMLNode} node 当前 HTML 结点\n   * @returns {void} 无返回\n   */\n  _compileChildren: function (handler, node) {\n    if (handler.final) return;\n    utils.toArray(node.childNodes).forEach(function (childNode) {\n      if (childNode._compiled_) return;\n      let childHandler = this.compile(childNode);\n      childHandler.parent = this;\n      handler.children.push(childHandler);\n    }, this);\n  },\n\n  /**\n   * 编译一个模板\n   * @param {HTMLNode} node 模板根元素\n   * @param {Object} options 选项\n   * @returns {function} 模板函数\n   */\n  compile: function (node, options) {\n    if (!node) {\n      throw new Error('Invalid node for compile');\n    }\n    node._compiled_ = true;\n    options = options || {};\n    //定义编译结果函数\n    let handler = function (scope) {\n      if (utils.isNull(scope)) scope = {};\n      handler.directives.forEach(function (directive) {\n        directive.scope = scope;\n        directive.execute(scope);\n      }, this);\n      handler.children.forEach(function (childHandler) {\n        childHandler(scope);\n      }, this);\n    };\n    //--\n    handler.dispose = function () {\n      handler.directives.forEach(function (directive) {\n        directive.unbind();\n      }, this);\n      handler.children.forEach(function (childHandler) {\n        childHandler.dispose();\n      }, this);\n    };\n    handler.node = node;\n    //定义 children & directives \n    handler.directives = [];\n    handler.children = [];\n    //编译相关指令\n    if (options.element !== false) this._compileElement(handler, node);\n    if (options.attribute !== false) this._compileAttributes(handler, node);\n    this._bindHandler(handler);\n    if (options.children !== false) this._compileChildren(handler, node);\n    //返回编译后函数\n    return handler;\n  }\n\n});\n\nmodule.exports = Compiler;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/compiler.js","const Class = require('cify');\nconst utils = require('ntils');\nconst Expression = require('./expression');\n\n/**\n * 指令定义工场函数\n * @param {Object} classOptions 选项\n * @returns {Directive} 指令类\n */\nfunction Directive(classOptions) {\n  //处理指令选项\n  classOptions = classOptions || {};\n  classOptions.type = classOptions.type || Directive.TA;\n  classOptions.level = classOptions.level || Directive.LG;\n\n  //生成指令类\n  const DirectiveClass = new Class({\n\n    $extends: classOptions,\n    //指令构建函数\n    constructor: function (instanceOptions) {\n      utils.copy(instanceOptions, this);\n    },\n    //挂载实例上的 options\n    options: classOptions,\n    //挂载实例核心方法\n    bind: classOptions.bind || utils.noop,\n    execute: classOptions.execute || function (scope) {\n      this.scope = scope;\n      if (this.options.type === Directive.TE) {\n        return this.update();\n      }\n      let newValue = this.options.literal ?\n        this.attribute.value : this.expression.execute(scope);\n      if (!utils.deepEqual(this._value_, newValue)) {\n        this.update(newValue, this._value_);\n        this._value_ = newValue;\n      }\n    },\n    update: classOptions.update || utils.noop,\n    unbind: classOptions.unbind || utils.noop,\n    //挂载指令常用的类型\n    utils: utils,\n    Expression: Expression\n  });\n  //向指令类添加「指令定义信息」\n  DirectiveClass.options = classOptions;\n  utils.setPrototypeOf(DirectiveClass, classOptions);\n  return DirectiveClass;\n}\n\n//指令类型\nDirective.TA = 'A';\nDirective.TE = 'E';\n\n//指令级别\nDirective.LP = 3000;  //prevent\nDirective.LS = 2000;  //statement\nDirective.LE = 1000;  //eleemtn\nDirective.LG = 0;     //general\nDirective.LA = -1000; //any attribute\nDirective.LC = -2000; //cloak\n\nmodule.exports = Directive;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directive.js","const Class = require('cify');\nconst utils = require('ntils');\n\n/**\n * 表达式类型，将字符串构析为可执行表达式实例\n */\nconst Expression = new Class({\n\n  /**\n   * 通过字符串构造一个表达式实例\n   * @param {string} code 代码字符串\n   * @param {boolean} mix 是否是混合代码\n   * @returns {void} 无返回\n   */\n  constructor: function (code, mix) {\n    this.func = mix ?\n      this._compileMixedCode(code) :\n      this._compileCode(code);\n  },\n\n  /**\n   * 编译普通表达式代码\n   * @param {string} code 代码字符串\n   * @returns {function} 编辑后的函数\n   */\n  _compileCode: function (code) {\n    code = this._escapeEOL(this._wrapCode(code));\n    return this._createFunction(code);\n  },\n\n  /**\n   * 编辑混合的表达式代码\n   * @param {string} code 代码字符串\n   * @returns {function} 编辑后的函数\n   */\n  _compileMixedCode: function (code) {\n    let statements = this._parseMixedCode(code);\n    code = this._escapeEOL(statements.join('+'));\n    return this._createFunction(code);\n  },\n\n  /**\n   * 通过符串代码创建一个可执行函数\n   * @param {string} code 代码字符串\n   * @returns {function} 创建的函数\n   */\n  _createFunction: function (code) {\n    let func = new Function('utils', 'scope', 'with(scope){return ' + code + '}');\n    return func.bind(null, utils);\n  },\n\n  /**\n   * 解析混合代码字符串\n   * @param {string} code 混合代码字符串\n   * @returns {Array} 解析后的「token」列表\n   */\n  _parseMixedCode: function (code) {\n    let index = 0, length = code.length;\n    let token = '', isExpr = false, tokens = [];\n    while (index <= length) {\n      let char = code[index++];\n      let nextChar = code[index];\n      if (utils.isNull(char)) {\n        if (token.length > 0) {\n          tokens.push('\"' + this._escapeCode(token) + '\"');\n        }\n        token = '';\n        isExpr = false;\n      } else if (!isExpr && char + nextChar == '{{') {\n        if (token.length > 0) {\n          tokens.push('\"' + this._escapeCode(token) + '\"');\n        }\n        token = '';\n        isExpr = true;\n        index++;\n      } else if (isExpr && char + nextChar == '}}') {\n        if (token.length > 0) {\n          tokens.push(this._wrapCode(token));\n        }\n        token = '';\n        isExpr = false;\n        index++;\n      } else {\n        token += char;\n      }\n    }\n    return tokens;\n  },\n\n  /**\n   * 转义处理代码字符串\n   * @param {string} code 源字符串\n   * @returns {string} 处理后的字符串\n   */\n  _escapeCode: function (code) {\n    return code.replace(/\"/, '\\\\\"').replace('\\r\\n', '\\\\r\\\\n').replace('\\n', '\\\\n');\n  },\n\n  /**\n   * 转义换行符\n   * @param {string} code 源字符串\n   * @returns {string} 处理后的字符串\n   */\n  _escapeEOL: function (code) {\n    return code.replace(/\\n/gm, '\\\\\\n');\n  },\n\n  /**\n   * 通过闭包和 try/cache 包裹代码\n   * 将模板中错误的代码直接显示在「模板中用到的位置」，更易于定位错误。\n   * @param {string} code 源字符串\n   * @returns {string} 处理后的字符串\n   */\n  _wrapCode: function (code) {\n    return '((function(){try{return (' + code + ')}catch(err){console.error(err);return err;}})())';\n  },\n\n  /**\n   * 通过 scope 对象执行表达式\n   * @param {Object} scope 上下文对象\n   * @returns {Object} 执行结果\n   */\n  execute: function (scope) {\n    if (utils.isNull(scope)) {\n      scope = {};\n    }\n    return this.func.call(scope, scope);\n  }\n\n});\n\nmodule.exports = Expression;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/expression.js","module.exports = {\n  '#text': require('./text'),\n  'each': require('./each'),\n  'if': require('./if'),\n  'prop': require('./prop'),\n  'attr': require('./attr'),\n  'on': require('./on'),\n  'html': require('./inner-html'),\n  'text': require('./inner-text'),\n  'prevent': require('./prevent'),\n  'id': require('./id'),\n  'cloak': require('./cloak'),\n  'show': require('./show'),\n  'model': require('./model'),\n  '*': require('./attribute') //处理所有未知 attr\n};\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/index.js","const Directive = require('../directive');\nconst Expression = require('../expression');\n\n\nmodule.exports = new Directive({\n  type: Directive.TE,\n  prefix: false,\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.expr = new Expression(this.node.nodeValue, true);\n    this.node.nodeValue = '';\n  },\n\n  execute: function (scope) {\n    this.scope = scope;\n    let newValue = this.expr.execute(scope);\n    if (this.node.nodeValue !== newValue) {\n      this.node.nodeValue = newValue;\n    }\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/text.js","const Directive = require('../directive');\nconst utils = require('ntils');\nconst Scope = require('../scope');\n\nmodule.exports = new Directive({\n  level: Directive.LS + 1, //比 if 要高一个权重\n  final: true,\n  literal: true,\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.mountNode = document.createTextNode('');\n    this.node.parentNode.insertBefore(this.mountNode, this.node);\n    //虽然，bind 完成后，也会进行 attribute 的移除，\n    //但 each 指令必须先移除，否再进行 item 编译时 each 还会生效\n    this.node.removeAttribute(this.attribute.name);\n    this.node.parentNode.removeChild(this.node);\n    this.parseExpr();\n    this.eachItems = {};\n  },\n\n  parseExpr: function () {\n    this.eachType = this.attribute.value.indexOf(' in ') > -1 ? 'in' : 'of';\n    let tokens = this.attribute.value.split(' ' + this.eachType + ' ');\n    let fnText = `with(scope){utils.each(${tokens[1]},fn.bind(this,${tokens[1]}))}`;\n    this.each = new Function('utils', 'scope', 'fn', fnText).bind(null, this.utils);\n    let names = tokens[0].split(',').map(function (name) {\n      return name.trim();\n    });\n    if (this.eachType == 'in') {\n      this.keyName = names[0];\n      this.valueName = names[1];\n    } else {\n      this.keyName = names[1];\n      this.valueName = names[0];\n    }\n  },\n\n  execute: function (scope) {\n    let currentEachKeys = [];\n    let itemsFragment = document.createDocumentFragment();\n    let self = this;\n    this.each(scope, function (eachTarget, key) {\n      //创建新 scope，必须选创建再设置 prototype 或采用定义「属性」的方式\n      //因为指令参数指定的名称有可能和 scope 原有变量冲突\n      //将导致针对 watch 变量的赋值，从引用发循环\n      let newScope = new Scope(this.scope);\n      if (self.keyName) {\n        Object.defineProperty(newScope, self.keyName, {\n          get() { return key; }\n        });\n      }\n      //value 采用「属性」进行代理，否则将会使「双向」绑定无把回设值\n      if (self.valueName) {\n        Object.defineProperty(newScope, self.valueName, {\n          get() { return eachTarget[key]; },\n          set(value) { eachTarget[key] = value; }\n        });\n      }\n      let oldItem = this.eachItems[key];\n      if (oldItem) {\n        oldItem.handler(newScope);\n      } else {\n        let newItem = {};\n        //创建新元素\n        newItem.node = this.node.cloneNode(true);\n        itemsFragment.appendChild(newItem.node);\n        newItem.handler = this.compiler.compile(newItem.node);\n        newItem.handler(newScope);\n        this.eachItems[key] = newItem;\n      }\n      currentEachKeys.push(key);\n    }.bind(this));\n    utils.each(this.eachItems, (key, item) => {\n      if (currentEachKeys.some(k => k == key)) return;\n      if (item.node.parentNode) {\n        item.node.parentNode.removeChild(item.node);\n      }\n      delete this.eachItems[key];\n    }, this);\n    if (itemsFragment.childNodes.length > 0) {\n      this.mountNode.parentNode.insertBefore(itemsFragment, this.mountNode);\n    }\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/each.js","const utils = require('ntils');\n\nconst Scope = function (parent, props) {\n  //新的 scope 因为「继承」了 _observer_ \n  //所以在新 scope 上进行双向绑定时，将将值成功回写\n  //如果有天不须用 utils.cteate 继承法，需要注意 _observer_ \n  //或在新 scope 上 defineProperty 代理 parentScope\n  let scope = utils.create(parent);\n  utils.copy(props, scope);\n  return scope;\n};\n\nmodule.exports = Scope;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/scope.js","const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  level: Directive.LS,\n  final: true,\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.mountNode = document.createTextNode('');\n    this.node.parentNode.insertBefore(this.mountNode, this.node);\n    //虽然，bind 完成后，也会进行 attribute 的移除，\n    //但 if 指令必须先移除，否再进行 item 编译时 if 还会生效\n    this.node.removeAttribute(this.attribute.name);\n    this.node.parentNode.removeChild(this.node);\n  },\n\n  execute: function (scope) {\n    let newValue = this.expression.execute(scope);\n    if (newValue) {\n      //如果新计算的结果为 true 才执行 \n      this._handler = this._handler || this.compiler.compile(this.node);\n      this._handler(scope);\n      let node = this.node.$substitute || this.node;\n      if (!node.parentNode) {\n        this.mountNode.parentNode.insertBefore(node, this.mountNode);\n      }\n    } else {\n      let node = this.node.$substitute || this.node;\n      if (node.parentNode) node.parentNode.removeChild(node);\n    }\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/if.js","const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  update: function (value) {\n    let target = this.node.$target || this.node;\n    target[this.decorates[0]] = value;\n  }\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/prop.js","const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  update: function (value) {\n    let target = this.node.$target || this.node;\n    if (target.setAttribute) {\n      target.setAttribute(this.decorates[0], value);\n    } else {\n      target[this.decorates[0]] = value;\n    }\n  }\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/attr.js","const Directive = require('../directive');\nconst EventEmitter = require('../../events');\nconst Scope = require('../scope');\n\nmodule.exports = new Directive({\n  literal: true,\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    let attrValue = this.attribute.value || '';\n    if (attrValue.indexOf('(') < 0 && attrValue.indexOf(')') < 0) {\n      attrValue += '($event)';\n    }\n    this.expr = new this.Expression(attrValue);\n    let eventTarget = this.node.$target || this.node;\n    this.emiter = new EventEmitter(eventTarget);\n    this.emiter.addListener(this.decorates[0], function (event) {\n      if (this.utils.isNull(this.scope)) return;\n      this.expr.execute(new Scope(this.scope, {\n        $event: event\n      }));\n    }.bind(this), false);\n  },\n\n  unbind: function () {\n    this.emiter.removeListener();\n  },\n\n  execute: function (scope) {\n    this.scope = scope;\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/on.js","const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  update: function (newValue) {\n    this.node.innerHTML = newValue;\n  }\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/inner-html.js","const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  update: function (newValue) {\n    this.node.innerText = newValue;\n  }\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/inner-text.js","const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  level: Directive.LP,\n  final: true\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/prevent.js","const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  literal: true,\n\n  update: function (id) {\n    if (id in this.scope) {\n      throw new Error('Conflicting component id `' + id + '`');\n    }\n    this.scope[id] = this.node.$target || this.node;\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/id.js","const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  level: Directive.LC,\n  literal: true,\n  prefix: false,\n\n  bind: function () {\n    this.node.removeAttribute(this.attribute.name);\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/cloak.js","const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  update: function (value) {\n    this.node.style.display = value ? '' : 'none';\n  }\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/show.js","const SelectDirective = require('./select');\nconst EditableDirective = require('./editable');\nconst InputDirective = require('./input');\nconst RadioDirective = require('./radio');\nconst CheckboxDirective = require('./checkbox');\nconst PropDirective = require('./prop');\n\nconst Directive = function (options) {\n  let node = options.node;\n  let tagName = node.tagName;\n  if (options.decorates[0]) {\n    return new PropDirective(options);\n  } else if (tagName == 'INPUT') {\n    let type = node.getAttribute('type');\n    if (type == 'radio') {\n      return new RadioDirective(options);\n    } else if (type == 'checkbox') {\n      return new CheckboxDirective(options);\n    } else {\n      return new InputDirective(options);\n    }\n  } else if (tagName == 'TEXTAREA') {\n    return new InputDirective(options);\n  } else if (tagName == 'SELECT') {\n    return new SelectDirective(options);\n  } else if (node.isContentEditable) {\n    return new EditableDirective(options);\n  } else {\n    throw new Error(`Directive \\`model\\` cannot be used on \\`${tagName}\\``);\n  }\n};\n\n//手动添加 classOptions\nDirective.options = {\n  level: Directive.LA\n};\n\nmodule.exports = Directive;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/model/index.js","const Directive = require('../../directive');\nconst EventEmitter = require('../../../events');\nconst Scope = require('../../scope');\n\nmodule.exports = new Directive({\n  final: true,\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.backExpr = new this.Expression(`${this.attribute.value}=_value_`);\n    this.node.removeAttribute(this.attribute.name);\n    this._handler = this.compiler.compile(this.node);\n    this.emiter = new EventEmitter(this.node);\n    this.emiter.addListener('change', function () {\n      if (this.utils.isNull(this.scope)) return;\n      let selectedOptions = this.node.selectedOptions;\n      let value = this.node.multiple\n        ? [].slice.call(selectedOptions).map(function (option) {\n          return option.value;\n        }, this)\n        : selectedOptions[0].value;\n      this.backExpr.execute(new Scope(this.scope, {\n        _value_: value\n      }));\n    }.bind(this), false);\n  },\n\n  unbind: function () {\n    this.emiter.removeListener();\n  },\n\n  execute: function (scope) {\n    this.scope = scope;\n    this._handler(scope);\n    let value = this.expression.execute(scope);\n    if (!this.utils.isArray(value)) value = [value];\n    [].slice.call(this.node.options).forEach(function (option) {\n      option.selected = value.indexOf(option.value) > -1;\n    }, this);\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/model/select.js","const Directive = require('../../directive');\nconst EventEmitter = require('../../../events');\nconst Scope = require('../../scope');\n\nmodule.exports = new Directive({\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.backExpr = new this.Expression(`${this.attribute.value}=_value_`);\n    this.emiter = new EventEmitter(this.node);\n    this.emiter.addListener('input', function () {\n      if (this.utils.isNull(this.scope)) return;\n      this.backExpr.execute(new Scope(this.scope, {\n        _value_: this.node.innerHTML\n      }));\n    }.bind(this), false);\n  },\n\n  unbind: function () {\n    this.emiter.removeListener();\n  },\n\n  execute: function (scope) {\n    let value = this.expression.execute(scope);\n    if (this.node.innerHTML !== value) {\n      this.node.innerHTML = value;\n    }\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/model/editable.js","const Directive = require('../../directive');\nconst EventEmitter = require('../../../events');\nconst Scope = require('../../scope');\n\nmodule.exports = new Directive({\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.backExpr = new this.Expression(`${this.attribute.value}=_value_`);\n    this.emiter = new EventEmitter(this.node);\n    this.emiter.addListener('input', function () {\n      if (this.utils.isNull(this.scope)) return;\n      this.backExpr.execute(new Scope(this.scope, {\n        _value_: this.node.value\n      }));\n    }.bind(this), false);\n  },\n\n  unbind: function () {\n    this.emiter.removeListener();\n  },\n\n  execute: function (scope) {\n    let value = this.expression.execute(scope);\n    if (this.node.value !== value) {\n      this.node.value = value;\n    }\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/model/input.js","const Directive = require('../../directive');\nconst EventEmitter = require('../../../events');\nconst Scope = require('../../scope');\n\nmodule.exports = new Directive({\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.backExpr = new this.Expression(`${this.attribute.value}=_value_`);\n    this.emiter = new EventEmitter(this.node);\n    this.emiter.addListener('change', function () {\n      if (this.utils.isNull(this.scope)) return;\n      this.backExpr.execute(new Scope(this.scope, {\n        _value_: this.node.value\n      }));\n    }.bind(this), false);\n  },\n\n  unbind: function () {\n    this.emiter.removeListener();\n  },\n\n  execute: function (scope) {\n    this.scope = scope;\n    let value = this.expression.execute(scope);\n    this.node.checked = value == this.node.value;\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/model/radio.js","const Directive = require('../../directive');\nconst EventEmitter = require('../../../events');\nconst Scope = require('../../scope');\n\nmodule.exports = new Directive({\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.backExpr = new this.Expression(`${this.attribute.value}=_value_`);\n    this.emiter = new EventEmitter(this.node);\n    this.emiter.addListener('change', function () {\n      if (this.utils.isNull(this.scope)) return;\n      let value = this.expression.execute(this.scope);\n      if (this.utils.isArray(value) && this.node.checked) {\n        value.push(this.node.value);\n      } else if (this.utils.isArray(value) && !this.node.checked) {\n        let index = value.indexOf(this.node.value);\n        value.splice(index, 1);\n      } else {\n        this.backExpr.execute(new Scope(this.scope, {\n          _value_: this.node.checked\n        }));\n      }\n    }.bind(this), false);\n  },\n\n  unbind: function () {\n    this.emiter.removeListener();\n  },\n\n  execute: function (scope) {\n    this.scope = scope;\n    let value = this.expression.execute(scope);\n    if (this.utils.isArray(value)) {\n      this.node.checked = value.indexOf(this.node.value) > -1;\n    } else {\n      this.node.checked = value;\n    }\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/model/checkbox.js","const Directive = require('../../directive');\nconst Scope = require('../../scope');\n\nmodule.exports = new Directive({\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.target = this.node.$target;\n    this.backExpr = new this.Expression(`${this.attribute.value}=_value_`);\n    this.bindProp = this.decorates[0];\n    if (!this.target) {\n      throw new Error(`Directive \\`model:${this.bindProp}\\` cannot be used on \\`${this.node.tagName}\\``);\n    }\n    this.watcher = this.target.$watch(this.bindProp, (value) => {\n      if (this.utils.isNull(this.scope)) return;\n      this.backExpr.execute(new Scope(this.scope, {\n        _value_: value\n      }));\n    });\n  },\n\n  unbind: function () {\n    this.target.$unWatch(this.watcher);\n  },\n\n  update: function (value) {\n    this.target[this.bindProp] = value;\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/model/prop.js","const Directive = require('../directive');\n\n/**\n * 通用的 attribute 指令\n * 用于所有 attribute 的处理\n * 例如:\n *  <div attr1=\"{{expr1}}\" {{expr2}} {{attr3}}=\"{{expr3}}\">\n *  </div>\n */\nmodule.exports = new Directive({\n  level: Directive.LA,\n  prefix: false,\n  literal: true,\n  remove: false,\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.computedName = this.attribute.name;\n    this.computedValue = this.attribute.value;\n    this.nameExpr = new this.Expression(this.attribute.name, true);\n    this.valueExpr = new this.Expression(this.attribute.value, true);\n  },\n\n  execute: function (scope) {\n    let target = this.node.$target || this.node;\n    let newComputedName = this.nameExpr.execute(scope);\n    if (this.computedName !== newComputedName) {\n      //移除旧名称\n      if (target.removeAttribute) {\n        target.removeAttribute(this.computedName);\n      }\n      //设置新名称\n      this.computedName = newComputedName;\n      if (!this.utils.isNull(this.computedName) && this.computedName.length > 0) {\n        if (target.setAttribute) {\n          target.setAttribute(this.computedName, this.computedValue || '');\n        }\n      }\n    }\n    let newComputeValue = this.valueExpr.execute(scope);\n    if (this.computedValue !== newComputeValue) {\n      this.computedValue = newComputeValue;\n      if (target.setAttribute) {\n        target.setAttribute(this.computedName, this.computedValue || '');\n      } else {\n        target[this.computedName] = this.computedValue;\n      }\n    }\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/directives/attribute.js","const Class = require('cify');\nconst Observer = require('../observer');\nconst EventEmitter = require('../events');\nconst Compiler = require('./compiler');\n\n/**\n * 模板类\n * 可能通过 element 作为参数，创建一个模板实例\n */\nconst Template = new Class({\n\n  $extends: EventEmitter,\n\n  /**\n   * 构建一个模板板实例\n   * @param {HTMLNode} element HTML 元素\n   * @param {Object} options 选项\n   * @returns {void} 无返回\n   */\n  constructor: function (element, options) {\n    options = options || {};\n    EventEmitter.call(this);\n    this.options = options;\n    this.element = element;\n    this.compiler = options.compiler || new Compiler(options);\n    this.render = this.compiler.compile(this.element);\n    this.update = this.update.bind(this);\n    this._update = this._update.bind(this);\n    this._updateTimer = 0;\n  },\n\n  /**\n   * 更新当前模板 (会过滤不必要的更新)\n   * @returns {void} 无返回\n   */\n  update: function () {\n    if (this._updateTimer) {\n      clearTimeout(this._updateTimer);\n      this._updateTimer = null;\n    }\n    this._updateTimer = setTimeout(this._update, 0);\n  },\n\n  /**\n   * 更新当前模板内部方法 \n   * @returns {void} 无返回\n   */\n  _update: function () {\n    if (!this._updateTimer || !this.observer) return;\n    this.emit('update', this);\n    this.render(this.observer.target);\n    this._onBind();\n  },\n\n  /**\n   * 在绑定成功时\n   * @returns {void} 无返回\n   */\n  _onBind: function () {\n    if (this._bound) return;\n    this._bound = true;\n    this.emit('bind', this);\n  },\n\n  /**\n   * 将模板绑定到一个 scope\n   * @param {Object} scope 绑定的上下文对象\n   * @param {boolean} disableFirst 是否禁用第一次的自动渲染\n   * @returns {void} 无返回\n   */\n  bind: function (scope, disableFirst) {\n    if (!scope) return;\n    this.unbind();\n    this.observer = new Observer(scope, {\n      root: this.options.root\n    });\n    scope.$self = scope;\n    this.observer.on('change', this.update);\n    if (disableFirst) {\n      this._onBind();\n    } else {\n      this.update();\n    }\n  },\n\n  /**\n   * 解绑定\n   * @returns {void} 无返回\n   */\n  unbind: function () {\n    if (!this.observer) return;\n    this.observer.removeListener('change', this.update);\n    this.observer.clearReference();\n    this.observer = null;\n  },\n\n  /**\n   * 释放\n   * @returns {void} 无返回\n   */\n  dispose: function () {\n    this.unbind();\n    this.render.dispose();\n  }\n\n});\n\nmodule.exports = Template;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/template/template.js","const Component = require('./component');\nconst components = require('./components');\nconst directives = require('../template').directives;\n\nComponent.components = components;\nComponent.Component = Component;\n\nComponent.component = function (name, component) {\n  if (!component) return components[name];\n  components[name] = component;\n};\n\nComponent.directive = function (name, directive) {\n  if (!directive) return directives[name];\n  directives[name] = directive;\n};\n\nmodule.exports = Component;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/component/index.js","const Class = require('cify');\nconst Template = require('../template');\nconst Watcher = require('../watcher');\nconst utils = require('ntils');\nconst EventEmitter = require('../events');\nconst Observer = require('../observer');\nconst ComponentDirective = require('./component-directive');\n\n/**\n * 组件类\n * 用于定义一个新的组件\n * @param {Object} classOpts 类选项\n * @returns {Component} 组件类\n */\nfunction Component(classOpts) {\n\n  //处理组件选项\n  classOpts = classOpts || {};\n\n  //处理「继承」，目前的机制，只能用「合并类选项」\n  let mixes = classOpts.mixes;\n  delete classOpts.mixes;\n  if (mixes && !utils.isArray(mixes)) {\n    mixes = [mixes];\n  } else {\n    mixes = [];\n  }\n  let extendComponent = classOpts.extend || Component;\n  delete classOpts.extend;\n  //extend 会覆盖 mixes 中的同名成员\n  mixes.push(extendComponent);\n  //classOpts 会覆盖 extend 或 mixes 中的同名成员\n  mixes.push(classOpts);\n  let mixedClassOpts = {};\n  mixes.forEach(function (mixItem) {\n    if (mixItem instanceof Component ||\n      mixItem == Component) {\n      mixItem = mixItem.$options || {};\n    }\n    utils.mix(mixedClassOpts, mixItem);\n  });\n  classOpts = mixedClassOpts;\n  /**\n   * 定义组件类\n   * 可以通过 new ComponentClass() 创建组件实例\n   */\n  const ComponentClass = new Class({\n    $extends: extendComponent,\n\n    /**\n     * 组件类构造函数\n     * @param {object} instanceOpts 实例选项\n     * @returns {void} 无返回\n     */\n    constructor: function (instanceOpts) {\n      if (this == window) return new this.$class(instanceOpts);\n      EventEmitter.call(this);\n      instanceOpts = instanceOpts || {};\n      this._onTemplateUpdate_ = this._onTemplateUpdate_.bind(this);\n      this._createdData_(classOpts.data);\n      this._createProperties_(classOpts.properties || classOpts.props);\n      this._createWatches_(classOpts.watches || classOpts.watch);\n      this.$directives = this.$directives || {};\n      this._importDirectives_(classOpts.directives);\n      this.$components = this.$components || {};\n      this._importComponents_(require('./components'));\n      this._importComponents_({ 'self': ComponentClass });\n      this._importComponents_(classOpts.components);\n      utils.defineFreezeProp(this, '$children', []);\n      if (instanceOpts.parent) this.$setParent(instanceOpts.parent);\n      this.$callHook('onInit');\n      Observer.observe(this);\n      if (classOpts.element) {\n        this.$mount();\n      } else {\n        this.$compile();\n      }\n    },\n\n    /**\n     * 设定父组件\n     * @param {Object} parent 父组件\n     * @returns {void} 无返回\n     */\n    $setParent: function (parent) {\n      if (this.$parent === parent) return;\n      if (this.$parent) {\n        this.$parent.$removeChild(this);\n      }\n      if (parent) {\n        parent.$addChild(this);\n      }\n    },\n\n    /**\n     * 添加子组件\n     * @param {Object} child 子组件\n     * @returns {void} 无返回\n     */\n    $addChild: function (child) {\n      if (!(child instanceof Component)) return;\n      this.$children.push(child);\n      utils.defineFreezeProp(child, '$parent', this);\n      utils.defineFreezeProp(child, '$root', this.$root || this);\n    },\n\n    /**\n     * 移除子组件\n     * @param {Object} child 子组件\n     * @returns {void} 无返回\n     */\n    $removeChild: function (child) {\n      let index = this.$children.indexOf(child);\n      this.$children.splice(index, 1);\n      utils.defineFreezeProp(child, '$parent', null);\n      //utils.defineFreezeProp(child, '$root', null);\n    },\n\n    /**\n     * 获取根组件, 为了能通过 polyfill 处理 IE8 暂不用这种方式\n     */\n    get $root() {\n      if (this.$parent) {\n        return this.$parent.$root;\n      } else {\n        return this;\n      }\n    },\n\n    /**\n     * 导入用到的子组件类\n     * @param {Object} components 引入的组件\n     * @returns {void} 无返回\n     */\n    _importComponents_: function (components) {\n      utils.each(components, function (name, component) {\n        this.$components[name] = component;\n        this.$directives[name] = new ComponentDirective({\n          name: name,\n          component: component,\n          parent: this\n        });\n      }, this);\n    },\n\n    /**\n     * 导入一个用到的指令\n     * @param {Object} directives 引入的指令\n     * @returns {void} 无返回\n     */\n    _importDirectives_: function (directives) {\n      utils.each(directives, function (name, directive) {\n        this.$directives[name] = directive;\n      }, this);\n    },\n\n    /**\n     * 调用生命周期 hook\n     * @param {string} name 调用的 hook 名称\n     * @param {Array} args 调用 hook 的参数列表\n     * @returns {void} 无反回\n     */\n    $callHook: function (name, args) {\n      if (!utils.isFunction(this[name])) return;\n      this[name].apply(this, args || []);\n    },\n\n    /**\n     * 创建数据对象\n     * @param {Object} data 组件数据对象\n     * @returns {void} 无返回\n     */\n    _createdData_: function (data) {\n      if (utils.isFunction(data)) {\n        this.$data = data.call(this);\n      } else {\n        this.$data = data || {};\n      }\n      utils.each(this.$data, function (name) {\n        Object.defineProperty(this, name, {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            if (!this.$data) return;\n            return this.$data[name];\n          },\n          set: function (value) {\n            if (!this.$data) return;\n            this.$data[name] = value;\n          }\n        });\n      }, this);\n    },\n\n    /**\n     * 创建组件属性\n     * @param {Object} properties 属性定义对象\n     * @returns {void} 无返回\n     */\n    _createProperties_: function (properties) {\n      this.$properties = {};\n      utils.each(properties, function (name, descriptor) {\n        if (utils.isFunction(descriptor)) {\n          descriptor = { get: descriptor };\n        } else if (!utils.isObject(descriptor)) {\n          descriptor = { value: descriptor };\n        } else {\n          //不能直接用 descriptor，\n          //因为为会导到多个组件实例间的影响\n          descriptor = utils.copy(descriptor);\n        }\n        let hasGetterOrSetter = !!descriptor.get || !!descriptor.set;\n        if (!hasGetterOrSetter) {\n          descriptor.value = descriptor.value || null;\n          descriptor.get = function () {\n            return descriptor.value;\n          };\n          descriptor.set = function (value) {\n            descriptor.value = value;\n          };\n        }\n        Object.defineProperty(this, name, {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            if (!descriptor.get) {\n              throw new Error('Property `' + name + '` cannot be read');\n            }\n            return descriptor.get.call(this);\n          },\n          set: function (value) {\n            if (!descriptor.set) {\n              throw new Error('Property `' + name + '` cannot be written');\n            }\n            if (descriptor.test && !descriptor.test(value)) {\n              throw new Error('Invalid value `' + value + '` for property `' + name + '`');\n            }\n            descriptor.set.call(this, value);\n            if (this._observer_) {\n              this._observer_.emitChange({ path: name, value: value });\n            }\n          }\n        });\n        this.$properties[name] = descriptor;\n      }, this);\n    },\n\n    /**\n     * 创建监控\n     * 为什么用 watches 而不是 watchers 或其它？\n     * 因为，这里仅是「监控配置」并且是「复数」\n     * @param {Object} watches 监控定义对象\n     * @returns {void} 无返回\n     */\n    _createWatches_: function (watches) {\n      this._watchers_ = this._watchers_ || [];\n      utils.each(watches, function (name, handler) {\n        this.$watch(name, handler);\n      }, this);\n    },\n\n    /**\n     * 在模板发生更新时\n     * @returns {void} 无返回\n     */\n    _onTemplateUpdate_: function () {\n      this._watchers_.forEach(function (watcher) {\n        watcher.calc();\n      }, this);\n    },\n\n    /**\n     * 添加一个监控\n     * @param {string|function} path 计算函数或路径\n     * @param {function} handler 处理函数\n     * @returns {void} 无返回\n     */\n    $watch: function (path, handler) {\n      if (!utils.isFunction(handler)) return;\n      let calcer = path;\n      if (!utils.isFunction(path)) {\n        calcer = function () {\n          return utils.getByPath(this, path);\n        };\n      }\n      let watcher = new Watcher(calcer.bind(this), handler.bind(this));\n      this._watchers_.push(watcher);\n      return watcher;\n    },\n\n    /**\n     * 取消一个 watcher 对象\n     * @param {object} watcher 监控对象实例\n     * @returns {void} 无返回\n     */\n    $unWatch: function (watcher) {\n      let index = this._watchers_.findIndex(w => w === watcher);\n      this._watchers_.splice(index, 1);\n    },\n\n    /**\n     * 创建元素\n     * @returns {void} 无返回\n     */\n    _createElement_: function () {\n      if (this._created_) return;\n      this._created_ = true;\n      this.$callHook('onCreate');\n      utils.defineFreezeProp(this, '$element',\n        this.element || ComponentClass.$template.cloneNode(true));\n      if (!this.$element || this.$element.nodeName === '#text') {\n        throw new Error('Invalid component template');\n      }\n      this.$callHook('onCreated');\n    },\n\n    /**\n     * 编译自身模板并完成绑定\n     * @returns {void} 无返回\n     */\n    $compile: function () {\n      if (this._compiled_) return;\n      this._compiled_ = true;\n      this._createElement_();\n      utils.defineFreezeProp(this, '_template_', new Template(this.$element, {\n        directives: this.$directives,\n        root: true\n      }));\n      this._template_.bind(this);\n      this._template_.on('update', this._onTemplateUpdate_);\n      this._template_.on('bind', function () {\n        if (!this.deferReady) this.$callHook('onReady');\n      }.bind(this));\n    },\n\n    /**\n     * 向 DOM tree 中挂截组件\n     * @param {HTMLNode} mountNode 挂载点元素\n     * @param {append} append 是否 append 到挂载元素内\n     * @returns {void} 无返回 \n     */\n    $mount: function (mountNode, append) {\n      if (this._mounted_) return;\n      this.$compile();\n      this.$callHook('onMount');\n      if (mountNode) {\n        mountNode.$substitute = this.$element;\n        this.$element._mountNode = mountNode;\n        if (append) {\n          mountNode.appendChild(this.$element);\n        } else if (mountNode.parentNode) {\n          mountNode.parentNode.insertBefore(this.$element, mountNode);\n        }\n      }\n      this._mounted_ = true;\n      this._removed_ = false;\n      this.$callHook('onMounted');\n    },\n\n    /**\n     * 将组件添加到指定容器元素内\n     * @param {HTMLNode} node 容器元素\n     * @returns {void} 无返回 \n     */\n    $appendTo: function (node) {\n      this.$mount(node, true);\n    },\n\n    /**\n     * 移除组件\n     * @returns {void} 无返回\n     */\n    $remove: function () {\n      if (this._removed_ || !this._mounted_) return;\n      this.$callHook('onRemove');\n      if (this.$element.parentNode) {\n        this.$element.parentNode.removeChild(this.$element);\n      }\n      this._removed_ = true;\n      this._mounted_ = false;\n      this.$callHook('onRemoved');\n    },\n\n    /**\n     * 触发自身的一个事件并向上冒泡\n     * @param {string} name 事件名称\n     * @param {object} data 传递的对象\n     * @returns {void} 无返回\n     */\n    $dispatch: function (name, data) {\n      let stopPropagation = this.$emit(name, data);\n      if (!stopPropagation && this.$parent) {\n        this.$parent.$dispatch(name, data);\n      }\n    },\n\n    /**\n     * 触发自身的一个事件并向下广播\n     * @param {string} name 事件名称\n     * @param {object} data 传递的对象\n     * @returns {void} 无返回\n     */\n    $broadcast: function (name, data) {\n      let stopPropagation = this.$emit(name, data);\n      if (!stopPropagation && this.$children && this.$children.length > 0) {\n        this.$children.forEach(function (child) {\n          child.$broadcast(name, data);\n        }, this);\n      }\n    },\n\n    /**\n     * 释放组件\n     * @returns {void} 无返回\n     */\n    $dispose: function () {\n      this.$remove();\n      this._emitter_.off();\n      this.$children.forEach(function (child) {\n        child.$dispose();\n      }, this);\n      if (this.$parent) {\n        let index = this.$parent.$children.indexOf(this);\n        this.$parent.$children.splice(index, 1);\n      }\n      this.$callHook('onDispose');\n      if (this._compiled_) {\n        this._template_.unbind();\n      }\n      this.$callHook('onDisposed');\n      for (let key in this) {\n        delete this[key];\n      }\n      ['_observer_', '$element', '$children', '$parent', '_template_']\n        .forEach(function (key) {\n          delete this[key];\n        }, this);\n      utils.setPrototypeOf(this, null);\n    }\n\n  });\n\n  //保存类选项\n  ComponentClass.$options = classOpts;\n  ComponentClass.$template = utils.parseDom(classOpts.template);\n\n  //向 ComponentClass.prototype 上拷贝成员\n  utils.copy(classOpts, ComponentClass.prototype);\n  utils.copy(classOpts.methods, ComponentClass.prototype);\n\n  //使 ComponentClass instanceof Component === true \n  //IE9/10 下为 false，并且动态为 Component.prototype 添加的成员不会在 ComponentClass 上生效\n  utils.setPrototypeOf(ComponentClass, Component.prototype);\n\n  return ComponentClass;\n\n}\n\n//继承自 EventEmitter\nComponent.prototype = utils.create(EventEmitter.prototype);\n\n//组件扩展方法，简单封装 extends\nComponent.extend = function (classOpts) {\n  return new Component(classOpts);\n};\n\n//定义扩展方法\nComponent.prototype.extend = function (classOpts) {\n  classOpts = classOpts || {};\n  classOpts.extend = this;\n  return new Component(classOpts);\n};\n\n//创建实例的方法\nComponent.prototype.create = function (instanceOpts) {\n  return new this(instanceOpts);\n};\n\n//针对包括 element 组件类的启动方法\nComponent.prototype.start = function (instanceOpts) {\n  if (!this.$options || !this.$options.element) {\n    throw new Error('Start method cannot be called');\n  }\n  this.create(instanceOpts);\n};\n\nmodule.exports = Component;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/component/component.js","const Template = require('../template');\nconst Directive = Template.Directive;\n\n/**\n * 创建一个组件指令\n * @param {object} options 选项\n * @returns {object} 组件指令\n */\nfunction ComponentDirective(options) {\n\n  return new Directive({\n    type: Directive.TE,\n    literal: true,\n    final: true,\n    level: Directive.LE,\n\n    bind: function () {\n      this.component = new options.component({\n        deferReady: true,\n        parent: options.parent || this.scope\n      });\n      this.handleAttrs();\n      this.node.$target = this.component;\n      this.handler = this.compiler.compile(this.node, {\n        element: false,\n        children: false\n      });\n      this.handleContents();\n      this.component.$mount(this.node);\n      if (this.node.parentNode) {\n        this.node.parentNode.removeChild(this.node);\n      }\n    },\n\n    handleAttrs: function () {\n      this.attrs = [].slice.call(this.node.attributes);\n      let directiveRegexp = new RegExp('^' + this.prefix + ':', 'i');\n      this.attrs.forEach(function (attr) {\n        if (directiveRegexp.test(attr.name)) return;\n        if (attr.name in this.component.$properties) return;\n        this.component.$element.setAttribute(attr.name, attr.value);\n        this.node.removeAttribute(attr.name);\n      }, this);\n    },\n\n    handleContents: function () {\n      this.placeHandlers = [];\n      let places = [].slice.call(\n        this.component.$element.querySelectorAll('[' + this.prefix + '\\\\:content]')\n      );\n      places.forEach(function (place) {\n        //将内容插入到指定的「位置」\n        let contents = null;\n        let selector = place.getAttribute(this.prefix + ':content');\n        if (!selector) {\n          contents = [].slice.call(this.node.childNodes);\n        } else {\n          contents = [].slice.call(this.node.querySelectorAll(selector));\n        }\n        if (!contents || contents.length < 1) return;\n        place.innerHTML = '';\n        contents.forEach(function (content) {\n          place.appendChild(content.cloneNode(true));\n        }, this);\n        //编译插入后的子「内容模板」\n        let handler = this.compiler.compile(place);\n        this.placeHandlers.push(handler);\n      }, this);\n    },\n\n    execute: function (scope) {\n      this.handler(scope);\n      if (!this._ready_) {\n        this._ready_ = true;\n        this.component.$callHook('onReady');\n      }\n      this.placeHandlers.forEach(function (handler) {\n        handler(scope);\n      }, this);\n    }\n\n  });\n}\n\nmodule.exports = ComponentDirective;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/component/component-directive.js","module.exports = {\n  View: require('./view')\n};\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/component/components/index.js","const Component = require('../component');\nconst utils = require('ntils');\n\n/**\n * 内置视图组件\n * 可以加载并显示其它组件，并可以指定「转场效果」\n */\nconst View = new Component({\n\n  template: '<div></div>',\n\n  properties: {\n\n    /**\n     * 显示到视图中的组件\n     */\n    component: {\n      test: function (value) {\n        if (!value) return false;\n        return value instanceof Component || utils.isString(value);\n      },\n      set: function (component) {\n        if (this._transitioning) return;\n        this._transitioning = true;\n        //如果 value 是字符串则尝试从 $parent.components 中获取组件类 \n        if (utils.isString(component)) {\n          if (this.$parent && this.$parent.$components) {\n            this.component = this.$parent.$components[component];\n          } else {\n            this.component = null;\n          }\n          return;\n        }\n        //声明新旧组件变量\n        let newComponentInstance = null;\n        let oldComponentInstance = this.componentInstance;\n        //创建新组件实例\n        if (utils.isFunction(component)) {\n          newComponentInstance = new component({\n            parent: this\n          });\n        } else {\n          component.$setParent(this);\n          newComponentInstance = component;\n        }\n        //通过转场控制器进行转场准备\n        this.transition.prep(newComponentInstance, oldComponentInstance);\n        //挂载新组件实例\n        newComponentInstance.$appendTo(this.$element);\n        //通过转场控制器进行转场\n        this.transition.go(newComponentInstance, oldComponentInstance, function () {\n          //触发相关事件\n          this.$emit('enter', newComponentInstance);\n          this.$emit('leave', oldComponentInstance);\n          //销毁旧组件实例\n          if (oldComponentInstance) {\n            oldComponentInstance.$dispose();\n          }\n          this._transitioning = false;\n        }.bind(this));\n        //暂存当前组件实例\n        this.componentInstance = newComponentInstance;\n      },\n      get: function () {\n        return this._Component;\n      }\n    },\n\n    /**\n     * 视图的转场控制对象\n     */\n    transition: {\n      get: function () {\n        return this._transition || View.transition;\n      },\n      set: function (transition) {\n        if (this._transitioning) return;\n        if (!transition || (\n          utils.isFunction(transition.prep) &&\n          utils.isFunction(transition.go)\n        )) {\n          if (this._transition && utils.isFunction(this._transition.clean)) {\n            this._transition.clean(this);\n          }\n          if (transition && utils.isFunction(transition.init)) {\n            transition.init(this);\n          }\n          this._transition = transition;\n        } else {\n          throw new Error('Invalid transition');\n        }\n      }\n    }\n  },\n\n  /**\n   * 切换到指定的组件\n   * @param {Component} component 组件\n   * @param {transition} transition 转场控制组件\n   * @returns {void} 无返回\n   */\n  switchTo: function (component, transition) {\n    if (transition) {\n      this.transition = transition;\n    }\n    this.component = component;\n  }\n\n});\n\n/**\n * 默认转场设置\n */\nView.transition = {\n  //init: function () { },\n  //clean: function () { },\n\n  /**\n   * 转场开始前的准备\n   * @param {Component} newComponent 新组件\n   * @param {Component} oldComponent 旧组件\n   * @returns {void} 无返回\n   */\n  prep: function (newComponent, oldComponent) {\n    if (oldComponent) oldComponent.$element.style.display = 'none';\n  },\n\n  /**\n   * 执行转场动画\n   * @param {Component} newComponent 新组件\n   * @param {Component} oldComponent 旧组件\n   * @param {Function} done 完成后的回调\n   * @returns {void} 无返回\n   */\n  go: function (newComponent, oldComponent, done) {\n    done();\n  }\n};\n\nmodule.exports = View;\n\n\n// WEBPACK FOOTER //\n// ./~/.3.0.5@mokit/lib/component/components/view.js","const Plugin = require('mokit-plugin');\nmodule.exports = new Plugin(function () {\n  return require('./router');\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.1.0.6@mokit-router/lib/index.js","const factory = function (thunk) {\n  function Plugin(opts) {\n    return typeof Plugin.entity === 'function' ?\n      new Plugin.entity(opts) : Plugin.entity;\n  }\n  Plugin.install = function (mokit) {\n    factory.mokit = mokit;\n    this.entity = thunk();\n    this.entity.install(mokit);\n  };\n  if (typeof mokit !== 'undefined') {\n    mokit.use(Plugin);\n  }\n  return Plugin;\n};\n\nmodule.exports = factory;\n\n\n// WEBPACK FOOTER //\n// ./~/.1.0.5@mokit-plugin/index.js","const mokit = require('mokit-plugin').mokit;\nconst utils = mokit.utils;\nconst Class = mokit.Class;\nconst EventEmitter = mokit.EventEmitter;\nconst Component = mokit.Component;\nconst RouterBase = require('./router-base');\nconst HashDirver = require('./drivers/hash');\nconst RouterView = require('./components/router-view');\nconst LinkDirective = require('./directives/link');\n\nconst ROOT_PATH = '/';\n\nconst Router = new Class({\n  $name: 'Router',\n  $extends: RouterBase,\n\n  /**\n   * 路由类构造函数\n   * @param {Object} options 选项\n   * @returns {void} 无返回\n   */\n  constructor: function (options) {\n    this.$super();\n    options = options || utils.create(null);\n    if (options.view) this.view = options.view;\n    this.emitter = new EventEmitter(this);\n    this.dirvier = options.dirvier || new HashDirver(this);\n    this.dirvier.on('changed', this._onChanged.bind(this));\n  },\n\n  /**\n   *「路由视组」访问器\n   * @returns {RouterView} 路由视图组件实例\n   */\n  get view() {\n    return this._view;\n  },\n\n  /**\n   *「路由视组」设置器\n   * @param {RouterView} view 路由视图组件实例\n   * @returns {void} 无返回\n   */\n  set view(view) {\n    if (!(view instanceof RouterView)) {\n      throw new Error('Invalid RouterView');\n    }\n    this._view = view;\n    this._view._router = this;\n    this._onChanged(this.dirvier.get());\n  },\n\n  /**\n   * 路由发生变化时的处理函数\n   * @param {string} path 将要转到的路径\n   * @returns {void} 无返回\n   */\n  _onChanged: function (path) {\n    path = path || '/';\n    let fromPath = this.dirvier.get();\n    let toPath = this.resolveUri(path, fromPath);\n    toPath = path.split('?')[0].split('!')[0];\n    let routes = this.get(toPath);\n    if (!routes || routes.length < 1) return;\n    this.route = routes[0];\n    this.route.path = toPath;\n    this.route.query = this.parseQuery();\n    if (this.view) {\n      setTimeout(function () {\n        this.view.component = this.route.component;\n      }.bind(this), 0);\n    }\n    this.emitter.$emit('enter', toPath);\n    this.emitter.$emit('leave', fromPath);\n  },\n\n  /**\n   * 转到一个路径\n   * @param {string} path 将要转到的路径\n   * @returns {void} 无返回\n   */\n  go: function (path) {\n    this.dirvier.set(path);\n  },\n\n  /**\n   * 映射路由配置\n   * @param {Object} map 路由配置\n   * @returns {void} 无返回\n   */\n  map: function (map) {\n    utils.each(map, function (pattern, item) {\n      if (utils.isString(item)) {\n        item = map[item];\n      }\n      if (item instanceof Component) {\n        item = { component: item };\n      }\n      if (!item) throw new Error('Invalid route `' + pattern + '`');\n      item.pattern = pattern;\n      this.addOne(item);\n    }, this);\n  },\n\n  /**\n   * 解析相对路径\n   * @param {string} toUri 原始路径\n   * @param {string} fromUri 参数路径\n   * @returns {string} 解析后的相关路径\n   */\n  resolveUri: function (toUri, fromUri) {\n    toUri = toUri || ROOT_PATH;\n    if (toUri[0] == ROOT_PATH) return toUri;\n    fromUri = fromUri || ROOT_PATH;\n    fromUri = fromUri.split('?')[0].split('#')[0];\n    let baseDir = fromUri.substring(0, fromUri.lastIndexOf(ROOT_PATH));\n    let uriParts = toUri.split('#')[0].split(ROOT_PATH);\n    let uriHash = toUri.split('#')[1];\n    let newUriParts = baseDir.length > 0 ? baseDir.split(ROOT_PATH) : [];\n    uriParts.forEach(function (part) {\n      if (part == '..') {\n        newUriParts.pop();\n      } else if (part && part != '.') {\n        newUriParts.push(part);\n      }\n    }, this);\n    return ROOT_PATH + newUriParts.join(ROOT_PATH) + (uriHash ? '#' + uriHash : '');\n  },\n\n  /**\n   * 解析查询字符串并生成查询参数对象\n   * @returns {Object} 查询参数对象\n   */\n  parseQuery: function () {\n    let queryString = (location.href.split('#')[1] || '').split('?')[1] || '';\n    let pairs = queryString.split('&');\n    let query = utils.create(null);\n    pairs.forEach(function (pair) {\n      let strs = pair.split('=');\n      query[strs[0]] = strs[1];\n    }, this);\n    return query;\n  },\n\n  /**\n   * 启动应用\n   * @param {Component} root 应用根组件类\n   * @param {element} element 挂载元素\n   * @returns {Component} 应用根件实例\n   */\n  start: function (root, element) {\n    this.app = new root({\n      _router: this\n    });\n    this.app.$appendTo(element);\n    return this.app;\n  }\n\n});\n\nRouter.HashDirver = HashDirver;\n\n/**\n * 路由插件安装方法\n * @param {Component} owner 组件类\n * @returns {void} 无返回\n */\nRouter.install = function (owner) {\n\n  owner.Router = this;\n\n  //为组件实例扩展 $router 属性\n  Object.defineProperty(owner.prototype, '$router', {\n    get: function () {\n      if (this instanceof RouterView) {\n        return this._router || (this.$parent && this.$parent.$router);\n      } else if (this.$parent) {\n        return this.$parent.$router;\n      } else if (!this.$parent) {\n        return this._router || this.router;\n      } else {\n        return null;\n      }\n    }\n  });\n\n  //为组件实例扩展 $route 属性\n  Object.defineProperty(owner.prototype, '$route', {\n    get: function () {\n      return this.$router && this.$router.route;\n    }\n  });\n\n  //添加全局组件 RouterView\n  owner.component('RouterView', RouterView);\n\n  //添加 link 指令\n  owner.directive('link', LinkDirective);\n\n};\n\nmodule.exports = Router;\n\n\n// WEBPACK FOOTER //\n// ./~/.1.0.6@mokit-router/lib/router.js","const utils = require('ntils');\n\n/**\n * 定义正则表达式常量\n */\nconst PLACE_HOLDER_EXPR = /\\{.+?\\}/gim;\nconst COLLECT_EXPR_STR = '([^\\\\/]+)';\nconst GREEDY_COLLECT_EXPR_STR = '(.+)';\n\n/**\n * 定义路由实例扩展 __proto__\n **/\nconst routeInstanceProto = {};\n\n/**\n * 生成 action URL\n * @param {String} action action 名称\n * @return {String} 对应的 path\n **/\nrouteInstanceProto.actionUrl = function (action) {\n  let self = this;\n  let actionUrl = self.withoutActionUrl + '/' + action;\n  actionUrl = actionUrl.replace(/\\/\\//igm, '/');\n  return actionUrl;\n};\n\n/**\n * 定义路由对象\n * @param {Object} routes 路由眏射表\n * @param {Object} options 选项\n * @returns {void} 无返回\n */\nfunction Router(routes, options) {\n  let self = this;\n  options = options || {};\n  self.options = options;\n  self.table = [];\n  if (routes) {\n    self.add(routes);\n  }\n}\n\n/**\n * 解析占位符 key 定义\n * @param {String} _keyDefStr 占位符定义\n * @returns {Object} 占符符信息对象\n **/\nRouter.prototype._parseKeyDef = function (_keyDefStr) {\n  let keyDefStr = _keyDefStr.substring(1, _keyDefStr.length - 1);\n  let keyDefParts = keyDefStr.split(':');\n  let keyDef = {};\n  keyDef.name = keyDefParts[0];\n  if (keyDef.name[0] == '*') {\n    keyDef.greedy = true;\n    keyDef.name = keyDef.name.substring(1);\n  }\n  if (keyDefParts[1]) {\n    keyDef.expr = new RegExp(keyDefParts[1], 'igm');\n  }\n  return keyDef;\n};\n\n/**\n * 添加一个路由配置\n * @param {Object} route 路由项\n * @returns {void} 无返回\n */\nRouter.prototype.addOne = function (route) {\n  let self = this;\n  if (!route || !route.pattern) return;\n  //取到所有路由key\n  PLACE_HOLDER_EXPR.lastIndex = 0;\n  let keyDefs = route.pattern.match(PLACE_HOLDER_EXPR) || [];\n  route.keys = {};\n  //初始化 url 匹配测试表达式字符串\n  let exprStr = '^' + route.pattern + '$';\n  utils.each(keyDefs, function (i) {\n    //处理 key 定义\n    let keyDef = self._parseKeyDef(keyDefs[i]);\n    route.keys[keyDef.name] = {\n      index: i,\n      expr: keyDef.expr\n    };\n    //将 'key 占位符' 的表达式，替换为 '提交值的正则表达式'\n    let collectExprStr = keyDef.greedy ? GREEDY_COLLECT_EXPR_STR : COLLECT_EXPR_STR;\n    exprStr = exprStr.replace(keyDefs[i], collectExprStr);\n  });\n  //生成 url 匹配测试表达式\n  route.expr = new RegExp(exprStr, 'igm');\n  //处理所有 route 的 method \n  route.methods = route.methods || self.options.defaultMethods;\n  if (route.methods && route.methods.length > 0) {\n    route.methods = route.methods.map(function (method) {\n      return method.toUpperCase();\n    });\n  }\n  //继承原型\n  route.__proto__ = routeInstanceProto;\n  self.table.push(route);\n};\n\n/**\n * 添加一组路由配置表\n * @param {Route} routes 一个路由实体,格式:{pattern:'',target:object}\n * @returns {void} 无返回\n */\nRouter.prototype.add = function (routes) {\n  let self = this;\n  utils.each(routes, function (_name, _route) {\n    //判断是字符串还是一个对象，并都将 _route 转为对象\n    let route = utils.isString(_route) ? { 'target': _route } : _route;\n    //尝试从名称中解析出 method 和 pattern\n    let name = (_name || '/').toString();\n    let nameParts = name.split(' ');\n    if (nameParts.length > 1) {\n      route.methods = nameParts[0].split(',');\n      route.pattern = route.pattern || nameParts[1];\n    } else {\n      route.pattern = route.pattern || nameParts[0];\n    }\n    //解析 controller 和 action\n    //target 和 controller 不可同时配置，target 可以为 'controller action' 这样的格式\n    if (route.target) {\n      let targetParts = route.target.split(' ');\n      route.controller = route.controller || targetParts[0];\n      route.action = route.action || targetParts[1];\n    }\n    route.target = route.controller;\n    //添加 route\n    self.addOne(route);\n  });\n};\n\n/**\n * 解析路由动态 action\n * @param {Object} route 路由项\n * @returns {Object} 解析后路由项\n **/\nRouter.prototype._parseDynamicAction = function (route) {\n  if (route &&\n    route.action &&\n    route.action.indexOf('{') > -1) {\n    utils.each(route.params, function (key, val) {\n      route.action = utils.replace(route.action, '{' + key + '}', val);\n    });\n  }\n  return route;\n};\n\n/**\n * 创建一个路由实例\n * @param {object} srcRoute 路由项原型 proto\n * @param {String} url URL\n * @param {Object} params 参数\n * @returns {Object} 路由实例\n **/\nRouter.prototype._createRouteInstance = function (srcRoute, url, params) {\n  let self = this;\n  let routeInstance = { __proto__: srcRoute };\n  routeInstance.params = params;\n  if (routeInstance.action) {\n    let urlParts = url.split('/');\n    routeInstance.withoutActionUrl = urlParts.slice(0, urlParts.length - 1);\n  }\n  else {\n    routeInstance.withoutActionUrl = url;\n  }\n  routeInstance = self._parseDynamicAction(routeInstance);\n  return routeInstance;\n};\n\n/**\n * 通过请求路径获取第一个匹配的路由\n * @param {String} url 请求路径\n * @param {Boolean} handleActionFromUrl 是否从 URL 中分析 action\n * @returns {Route} 路由实体\n */\nRouter.prototype.get = function (url, handleActionFromUrl) {\n  let self = this;\n  let routeArray = [];\n  if (utils.isNull(url)) {\n    return routeArray;\n  }\n  url = url.replace(/\\/\\//igm, '/');\n  utils.each(self.table, function (i, route) {\n    route.expr.lastIndex = 0;\n    if (!route.expr.test(url)) return;\n    //通过子表达式 '正则的()' 取值\n    route.expr.lastIndex = 0;\n    let values = route.expr.exec(url);\n    //生成 params\n    let params = {};\n    let failed = utils.each(route.keys, function (key, keyDef) {\n      params[key] = values[keyDef.index + 1];\n      if (!keyDef.expr) return;\n      keyDef.expr.lastIndex = 0;\n      if (!keyDef.expr.test(params[key])) {\n        return true;\n      }\n    });\n    if (failed) return;\n    routeArray.push(self._createRouteInstance(route, url, params));\n  });\n  //确定 parseActionFromUrl 的值\n  handleActionFromUrl = utils.isNull(handleActionFromUrl) ?\n    self.options.parseActionFromUrl : handleActionFromUrl;\n  //如果需要 parseActionFromUrl\n  if (handleActionFromUrl) {\n    let _routeArray = self._getForActionFromUrl(url);\n    routeArray.push.apply(routeArray, _routeArray);\n  }\n  return routeArray;\n};\n\n/**\n * 从 url 中分解出来 action ，然后获取 route array\n * @param {String} url 路径\n * @returns {Object} 路由实例\n **/\nRouter.prototype._getForActionFromUrl = function (url) {\n  let self = this;\n  /*\n  一是在如果直接匹配不成功时，才将 “/” 分隔的最后一个 “字串” 当作 action 进行再一次匹配\n  */\n  let urlParts = url.split('/');\n  let lastIndex = urlParts.length - 1;\n  let action = urlParts[lastIndex];\n  //检查分解出来的 action 是否合法\n  if (action === '' || action.indexOf('.') > -1) {\n    return null;\n  }\n  let ctrlRouteUrl = urlParts.slice(0, lastIndex).join('/');\n  if (ctrlRouteUrl === '') ctrlRouteUrl = '/';\n  let ctrlRouteArray = self.get(ctrlRouteUrl, false) || [];\n  let routeArray = ctrlRouteArray.filter(function (route) {\n    /**\n     * 从 URL 分解出来的 action 不可能是动态的 action\n     * route.action 没有指定时才能作为 parseAction 的合法 route\n     **/\n    if (route.action) return false;\n    //设定 action 作为指向 action 的 route\n    route.action = action;\n    //标记一下 action 在 url 中\n    route.actionFromUrl = true;\n    return true;\n  });\n  return routeArray;\n};\n\n/**\n * 过滤出包含指定 method 的 route\n * @param {array} routeArray 路由实例数组\n * @param {String} method HTTP method\n * @returns {Object} 匹配的路由实例\n **/\nRouter.prototype.matchByMethod = function (routeArray, method) {\n  if (!routeArray || routeArray.length < 1) {\n    return routeArray;\n  }\n  return routeArray.filter(function (route) {\n    if (!route || !route.methods || route.methods.length < 1) {\n      return false;\n    }\n    return route.methods.indexOf(method) > -1;\n  })[0];\n};\n\nmodule.exports = Router;\n\n/*end*/\n\n\n// WEBPACK FOOTER //\n// ./~/.1.0.6@mokit-router/lib/router-base.js","const mokit = require('mokit-plugin').mokit;\nconst Class = mokit.Class;\nconst EventEmitter = mokit.EventEmitter;\n\nconst SEPARATOR = '#!';\nconst ROOT_PATH = '/';\n\n/**\n * 基于 has 的路由驱动\n */\nconst HashDriver = new Class({\n  $name: 'HashDriver',\n  $extends: EventEmitter,\n\n  /**\n   * 路由驱动构造函数\n   * @param {Object} router 路径实例\n   * @returns {void} 无返回\n   */\n  constructor: function (router) {\n    this.$super();\n    this.router = router;\n    window.addEventListener('hashchange', function () {\n      this._onChange();\n    }.bind(this));\n  },\n\n  /**\n   * 获取当前路径\n   * @returns {string} 当前路径\n   */\n  get: function () {\n    return location.hash.split(SEPARATOR)[1] || ROOT_PATH;\n  },\n\n  /**\n   * 设置当前路径\n   * @param {string} path 要转到的路径\n   * @returns {void} 无返回\n   */\n  set: function (path) {\n    path = path || ROOT_PATH;\n    location.hash = SEPARATOR + path;\n  },\n\n  /**\n   * 路由发生变化时的处理函数\n   * @param {string} path 将要转到的路径\n   * @returns {void} 无返回\n   */\n  _onChange: function (path) {\n    path = path || this.get() || '';\n    if (path[0] != ROOT_PATH) path = ROOT_PATH + path;\n    this.emit('changed', path);\n  }\n\n});\n\nmodule.exports = HashDriver;\n\n\n// WEBPACK FOOTER //\n// ./~/.1.0.6@mokit-router/lib/drivers/hash.js","const mokit = require('mokit-plugin').mokit;\nconst View = mokit.components.View;\n\nconst RouterView = View.extend({\n  properties: {\n    router: {\n      test: function (router) {\n        return !!router;\n      },\n      get: function () {\n        return this._router;\n      },\n      set: function (router) {\n        this._router = router;\n        this._router.view = this;\n      }\n    }\n  },\n  onCreated: function () {\n    if (!this.router && this.$router) {\n      this.router = this.$router;\n    }\n  }\n});\n\nmodule.exports = RouterView;\n\n\n// WEBPACK FOOTER //\n// ./~/.1.0.6@mokit-router/lib/components/router-view.js","const mokit = require('mokit-plugin').mokit;\nconst Directive = mokit.Directive;\nconst EventEmitter = mokit.EventEmitter;\n\nmodule.exports = new Directive({\n  literal: true,\n\n  bind: function () {\n    let eventTarget = this.node.$target || this.node;\n    this.emiter = new EventEmitter(eventTarget);\n    this.emiter.addListener(this.decorates[0] || 'click', function () {\n      if (!this.scope || !this.scope.$router) return;\n      this.scope.$router.go(this.path);\n    }.bind(this), false);\n  },\n\n  unbind: function () {\n    this.emiter.removeListener();\n  },\n\n  update: function (path) {\n    this.path = path;\n  }\n\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.1.0.6@mokit-router/lib/directives/link.js","const Plugin = require('mokit-plugin');\nmodule.exports = new Plugin(function () {\n  return require('./touch');\n});\n\n\n// WEBPACK FOOTER //\n// ./~/.1.0.1@mokit-touch/lib/index.js","const mokit = require('mokit-plugin').mokit;\nconst utils = mokit.utils;\n\nconst SUPPORT_TOUCH = ('ontouchstart' in document);\nconst START_EVENT_NAME = SUPPORT_TOUCH ? 'touchstart' : 'mousedown';\nconst MOVE_EVENT_NAME = SUPPORT_TOUCH ? 'touchmove' : 'mousemove';\nconst END_EVENT_NAME = SUPPORT_TOUCH ? 'touchend' : 'mouseup';\nconst CUSTOM_EVENT_NAMES = `tap,taphold,dbltap,swipe,swipeup,swiperight,\nswipedown,swipeleft,pointdown,pointmove,pointup`;\n\nmodule.exports = {\n  name: CUSTOM_EVENT_NAMES,\n\n  option: {\n    swipeDurationThreshold: 1000,\n    swipeHorizontalDistanceThreshold: 25,\n    swipeVerticalDistanceThreshold: 45,\n    holdDurationThreshold: 1000,\n    dblDurationThreshold: 450,\n    scrollSupressionThreshold: 25\n  },\n\n  addListener: function (emitter, name, listener, capture) {\n    if (!utils.isFunction(listener)) return;\n\n    let self = this;\n\n    //处理 touchstart 事件\n    listener.touchstart = listener.touchstart || function (event) {\n      let point = event.changedTouches ? event.changedTouches[0] : event;\n      listener.startPoint = listener.endPoint = {\n        'x': point.pageX,\n        'y': point.pageY,\n        'timeStamp': event.timeStamp,\n        'point': point\n      };\n      if (name == 'taphold') {\n        listener.createHoldHandler(event);\n      }\n      //模拟鼠标事件\n      if (name == 'pointdown') {\n        utils.copy(listener.startPoint, event);\n        emitter.emit('pointdown', event);\n        emitter.isPointDown = true;\n      }\n    };\n\n    //创建 hold 处理器\n    listener.createHoldHandler = listener.createHoldHandler || function (event) {\n      // 处理 taphold 事件\n      if (!listener.holdTimer && !listener.holdHandler) {\n        let option = self.option;\n        listener.holdHandler = function () {\n          event.taphold = true;\n          emitter.emit('taphold', event);\n        };\n        listener.holdTimer = setTimeout(function () {\n          if (listener.holdHandler) listener.holdHandler();\n        }, option.holdDurationThreshold);\n      }\n    };\n\n    //清除 hold 处理器\n    listener.clearHoldHandler = listener.clearHoldHandler || function () {\n      if (listener.holdTimer) {\n        clearTimeout(listener.holdTimer);\n        listener.holdTimer = null;\n        listener.holdHandler = null;\n      }\n    };\n\n    //获取划动信息\n    listener.getTouchInfo = function (event) {\n      let point = event.changedTouches ? event.changedTouches[0] : event;\n      listener.endPoint = {\n        'x': point.pageX,\n        'y': point.pageY,\n        'timeStamp': event.timeStamp,\n        'point': point\n      };\n      //\n      let option = self.option;\n      // 一些计算结果\n      let info = {};\n      info.timeStamp = listener.endPoint ? listener.endPoint.timeStamp : null;\n      info.existStartAndStop = listener.endPoint && listener.startPoint;\n      info.horizontalDistance = info.existStartAndStop ? listener.endPoint.x - listener.startPoint.x : 0;\n      info.verticalDistance = info.existStartAndStop ? listener.endPoint.y - listener.startPoint.y : 0;\n      info.horizontalDistanceValue = Math.abs(info.horizontalDistance);\n      info.verticalDistanceVlaue = Math.abs(info.verticalDistance);\n      info.isHorizontal = info.horizontalDistanceValue >= info.verticalDistanceVlaue;\n      info.isVertical = !info.sHorizontal;\n      info.isSwipeMove = info.horizontalDistanceValue >= option.swipeHorizontalDistanceThreshold ||\n        info.verticalDistanceVlaue >= option.swipeVerticalDistanceThreshold;\n      info.isSwipeTime = info.existStartAndStop ?\n        listener.endPoint.timeStamp - listener.startPoint.timeStamp <= option.swipeDurationThreshold : true;\n      info.isHoldTime = info.existStartAndStop ?\n        listener.endPoint.timeStamp - listener.startPoint.timeStamp >= option.holdDurationThreshold : false;\n      //这里的 direction 仅是指划动方法，不代表 swipe 动作，swipe 动作还有时间或划动距离等因素\n      if (info.isHorizontal && info.horizontalDistance > 0) {\n        info.direction = 'right';\n      } else if (info.isHorizontal && info.horizontalDistance < 0) {\n        info.direction = 'left';\n      } else if (info.isVertical && info.verticalDistance > 0) {\n        info.direction = 'down';\n      } else if (info.isVertical && info.verticalDistance < 0) {\n        info.direction = 'up';\n      }\n      return info;\n    };\n\n    //处理 touchmove 事件\n    listener.touchmove = listener.touchmove || function (event) {\n      let info = listener.getTouchInfo(event);\n      if (info.isSwipeMove) {\n        listener.clearHoldHandler();\n      }\n      let stopBubble = false;\n      //模拟鼠标事件\n      if (emitter.isPointDown && name == 'pointmove') {\n        utils.copy(listener.endPoint, event);\n        emitter.emit('pointmove', event);\n        stopBubble = true;\n      }\n      //在绑定划动的方向上禁止滚动，因为 Android 4.x 不如此处理，touchend 事件将不触发\n      if ((name == 'swipe') || (name == 'swipe' + info.direction)) {\n        stopBubble = true;\n      }\n      //如果需要阻止冒泡\n      if (stopBubble) {\n        return false;\n      }\n    };\n\n    //完成事件\n    listener.done = listener.done || function (event) {\n      listener.clearHoldHandler();\n      let info = listener.getTouchInfo(event);\n      //模拟鼠标事件\n      if (name == 'pointup') {\n        utils.copy(listener.endPoint, event);\n        emitter.emit('pointup', event);\n        emitter.isPointDown = false;\n      }\n      // 根据计算结果判断\n      if (info.isSwipeTime && info.isSwipeMove) {\n        event.swipe = true;\n        event.direction = info.direction;\n        if (name == 'swipe') {\n          emitter.emit('swipe', event);\n        }\n        if (name == 'swipe' + event.direction) {\n          emitter.emit('swipe' + event.direction, event);\n        }\n      } else if (info.isSwipeTime && !info.isSwipeMove && !info.isHoldTime) {\n        if (name == 'tap') {\n          emitter.emit('tap', event);\n        }\n        if (name == 'dbltap') {\n          //处理 “双击”\n          let option = self.option;\n          event.dbltap = listener.PreTapTime && info.timeStamp - listener.PreTapTime <= option.dblDurationThreshold;\n          if (event.dbltap) {\n            emitter.emit('dbltap', event);\n            listener.PreTapTime = null;\n          } else {\n            listener.PreTapTime = listener.endPoint.timeStamp;\n          }\n        }\n      }\n    };\n\n    //绑定组合事件\n    emitter.on(START_EVENT_NAME, listener.touchstart, capture);\n    emitter.on(MOVE_EVENT_NAME, listener.touchmove, capture);\n    emitter.on(END_EVENT_NAME, listener.done, capture);\n\n  },\n\n  removeListener: function (emitter, name, listener, capture) {\n    //只有指定了 handler 才能取消构成组合事件的 “原事件”\n    //否则会直接移除会将其他 touchstart 等事件也移除\n    if (utils.isFunction(listener)) {\n      if (utils.isFunction(listener.touchstart)) {\n        emitter.off(START_EVENT_NAME, listener.touchstart, capture);\n      }\n      if (utils.isFunction(listener.touchmove)) {\n        emitter.off(MOVE_EVENT_NAME, listener.touchmove, capture);\n      }\n      if (utils.isFunction(listener.done)) {\n        emitter.off(END_EVENT_NAME, listener.done, capture);\n      }\n    }\n  },\n\n  install: function (mokit) {\n    mokit.EventEmitter.register(this);\n    mokit.Touch = this;\n  }\n\n};\n\n\n// WEBPACK FOOTER //\n// ./~/.1.0.1@mokit-touch/lib/touch.js"],"sourceRoot":""}